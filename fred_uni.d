//Written in the D programming language
/**
 * Fast Regular expressions for D
 *
 * License: $(WEB boost.org/LICENSE_1_0.txt, Boost License 1.0).
 *
 * Authors: Dmitry Olshansky
 *
 */
//Automatically generated from Unicode Character Database files
import fred;
//any codepoint in these intervals is trivially uppercased/lowercased (lowest bit set -> lower)
immutable evenUpper = Charset([
    0x00100, 0x0012f +1,
    0x00132, 0x00137 +1,
    0x00139, 0x00148 +1,
    0x0014a, 0x00177 +1,
    0x00179, 0x0017e +1,
    0x00182, 0x00185 +1,
    0x00187, 0x00188 +1,
    0x0018b, 0x0018c +1,
    0x00191, 0x00192 +1,
    0x00198, 0x00199 +1,
    0x001a0, 0x001a5 +1,
    0x001a7, 0x001a8 +1,
    0x001ac, 0x001ad +1,
    0x001af, 0x001b0 +1,
    0x001b3, 0x001b6 +1,
    0x001b8, 0x001b9 +1,
    0x001bc, 0x001bd +1,
    0x001c5, 0x001c6 +1,
    0x001c8, 0x001c9 +1,
    0x001cb, 0x001dc +1,
    0x001de, 0x001ef +1,
    0x001f2, 0x001f5 +1,
    0x001f8, 0x0021f +1,
    0x00222, 0x00233 +1,
    0x0023b, 0x0023c +1,
    0x00241, 0x00242 +1,
    0x00246, 0x0024f +1,
    0x00370, 0x00373 +1,
    0x00376, 0x00377 +1,
    0x003c2, 0x003c3 +1,
    0x003d8, 0x003ef +1,
    0x003f7, 0x003f8 +1,
    0x003fa, 0x003fb +1,
    0x00460, 0x00481 +1,
    0x0048a, 0x004bf +1,
    0x004c1, 0x004ce +1,
    0x004d0, 0x00527 +1,
    0x01e00, 0x01e95 +1,
    0x01ea0, 0x01eff +1,
    0x02183, 0x02184 +1,
    0x02c60, 0x02c61 +1,
    0x02c67, 0x02c6c +1,
    0x02c72, 0x02c73 +1,
    0x02c75, 0x02c76 +1,
    0x02c80, 0x02ce3 +1,
    0x02ceb, 0x02cee +1,
    0x0a640, 0x0a66d +1,
    0x0a680, 0x0a697 +1,
    0x0a722, 0x0a72f +1,
    0x0a732, 0x0a76f +1,
    0x0a779, 0x0a77c +1,
    0x0a77e, 0x0a787 +1,
    0x0a78b, 0x0a78c +1,
    0x0a790, 0x0a791 +1,
    0x0a7a0, 0x0a7a9 +1,
]);

struct CommonCaseEntry
{
    short delta;
    Charset set;

}
//these are a bit harder to lowercase/uppercase lower: +- delta
immutable commonCaseTable = [
CommonCaseEntry(8, Charset([0x01f00,  0x01f07 +1,0x01f10,  0x01f15 +1,0x01f20,  0x01f27 +1,0x01f30,  0x01f37 +1,0x01f40,  0x01f45 +1,0x01f60,  0x01f67 +1,0x01f80,  0x01f87 +1,0x01f90,  0x01f97 +1,0x01fa0,  0x01fa7 +1,0x01fb0,  0x01fb1 +1,0x01fd0,  0x01fd1 +1,])),
CommonCaseEntry(-8, Charset([0x01f08,  0x01f0f +1,0x01f18,  0x01f1d +1,0x01f28,  0x01f2f +1,0x01f38,  0x01f3f +1,0x01f48,  0x01f4d +1,0x01f68,  0x01f6f +1,0x01f88,  0x01f8f +1,0x01f98,  0x01f9f +1,0x01fa8,  0x01faf +1,0x01fb8,  0x01fb9 +1,0x01fd8,  0x01fd9 +1,])),
CommonCaseEntry(16, Charset([0x02160,  0x0216e +1,])),
CommonCaseEntry(-16, Charset([0x02170,  0x0217e +1,])),
CommonCaseEntry(26, Charset([0x024b6,  0x024cf +1,])),
CommonCaseEntry(-26, Charset([0x024d0,  0x024e9 +1,])),
CommonCaseEntry(32, Charset([0x00041,  0x0005a +1,0x000c0,  0x000d6 +1,0x000d8,  0x000de +1,0x00391,  0x003a1 +1,0x003a3,  0x003ab +1,0x00410,  0x0042f +1,0x0ff21,  0x0ff3a +1,])),
CommonCaseEntry(-32, Charset([0x00061,  0x0007a +1,0x000e0,  0x000f6 +1,0x000f8,  0x000fe +1,0x003b1,  0x003c1 +1,0x003c3,  0x003cb +1,0x00430,  0x0044f +1,0x0ff41,  0x0ff5a +1,])),
CommonCaseEntry(37, Charset([0x00388,  0x0038a +1,])),
CommonCaseEntry(-37, Charset([0x003ad,  0x003af +1,])),
CommonCaseEntry(40, Charset([0x10400,  0x10427 +1,])),
CommonCaseEntry(-40, Charset([0x10428,  0x1044f +1,])),
CommonCaseEntry(48, Charset([0x00531,  0x00556 +1,0x02c00,  0x02c11 +1,])),
CommonCaseEntry(-48, Charset([0x00561,  0x00586 +1,0x02c30,  0x02c41 +1,])),
CommonCaseEntry(63, Charset([0x0038e,  0x0038f +1,])),
CommonCaseEntry(-63, Charset([0x003cd,  0x003ce +1,])),
CommonCaseEntry(74, Charset([0x01f70,  0x01f71 +1,])),
CommonCaseEntry(-74, Charset([0x01fba,  0x01fbb +1,])),
CommonCaseEntry(80, Charset([0x00400,  0x0040f +1,])),
CommonCaseEntry(-80, Charset([0x00450,  0x0045f +1,])),
CommonCaseEntry(86, Charset([0x01f72,  0x01f75 +1,])),
CommonCaseEntry(-86, Charset([0x01fc8,  0x01fcb +1,])),
CommonCaseEntry(100, Charset([0x01f76,  0x01f77 +1,])),
CommonCaseEntry(-100, Charset([0x01fda,  0x01fdb +1,])),
CommonCaseEntry(112, Charset([0x01f7a,  0x01f7b +1,])),
CommonCaseEntry(-112, Charset([0x01fea,  0x01feb +1,])),
CommonCaseEntry(126, Charset([0x01f7c,  0x01f7d +1,])),
CommonCaseEntry(-126, Charset([0x01ffa,  0x01ffb +1,])),
CommonCaseEntry(128, Charset([0x01f78,  0x01f79 +1,])),
CommonCaseEntry(-128, Charset([0x01ff8,  0x01ff9 +1,])),
CommonCaseEntry(130, Charset([0x0037b,  0x0037d +1,])),
CommonCaseEntry(-130, Charset([0x003fd,  0x003ff +1,])),
CommonCaseEntry(205, Charset([0x00189,  0x0018a +1,])),
CommonCaseEntry(-205, Charset([0x00256,  0x00257 +1,])),
CommonCaseEntry(217, Charset([0x001b1,  0x001b2 +1,])),
CommonCaseEntry(-217, Charset([0x0028a,  0x0028b +1,])),
CommonCaseEntry(7264, Charset([0x010a0,  0x010b7 +1,])),
CommonCaseEntry(-7264, Charset([0x02d00,  0x02d17 +1,])),
CommonCaseEntry(10815, Charset([0x0023f,  0x00240 +1,])),
CommonCaseEntry(-10815, Charset([0x02c7e,  0x02c7f +1,])),
];

//horrible irregularities are stockpiled here as equivalent pairs (note  it's not a 1:1 mapping, more like n:m)
immutable(uint)[] casePairs = [
0x0006b, 0x0212a,
0x00073, 0x0017f,
0x000b5, 0x003bc,
0x000df, 0x01e9e,
0x000e5, 0x0212b,
0x000ff, 0x00178,
0x00180, 0x00243,
0x00181, 0x00253,
0x00186, 0x00254,
0x0018e, 0x001dd,
0x0018f, 0x00259,
0x00190, 0x0025b,
0x00193, 0x00260,
0x00194, 0x00263,
0x00195, 0x001f6,
0x00196, 0x00269,
0x00197, 0x00268,
0x0019a, 0x0023d,
0x0019c, 0x0026f,
0x0019d, 0x00272,
0x0019e, 0x00220,
0x0019f, 0x00275,
0x001a6, 0x00280,
0x001a9, 0x00283,
0x001ae, 0x00288,
0x001b7, 0x00292,
0x001bf, 0x001f7,
0x001c4, 0x001c6,
0x001c7, 0x001c9,
0x001ca, 0x001cc,
0x001f1, 0x001f3,
0x0023a, 0x02c65,
0x0023e, 0x02c66,
0x00244, 0x00289,
0x00245, 0x0028c,
0x00250, 0x02c6f,
0x00251, 0x02c6d,
0x00252, 0x02c70,
0x00265, 0x0a78d,
0x0026b, 0x02c62,
0x00271, 0x02c6e,
0x0027d, 0x02c64,
0x00345, 0x003b9,
0x00386, 0x003ac,
0x0038c, 0x003cc,
0x003b2, 0x003d0,
0x003b5, 0x003f5,
0x003b8, 0x003f4,
0x003b8, 0x003d1,
0x003b9, 0x01fbe,
0x003ba, 0x003f0,
0x003c0, 0x003d6,
0x003c1, 0x003f1,
0x003c6, 0x003d5,
0x003c9, 0x02126,
0x003cf, 0x003d7,
0x003f2, 0x003f9,
0x004c0, 0x004cf,
0x01d79, 0x0a77d,
0x01d7d, 0x02c63,
0x01e61, 0x01e9b,
0x01f51, 0x01f59,
0x01f53, 0x01f5b,
0x01f55, 0x01f5d,
0x01f57, 0x01f5f,
0x01fb3, 0x01fbc,
0x01fc3, 0x01fcc,
0x01fe0, 0x01fe8,
0x01fe1, 0x01fe9,
0x01fe5, 0x01fec,
0x01ff3, 0x01ffc,
0x02132, 0x0214e,
];
struct UnicodeProperty
{
    string name;
    immutable Charset set;
}
immutable(Charset) unicodeInCombining_Diacritical_Marks_Supplement = Charset([
    0x01dc0, 0x01dff +1,
]);

immutable(Charset) unicodeInCJK_Radicals_Supplement = Charset([
    0x02e80, 0x02eff +1,
]);

immutable(Charset) unicodeInEthiopic_Supplement = Charset([
    0x01380, 0x0139f +1,
]);

immutable(Charset) unicodeInPhags_pa = Charset([
    0x0a840, 0x0a87f +1,
]);

immutable(Charset) unicodeInSyriac = Charset([
    0x00700, 0x0074f +1,
]);

immutable(Charset) unicodeInGujarati = Charset([
    0x00a80, 0x00aff +1,
]);

immutable(Charset) unicodeOther_ID_Start = Charset([
    0x02118, 0x02118 +1,
    0x0212e, 0x0212e +1,
    0x0309b, 0x0309c +1,
]);

immutable(Charset) unicodeInKharoshthi = Charset([
    0x10a00, 0x10a5f +1,
]);

immutable(Charset) unicodeInHangul_Jamo = Charset([
    0x01100, 0x011ff +1,
]);

immutable(Charset) unicodeRunic = Charset([
    0x016a0, 0x016ea +1,
    0x016ee, 0x016f0 +1,
]);

immutable(Charset) unicodeInKayah_Li = Charset([
    0x0a900, 0x0a92f +1,
]);

immutable(Charset) unicodeOther_Default_Ignorable_Code_Point = Charset([
    0x0034f, 0x0034f +1,
    0x0115f, 0x01160 +1,
    0x02065, 0x02069 +1,
    0x03164, 0x03164 +1,
    0x0ffa0, 0x0ffa0 +1,
    0x0fff0, 0x0fff8 +1,
    0xe0000, 0xe0000 +1,
    0xe0002, 0xe001f +1,
    0xe0080, 0xe00ff +1,
    0xe01f0, 0xe0fff +1,
]);

immutable(Charset) unicodeOld_Turkic = Charset([
    0x10c00, 0x10c48 +1,
]);

immutable(Charset) unicodeInLydian = Charset([
    0x10920, 0x1093f +1,
]);

immutable(Charset) unicodeIDS_Binary_Operator = Charset([
    0x02ff0, 0x02ff1 +1,
    0x02ff4, 0x02ffb +1,
]);

immutable(Charset) unicodeTai_Tham = Charset([
    0x01a20, 0x01a5e +1,
    0x01a60, 0x01a7c +1,
    0x01a7f, 0x01a89 +1,
    0x01a90, 0x01a99 +1,
    0x01aa0, 0x01aad +1,
]);

immutable(Charset) unicodeLinear_B = Charset([
    0x10000, 0x1000b +1,
    0x1000d, 0x10026 +1,
    0x10028, 0x1003a +1,
    0x1003c, 0x1003d +1,
    0x1003f, 0x1004d +1,
    0x10050, 0x1005d +1,
    0x10080, 0x100fa +1,
]);

immutable(Charset) unicodeInSupplemental_Arrows_A = Charset([
    0x027f0, 0x027ff +1,
]);

immutable(Charset) unicodeInMathematical_Alphanumeric_Symbols = Charset([
    0x1d400, 0x1d7ff +1,
]);

immutable(Charset) unicodeArmenian = Charset([
    0x00531, 0x00556 +1,
    0x00559, 0x0055f +1,
    0x00561, 0x00587 +1,
    0x0058a, 0x0058a +1,
    0x0fb13, 0x0fb17 +1,
]);

immutable(Charset) unicodeInBlock_Elements = Charset([
    0x02580, 0x0259f +1,
]);

immutable(Charset) unicodeInSupplemental_Arrows_B = Charset([
    0x02900, 0x0297f +1,
]);

immutable(Charset) unicodeInBalinese = Charset([
    0x01b00, 0x01b7f +1,
]);

immutable(Charset) unicodeCyrillic = Charset([
    0x00400, 0x00484 +1,
    0x00487, 0x00527 +1,
    0x01d2b, 0x01d2b +1,
    0x01d78, 0x01d78 +1,
    0x02de0, 0x02dff +1,
    0x0a640, 0x0a673 +1,
    0x0a67c, 0x0a697 +1,
]);

immutable(Charset) unicodeInBamum_Supplement = Charset([
    0x16800, 0x16a3f +1,
]);

immutable(Charset) unicodeWhite_Space = Charset([
    0x00009, 0x0000d +1,
    0x00020, 0x00020 +1,
    0x00085, 0x00085 +1,
    0x000a0, 0x000a0 +1,
    0x01680, 0x01680 +1,
    0x0180e, 0x0180e +1,
    0x02000, 0x0200a +1,
    0x02028, 0x02029 +1,
    0x0202f, 0x0202f +1,
    0x0205f, 0x0205f +1,
    0x03000, 0x03000 +1,
]);

immutable(Charset) unicodeBatak = Charset([
    0x01bc0, 0x01bf3 +1,
    0x01bfc, 0x01bff +1,
]);

immutable(Charset) unicodeDeprecated = Charset([
    0x00149, 0x00149 +1,
    0x00673, 0x00673 +1,
    0x00f77, 0x00f77 +1,
    0x00f79, 0x00f79 +1,
    0x017a3, 0x017a4 +1,
    0x0206a, 0x0206f +1,
    0x02329, 0x0232a +1,
    0xe0001, 0xe0001 +1,
    0xe0020, 0xe007f +1,
]);

immutable(Charset) unicodeInUnified_Canadian_Aboriginal_Syllabics_Extended = Charset([
    0x018b0, 0x018ff +1,
]);

immutable(Charset) unicodeCherokee = Charset([
    0x013a0, 0x013f4 +1,
]);

immutable(Charset) unicodeInInscriptional_Parthian = Charset([
    0x10b40, 0x10b5f +1,
]);

immutable(Charset) unicodeHiragana = Charset([
    0x03041, 0x03096 +1,
    0x0309d, 0x0309f +1,
    0x1b001, 0x1b001 +1,
    0x1f200, 0x1f200 +1,
]);

immutable(Charset) unicodeInCJK_Compatibility_Ideographs = Charset([
    0x0f900, 0x0faff +1,
]);

immutable(Charset) unicodeInAncient_Symbols = Charset([
    0x10190, 0x101cf +1,
]);

immutable(Charset) unicodeInOld_South_Arabian = Charset([
    0x10a60, 0x10a7f +1,
]);

immutable(Charset) unicodePattern_Syntax = Charset([
    0x00021, 0x0002f +1,
    0x0003a, 0x00040 +1,
    0x0005b, 0x0005e +1,
    0x00060, 0x00060 +1,
    0x0007b, 0x0007e +1,
    0x000a1, 0x000a7 +1,
    0x000a9, 0x000a9 +1,
    0x000ab, 0x000ac +1,
    0x000ae, 0x000ae +1,
    0x000b0, 0x000b1 +1,
    0x000b6, 0x000b6 +1,
    0x000bb, 0x000bb +1,
    0x000bf, 0x000bf +1,
    0x000d7, 0x000d7 +1,
    0x000f7, 0x000f7 +1,
    0x02010, 0x02027 +1,
    0x02030, 0x0203e +1,
    0x02041, 0x02053 +1,
    0x02055, 0x0205e +1,
    0x02190, 0x0245f +1,
    0x02500, 0x02775 +1,
    0x02794, 0x02bff +1,
    0x02e00, 0x02e7f +1,
    0x03001, 0x03003 +1,
    0x03008, 0x03020 +1,
    0x03030, 0x03030 +1,
    0x0fd3e, 0x0fd3f +1,
    0x0fe45, 0x0fe46 +1,
]);

immutable(Charset) unicodeNew_Tai_Lue = Charset([
    0x01980, 0x019ab +1,
    0x019b0, 0x019c9 +1,
    0x019d0, 0x019da +1,
    0x019de, 0x019df +1,
]);

immutable(Charset) unicodeASCII_Hex_Digit = Charset([
    0x00030, 0x00039 +1,
    0x00041, 0x00046 +1,
    0x00061, 0x00066 +1,
]);

immutable(Charset) unicodeArabic = Charset([
    0x00600, 0x00603 +1,
    0x00606, 0x0060b +1,
    0x0060d, 0x0061a +1,
    0x0061e, 0x0061e +1,
    0x00620, 0x0063f +1,
    0x00641, 0x0064a +1,
    0x00656, 0x0065e +1,
    0x0066a, 0x0066f +1,
    0x00671, 0x006dc +1,
    0x006de, 0x006ff +1,
    0x00750, 0x0077f +1,
    0x0fb50, 0x0fbc1 +1,
    0x0fbd3, 0x0fd3d +1,
    0x0fd50, 0x0fd8f +1,
    0x0fd92, 0x0fdc7 +1,
    0x0fdf0, 0x0fdfc +1,
    0x0fe70, 0x0fe74 +1,
    0x0fe76, 0x0fefc +1,
    0x10e60, 0x10e7e +1,
]);

immutable(Charset) unicodeInCuneiform_Numbers_and_Punctuation = Charset([
    0x12400, 0x1247f +1,
]);

immutable(Charset) unicodeBrahmi = Charset([
    0x11000, 0x1104d +1,
    0x11052, 0x1106f +1,
]);

immutable(Charset) unicodeInControl_Pictures = Charset([
    0x02400, 0x0243f +1,
]);

immutable(Charset) unicodeOther_ID_Continue = Charset([
    0x000b7, 0x000b7 +1,
    0x00387, 0x00387 +1,
    0x01369, 0x01371 +1,
    0x019da, 0x019da +1,
]);

immutable(Charset) unicodeInOl_Chiki = Charset([
    0x01c50, 0x01c7f +1,
]);

immutable(Charset) unicodeInArmenian = Charset([
    0x00530, 0x0058f +1,
]);

immutable(Charset) unicodeInCyrillic = Charset([
    0x00400, 0x004ff +1,
]);

immutable(Charset) unicodeInNew_Tai_Lue = Charset([
    0x01980, 0x019df +1,
]);

immutable(Charset) unicodeInHigh_Surrogates = Charset([
    0x0d800, 0x0db7f +1,
]);

immutable(Charset) unicodeInHigh_Private_Use_Surrogates = Charset([
    0x0db80, 0x0dbff +1,
]);

immutable(Charset) unicodeInAncient_Greek_Numbers = Charset([
    0x10140, 0x1018f +1,
]);

immutable(Charset) unicodeQuotation_Mark = Charset([
    0x00022, 0x00022 +1,
    0x00027, 0x00027 +1,
    0x000ab, 0x000ab +1,
    0x000bb, 0x000bb +1,
    0x02018, 0x0201f +1,
    0x02039, 0x0203a +1,
    0x0300c, 0x0300f +1,
    0x0301d, 0x0301f +1,
    0x0fe41, 0x0fe44 +1,
    0x0ff02, 0x0ff02 +1,
    0x0ff07, 0x0ff07 +1,
    0x0ff62, 0x0ff63 +1,
]);

immutable(Charset) unicodeTai_Le = Charset([
    0x01950, 0x0196d +1,
    0x01970, 0x01974 +1,
]);

immutable(Charset) unicodeCc = Charset([
    0x00000, 0x0001f +1,
    0x0007f, 0x0009f +1,
]);

immutable(Charset) unicodeInCherokee = Charset([
    0x013a0, 0x013ff +1,
]);

immutable(Charset) unicodeCoptic = Charset([
    0x003e2, 0x003ef +1,
    0x02c80, 0x02cf1 +1,
    0x02cf9, 0x02cff +1,
]);

immutable(Charset) unicodeInCyrillic_Supplement = Charset([
    0x00500, 0x0052f +1,
]);

immutable(Charset) unicodeCf = Charset([
    0x000ad, 0x000ad +1,
    0x00600, 0x00603 +1,
    0x006dd, 0x006dd +1,
    0x0070f, 0x0070f +1,
    0x017b4, 0x017b5 +1,
    0x0200b, 0x0200f +1,
    0x0202a, 0x0202e +1,
    0x02060, 0x02064 +1,
    0x0206a, 0x0206f +1,
    0x0feff, 0x0feff +1,
    0x0fff9, 0x0fffb +1,
    0x110bd, 0x110bd +1,
    0x1d173, 0x1d17a +1,
    0xe0001, 0xe0001 +1,
    0xe0020, 0xe007f +1,
]);

immutable(Charset) unicodeGothic = Charset([
    0x10330, 0x1034a +1,
]);

immutable(Charset) unicodeInHiragana = Charset([
    0x03040, 0x0309f +1,
]);

immutable(Charset) unicodeInIPA_Extensions = Charset([
    0x00250, 0x002af +1,
]);

immutable(Charset) unicodeOgham = Charset([
    0x01680, 0x0169c +1,
]);

immutable(Charset) unicodeInCJK_Compatibility_Forms = Charset([
    0x0fe30, 0x0fe4f +1,
]);

immutable(Charset) unicodeInShavian = Charset([
    0x10450, 0x1047f +1,
]);

immutable(Charset) unicodeCn = Charset([
    0x00378, 0x00379 +1,
    0x0037f, 0x00383 +1,
    0x0038b, 0x0038b +1,
    0x0038d, 0x0038d +1,
    0x003a2, 0x003a2 +1,
    0x00528, 0x00530 +1,
    0x00557, 0x00558 +1,
    0x00560, 0x00560 +1,
    0x00588, 0x00588 +1,
    0x0058b, 0x00590 +1,
    0x005c8, 0x005cf +1,
    0x005eb, 0x005ef +1,
    0x005f5, 0x005ff +1,
    0x00604, 0x00605 +1,
    0x0061c, 0x0061d +1,
    0x0070e, 0x0070e +1,
    0x0074b, 0x0074c +1,
    0x007b2, 0x007bf +1,
    0x007fb, 0x007ff +1,
    0x0082e, 0x0082f +1,
    0x0083f, 0x0083f +1,
    0x0085c, 0x0085d +1,
    0x0085f, 0x008ff +1,
    0x00978, 0x00978 +1,
    0x00980, 0x00980 +1,
    0x00984, 0x00984 +1,
    0x0098d, 0x0098e +1,
    0x00991, 0x00992 +1,
    0x009a9, 0x009a9 +1,
    0x009b1, 0x009b1 +1,
    0x009b3, 0x009b5 +1,
    0x009ba, 0x009bb +1,
    0x009c5, 0x009c6 +1,
    0x009c9, 0x009ca +1,
    0x009cf, 0x009d6 +1,
    0x009d8, 0x009db +1,
    0x009de, 0x009de +1,
    0x009e4, 0x009e5 +1,
    0x009fc, 0x00a00 +1,
    0x00a04, 0x00a04 +1,
    0x00a0b, 0x00a0e +1,
    0x00a11, 0x00a12 +1,
    0x00a29, 0x00a29 +1,
    0x00a31, 0x00a31 +1,
    0x00a34, 0x00a34 +1,
    0x00a37, 0x00a37 +1,
    0x00a3a, 0x00a3b +1,
    0x00a3d, 0x00a3d +1,
    0x00a43, 0x00a46 +1,
    0x00a49, 0x00a4a +1,
    0x00a4e, 0x00a50 +1,
    0x00a52, 0x00a58 +1,
    0x00a5d, 0x00a5d +1,
    0x00a5f, 0x00a65 +1,
    0x00a76, 0x00a80 +1,
    0x00a84, 0x00a84 +1,
    0x00a8e, 0x00a8e +1,
    0x00a92, 0x00a92 +1,
    0x00aa9, 0x00aa9 +1,
    0x00ab1, 0x00ab1 +1,
    0x00ab4, 0x00ab4 +1,
    0x00aba, 0x00abb +1,
    0x00ac6, 0x00ac6 +1,
    0x00aca, 0x00aca +1,
    0x00ace, 0x00acf +1,
    0x00ad1, 0x00adf +1,
    0x00ae4, 0x00ae5 +1,
    0x00af0, 0x00af0 +1,
    0x00af2, 0x00b00 +1,
    0x00b04, 0x00b04 +1,
    0x00b0d, 0x00b0e +1,
    0x00b11, 0x00b12 +1,
    0x00b29, 0x00b29 +1,
    0x00b31, 0x00b31 +1,
    0x00b34, 0x00b34 +1,
    0x00b3a, 0x00b3b +1,
    0x00b45, 0x00b46 +1,
    0x00b49, 0x00b4a +1,
    0x00b4e, 0x00b55 +1,
    0x00b58, 0x00b5b +1,
    0x00b5e, 0x00b5e +1,
    0x00b64, 0x00b65 +1,
    0x00b78, 0x00b81 +1,
    0x00b84, 0x00b84 +1,
    0x00b8b, 0x00b8d +1,
    0x00b91, 0x00b91 +1,
    0x00b96, 0x00b98 +1,
    0x00b9b, 0x00b9b +1,
    0x00b9d, 0x00b9d +1,
    0x00ba0, 0x00ba2 +1,
    0x00ba5, 0x00ba7 +1,
    0x00bab, 0x00bad +1,
    0x00bba, 0x00bbd +1,
    0x00bc3, 0x00bc5 +1,
    0x00bc9, 0x00bc9 +1,
    0x00bce, 0x00bcf +1,
    0x00bd1, 0x00bd6 +1,
    0x00bd8, 0x00be5 +1,
    0x00bfb, 0x00c00 +1,
    0x00c04, 0x00c04 +1,
    0x00c0d, 0x00c0d +1,
    0x00c11, 0x00c11 +1,
    0x00c29, 0x00c29 +1,
    0x00c34, 0x00c34 +1,
    0x00c3a, 0x00c3c +1,
    0x00c45, 0x00c45 +1,
    0x00c49, 0x00c49 +1,
    0x00c4e, 0x00c54 +1,
    0x00c57, 0x00c57 +1,
    0x00c5a, 0x00c5f +1,
    0x00c64, 0x00c65 +1,
    0x00c70, 0x00c77 +1,
    0x00c80, 0x00c81 +1,
    0x00c84, 0x00c84 +1,
    0x00c8d, 0x00c8d +1,
    0x00c91, 0x00c91 +1,
    0x00ca9, 0x00ca9 +1,
    0x00cb4, 0x00cb4 +1,
    0x00cba, 0x00cbb +1,
    0x00cc5, 0x00cc5 +1,
    0x00cc9, 0x00cc9 +1,
    0x00cce, 0x00cd4 +1,
    0x00cd7, 0x00cdd +1,
    0x00cdf, 0x00cdf +1,
    0x00ce4, 0x00ce5 +1,
    0x00cf0, 0x00cf0 +1,
    0x00cf3, 0x00d01 +1,
    0x00d04, 0x00d04 +1,
    0x00d0d, 0x00d0d +1,
    0x00d11, 0x00d11 +1,
    0x00d3b, 0x00d3c +1,
    0x00d45, 0x00d45 +1,
    0x00d49, 0x00d49 +1,
    0x00d4f, 0x00d56 +1,
    0x00d58, 0x00d5f +1,
    0x00d64, 0x00d65 +1,
    0x00d76, 0x00d78 +1,
    0x00d80, 0x00d81 +1,
    0x00d84, 0x00d84 +1,
    0x00d97, 0x00d99 +1,
    0x00db2, 0x00db2 +1,
    0x00dbc, 0x00dbc +1,
    0x00dbe, 0x00dbf +1,
    0x00dc7, 0x00dc9 +1,
    0x00dcb, 0x00dce +1,
    0x00dd5, 0x00dd5 +1,
    0x00dd7, 0x00dd7 +1,
    0x00de0, 0x00df1 +1,
    0x00df5, 0x00e00 +1,
    0x00e3b, 0x00e3e +1,
    0x00e5c, 0x00e80 +1,
    0x00e83, 0x00e83 +1,
    0x00e85, 0x00e86 +1,
    0x00e89, 0x00e89 +1,
    0x00e8b, 0x00e8c +1,
    0x00e8e, 0x00e93 +1,
    0x00e98, 0x00e98 +1,
    0x00ea0, 0x00ea0 +1,
    0x00ea4, 0x00ea4 +1,
    0x00ea6, 0x00ea6 +1,
    0x00ea8, 0x00ea9 +1,
    0x00eac, 0x00eac +1,
    0x00eba, 0x00eba +1,
    0x00ebe, 0x00ebf +1,
    0x00ec5, 0x00ec5 +1,
    0x00ec7, 0x00ec7 +1,
    0x00ece, 0x00ecf +1,
    0x00eda, 0x00edb +1,
    0x00ede, 0x00eff +1,
    0x00f48, 0x00f48 +1,
    0x00f6d, 0x00f70 +1,
    0x00f98, 0x00f98 +1,
    0x00fbd, 0x00fbd +1,
    0x00fcd, 0x00fcd +1,
    0x00fdb, 0x00fff +1,
    0x010c6, 0x010cf +1,
    0x010fd, 0x010ff +1,
    0x01249, 0x01249 +1,
    0x0124e, 0x0124f +1,
    0x01257, 0x01257 +1,
    0x01259, 0x01259 +1,
    0x0125e, 0x0125f +1,
    0x01289, 0x01289 +1,
    0x0128e, 0x0128f +1,
    0x012b1, 0x012b1 +1,
    0x012b6, 0x012b7 +1,
    0x012bf, 0x012bf +1,
    0x012c1, 0x012c1 +1,
    0x012c6, 0x012c7 +1,
    0x012d7, 0x012d7 +1,
    0x01311, 0x01311 +1,
    0x01316, 0x01317 +1,
    0x0135b, 0x0135c +1,
    0x0137d, 0x0137f +1,
    0x0139a, 0x0139f +1,
    0x013f5, 0x013ff +1,
    0x0169d, 0x0169f +1,
    0x016f1, 0x016ff +1,
    0x0170d, 0x0170d +1,
    0x01715, 0x0171f +1,
    0x01737, 0x0173f +1,
    0x01754, 0x0175f +1,
    0x0176d, 0x0176d +1,
    0x01771, 0x01771 +1,
    0x01774, 0x0177f +1,
    0x017de, 0x017df +1,
    0x017ea, 0x017ef +1,
    0x017fa, 0x017ff +1,
    0x0180f, 0x0180f +1,
    0x0181a, 0x0181f +1,
    0x01878, 0x0187f +1,
    0x018ab, 0x018af +1,
    0x018f6, 0x018ff +1,
    0x0191d, 0x0191f +1,
    0x0192c, 0x0192f +1,
    0x0193c, 0x0193f +1,
    0x01941, 0x01943 +1,
    0x0196e, 0x0196f +1,
    0x01975, 0x0197f +1,
    0x019ac, 0x019af +1,
    0x019ca, 0x019cf +1,
    0x019db, 0x019dd +1,
    0x01a1c, 0x01a1d +1,
    0x01a5f, 0x01a5f +1,
    0x01a7d, 0x01a7e +1,
    0x01a8a, 0x01a8f +1,
    0x01a9a, 0x01a9f +1,
    0x01aae, 0x01aff +1,
    0x01b4c, 0x01b4f +1,
    0x01b7d, 0x01b7f +1,
    0x01bab, 0x01bad +1,
    0x01bba, 0x01bbf +1,
    0x01bf4, 0x01bfb +1,
    0x01c38, 0x01c3a +1,
    0x01c4a, 0x01c4c +1,
    0x01c80, 0x01ccf +1,
    0x01cf3, 0x01cff +1,
    0x01de7, 0x01dfb +1,
    0x01f16, 0x01f17 +1,
    0x01f1e, 0x01f1f +1,
    0x01f46, 0x01f47 +1,
    0x01f4e, 0x01f4f +1,
    0x01f58, 0x01f58 +1,
    0x01f5a, 0x01f5a +1,
    0x01f5c, 0x01f5c +1,
    0x01f5e, 0x01f5e +1,
    0x01f7e, 0x01f7f +1,
    0x01fb5, 0x01fb5 +1,
    0x01fc5, 0x01fc5 +1,
    0x01fd4, 0x01fd5 +1,
    0x01fdc, 0x01fdc +1,
    0x01ff0, 0x01ff1 +1,
    0x01ff5, 0x01ff5 +1,
    0x01fff, 0x01fff +1,
    0x02065, 0x02069 +1,
    0x02072, 0x02073 +1,
    0x0208f, 0x0208f +1,
    0x0209d, 0x0209f +1,
    0x020ba, 0x020cf +1,
    0x020f1, 0x020ff +1,
    0x0218a, 0x0218f +1,
    0x023f4, 0x023ff +1,
    0x02427, 0x0243f +1,
    0x0244b, 0x0245f +1,
    0x02700, 0x02700 +1,
    0x027cb, 0x027cb +1,
    0x027cd, 0x027cd +1,
    0x02b4d, 0x02b4f +1,
    0x02b5a, 0x02bff +1,
    0x02c2f, 0x02c2f +1,
    0x02c5f, 0x02c5f +1,
    0x02cf2, 0x02cf8 +1,
    0x02d26, 0x02d2f +1,
    0x02d66, 0x02d6e +1,
    0x02d71, 0x02d7e +1,
    0x02d97, 0x02d9f +1,
    0x02da7, 0x02da7 +1,
    0x02daf, 0x02daf +1,
    0x02db7, 0x02db7 +1,
    0x02dbf, 0x02dbf +1,
    0x02dc7, 0x02dc7 +1,
    0x02dcf, 0x02dcf +1,
    0x02dd7, 0x02dd7 +1,
    0x02ddf, 0x02ddf +1,
    0x02e32, 0x02e7f +1,
    0x02e9a, 0x02e9a +1,
    0x02ef4, 0x02eff +1,
    0x02fd6, 0x02fef +1,
    0x02ffc, 0x02fff +1,
    0x03040, 0x03040 +1,
    0x03097, 0x03098 +1,
    0x03100, 0x03104 +1,
    0x0312e, 0x03130 +1,
    0x0318f, 0x0318f +1,
    0x031bb, 0x031bf +1,
    0x031e4, 0x031ef +1,
    0x0321f, 0x0321f +1,
    0x032ff, 0x032ff +1,
    0x04db6, 0x04dbf +1,
    0x09fcc, 0x09fff +1,
    0x0a48d, 0x0a48f +1,
    0x0a4c7, 0x0a4cf +1,
    0x0a62c, 0x0a63f +1,
    0x0a674, 0x0a67b +1,
    0x0a698, 0x0a69f +1,
    0x0a6f8, 0x0a6ff +1,
    0x0a78f, 0x0a78f +1,
    0x0a792, 0x0a79f +1,
    0x0a7aa, 0x0a7f9 +1,
    0x0a82c, 0x0a82f +1,
    0x0a83a, 0x0a83f +1,
    0x0a878, 0x0a87f +1,
    0x0a8c5, 0x0a8cd +1,
    0x0a8da, 0x0a8df +1,
    0x0a8fc, 0x0a8ff +1,
    0x0a954, 0x0a95e +1,
    0x0a97d, 0x0a97f +1,
    0x0a9ce, 0x0a9ce +1,
    0x0a9da, 0x0a9dd +1,
    0x0a9e0, 0x0a9ff +1,
    0x0aa37, 0x0aa3f +1,
    0x0aa4e, 0x0aa4f +1,
    0x0aa5a, 0x0aa5b +1,
    0x0aa7c, 0x0aa7f +1,
    0x0aac3, 0x0aada +1,
    0x0aae0, 0x0ab00 +1,
    0x0ab07, 0x0ab08 +1,
    0x0ab0f, 0x0ab10 +1,
    0x0ab17, 0x0ab1f +1,
    0x0ab27, 0x0ab27 +1,
    0x0ab2f, 0x0abbf +1,
    0x0abee, 0x0abef +1,
    0x0abfa, 0x0abff +1,
    0x0d7a4, 0x0d7af +1,
    0x0d7c7, 0x0d7ca +1,
    0x0d7fc, 0x0d7ff +1,
    0x0fa2e, 0x0fa2f +1,
    0x0fa6e, 0x0fa6f +1,
    0x0fada, 0x0faff +1,
    0x0fb07, 0x0fb12 +1,
    0x0fb18, 0x0fb1c +1,
    0x0fb37, 0x0fb37 +1,
    0x0fb3d, 0x0fb3d +1,
    0x0fb3f, 0x0fb3f +1,
    0x0fb42, 0x0fb42 +1,
    0x0fb45, 0x0fb45 +1,
    0x0fbc2, 0x0fbd2 +1,
    0x0fd40, 0x0fd4f +1,
    0x0fd90, 0x0fd91 +1,
    0x0fdc8, 0x0fdef +1,
    0x0fdfe, 0x0fdff +1,
    0x0fe1a, 0x0fe1f +1,
    0x0fe27, 0x0fe2f +1,
    0x0fe53, 0x0fe53 +1,
    0x0fe67, 0x0fe67 +1,
    0x0fe6c, 0x0fe6f +1,
    0x0fe75, 0x0fe75 +1,
    0x0fefd, 0x0fefe +1,
    0x0ff00, 0x0ff00 +1,
    0x0ffbf, 0x0ffc1 +1,
    0x0ffc8, 0x0ffc9 +1,
    0x0ffd0, 0x0ffd1 +1,
    0x0ffd8, 0x0ffd9 +1,
    0x0ffdd, 0x0ffdf +1,
    0x0ffe7, 0x0ffe7 +1,
    0x0ffef, 0x0fff8 +1,
    0x0fffe, 0x0ffff +1,
    0x1000c, 0x1000c +1,
    0x10027, 0x10027 +1,
    0x1003b, 0x1003b +1,
    0x1003e, 0x1003e +1,
    0x1004e, 0x1004f +1,
    0x1005e, 0x1007f +1,
    0x100fb, 0x100ff +1,
    0x10103, 0x10106 +1,
    0x10134, 0x10136 +1,
    0x1018b, 0x1018f +1,
    0x1019c, 0x101cf +1,
    0x101fe, 0x1027f +1,
    0x1029d, 0x1029f +1,
    0x102d1, 0x102ff +1,
    0x1031f, 0x1031f +1,
    0x10324, 0x1032f +1,
    0x1034b, 0x1037f +1,
    0x1039e, 0x1039e +1,
    0x103c4, 0x103c7 +1,
    0x103d6, 0x103ff +1,
    0x1049e, 0x1049f +1,
    0x104aa, 0x107ff +1,
    0x10806, 0x10807 +1,
    0x10809, 0x10809 +1,
    0x10836, 0x10836 +1,
    0x10839, 0x1083b +1,
    0x1083d, 0x1083e +1,
    0x10856, 0x10856 +1,
    0x10860, 0x108ff +1,
    0x1091c, 0x1091e +1,
    0x1093a, 0x1093e +1,
    0x10940, 0x109ff +1,
    0x10a04, 0x10a04 +1,
    0x10a07, 0x10a0b +1,
    0x10a14, 0x10a14 +1,
    0x10a18, 0x10a18 +1,
    0x10a34, 0x10a37 +1,
    0x10a3b, 0x10a3e +1,
    0x10a48, 0x10a4f +1,
    0x10a59, 0x10a5f +1,
    0x10a80, 0x10aff +1,
    0x10b36, 0x10b38 +1,
    0x10b56, 0x10b57 +1,
    0x10b73, 0x10b77 +1,
    0x10b80, 0x10bff +1,
    0x10c49, 0x10e5f +1,
    0x10e7f, 0x10fff +1,
    0x1104e, 0x11051 +1,
    0x11070, 0x1107f +1,
    0x110c2, 0x11fff +1,
    0x1236f, 0x123ff +1,
    0x12463, 0x1246f +1,
    0x12474, 0x12fff +1,
    0x1342f, 0x167ff +1,
    0x16a39, 0x1afff +1,
    0x1b002, 0x1cfff +1,
    0x1d0f6, 0x1d0ff +1,
    0x1d127, 0x1d128 +1,
    0x1d1de, 0x1d1ff +1,
    0x1d246, 0x1d2ff +1,
    0x1d357, 0x1d35f +1,
    0x1d372, 0x1d3ff +1,
    0x1d455, 0x1d455 +1,
    0x1d49d, 0x1d49d +1,
    0x1d4a0, 0x1d4a1 +1,
    0x1d4a3, 0x1d4a4 +1,
    0x1d4a7, 0x1d4a8 +1,
    0x1d4ad, 0x1d4ad +1,
    0x1d4ba, 0x1d4ba +1,
    0x1d4bc, 0x1d4bc +1,
    0x1d4c4, 0x1d4c4 +1,
    0x1d506, 0x1d506 +1,
    0x1d50b, 0x1d50c +1,
    0x1d515, 0x1d515 +1,
    0x1d51d, 0x1d51d +1,
    0x1d53a, 0x1d53a +1,
    0x1d53f, 0x1d53f +1,
    0x1d545, 0x1d545 +1,
    0x1d547, 0x1d549 +1,
    0x1d551, 0x1d551 +1,
    0x1d6a6, 0x1d6a7 +1,
    0x1d7cc, 0x1d7cd +1,
    0x1d800, 0x1efff +1,
    0x1f02c, 0x1f02f +1,
    0x1f094, 0x1f09f +1,
    0x1f0af, 0x1f0b0 +1,
    0x1f0bf, 0x1f0c0 +1,
    0x1f0d0, 0x1f0d0 +1,
    0x1f0e0, 0x1f0ff +1,
    0x1f10b, 0x1f10f +1,
    0x1f12f, 0x1f12f +1,
    0x1f16a, 0x1f16f +1,
    0x1f19b, 0x1f1e5 +1,
    0x1f203, 0x1f20f +1,
    0x1f23b, 0x1f23f +1,
    0x1f249, 0x1f24f +1,
    0x1f252, 0x1f2ff +1,
    0x1f321, 0x1f32f +1,
    0x1f336, 0x1f336 +1,
    0x1f37d, 0x1f37f +1,
    0x1f394, 0x1f39f +1,
    0x1f3c5, 0x1f3c5 +1,
    0x1f3cb, 0x1f3df +1,
    0x1f3f1, 0x1f3ff +1,
    0x1f43f, 0x1f43f +1,
    0x1f441, 0x1f441 +1,
    0x1f4f8, 0x1f4f8 +1,
    0x1f4fd, 0x1f4ff +1,
    0x1f53e, 0x1f54f +1,
    0x1f568, 0x1f5fa +1,
    0x1f600, 0x1f600 +1,
    0x1f611, 0x1f611 +1,
    0x1f615, 0x1f615 +1,
    0x1f617, 0x1f617 +1,
    0x1f619, 0x1f619 +1,
    0x1f61b, 0x1f61b +1,
    0x1f61f, 0x1f61f +1,
    0x1f626, 0x1f627 +1,
    0x1f62c, 0x1f62c +1,
    0x1f62e, 0x1f62f +1,
    0x1f634, 0x1f634 +1,
    0x1f641, 0x1f644 +1,
    0x1f650, 0x1f67f +1,
    0x1f6c6, 0x1f6ff +1,
    0x1f774, 0x1ffff +1,
    0x2a6d7, 0x2a6ff +1,
    0x2b735, 0x2b73f +1,
    0x2b81e, 0x2f7ff +1,
    0x2fa1e, 0xe0000 +1,
    0xe0002, 0xe001f +1,
    0xe0080, 0xe00ff +1,
    0xe01f0, 0xeffff +1,
    0xffffe, 0xfffff +1,
    0x10fffe, 0x10ffff +1,
]);

immutable(Charset) unicodeInPhaistos_Disc = Charset([
    0x101d0, 0x101ff +1,
]);

immutable(Charset) unicodeCo = Charset([
    0x0e000, 0x0f8ff +1,
    0xf0000, 0xffffd +1,
    0x100000, 0x10fffd +1,
]);

immutable(Charset) unicodeInKana_Supplement = Charset([
    0x1b000, 0x1b0ff +1,
]);

immutable(Charset) unicodeMath = Charset([
    0x0002b, 0x0002b +1,
    0x0003c, 0x0003e +1,
    0x0005e, 0x0005e +1,
    0x0007c, 0x0007c +1,
    0x0007e, 0x0007e +1,
    0x000ac, 0x000ac +1,
    0x000b1, 0x000b1 +1,
    0x000d7, 0x000d7 +1,
    0x000f7, 0x000f7 +1,
    0x003d0, 0x003d2 +1,
    0x003d5, 0x003d5 +1,
    0x003f0, 0x003f1 +1,
    0x003f4, 0x003f6 +1,
    0x00606, 0x00608 +1,
    0x02016, 0x02016 +1,
    0x02032, 0x02034 +1,
    0x02040, 0x02040 +1,
    0x02044, 0x02044 +1,
    0x02052, 0x02052 +1,
    0x02061, 0x02064 +1,
    0x0207a, 0x0207e +1,
    0x0208a, 0x0208e +1,
    0x020d0, 0x020dc +1,
    0x020e1, 0x020e1 +1,
    0x020e5, 0x020e6 +1,
    0x020eb, 0x020ef +1,
    0x02102, 0x02102 +1,
    0x02107, 0x02107 +1,
    0x0210a, 0x02113 +1,
    0x02115, 0x02115 +1,
    0x02118, 0x0211d +1,
    0x02124, 0x02124 +1,
    0x02128, 0x02129 +1,
    0x0212c, 0x0212d +1,
    0x0212f, 0x02131 +1,
    0x02133, 0x02138 +1,
    0x0213c, 0x02149 +1,
    0x0214b, 0x0214b +1,
    0x02190, 0x021a7 +1,
    0x021a9, 0x021ae +1,
    0x021b0, 0x021b1 +1,
    0x021b6, 0x021b7 +1,
    0x021bc, 0x021db +1,
    0x021dd, 0x021dd +1,
    0x021e4, 0x021e5 +1,
    0x021f4, 0x022ff +1,
    0x02308, 0x0230b +1,
    0x02320, 0x02321 +1,
    0x0237c, 0x0237c +1,
    0x0239b, 0x023b5 +1,
    0x023b7, 0x023b7 +1,
    0x023d0, 0x023d0 +1,
    0x023dc, 0x023e2 +1,
    0x025a0, 0x025a1 +1,
    0x025ae, 0x025b7 +1,
    0x025bc, 0x025c1 +1,
    0x025c6, 0x025c7 +1,
    0x025ca, 0x025cb +1,
    0x025cf, 0x025d3 +1,
    0x025e2, 0x025e2 +1,
    0x025e4, 0x025e4 +1,
    0x025e7, 0x025ec +1,
    0x025f8, 0x025ff +1,
    0x02605, 0x02606 +1,
    0x02640, 0x02640 +1,
    0x02642, 0x02642 +1,
    0x02660, 0x02663 +1,
    0x0266d, 0x0266f +1,
    0x027c0, 0x027ca +1,
    0x027cc, 0x027cc +1,
    0x027ce, 0x027ff +1,
    0x02900, 0x02aff +1,
    0x02b30, 0x02b44 +1,
    0x02b47, 0x02b4c +1,
    0x0fb29, 0x0fb29 +1,
    0x0fe61, 0x0fe66 +1,
    0x0fe68, 0x0fe68 +1,
    0x0ff0b, 0x0ff0b +1,
    0x0ff1c, 0x0ff1e +1,
    0x0ff3c, 0x0ff3c +1,
    0x0ff3e, 0x0ff3e +1,
    0x0ff5c, 0x0ff5c +1,
    0x0ff5e, 0x0ff5e +1,
    0x0ffe2, 0x0ffe2 +1,
    0x0ffe9, 0x0ffec +1,
    0x1d400, 0x1d454 +1,
    0x1d456, 0x1d49c +1,
    0x1d49e, 0x1d49f +1,
    0x1d4a2, 0x1d4a2 +1,
    0x1d4a5, 0x1d4a6 +1,
    0x1d4a9, 0x1d4ac +1,
    0x1d4ae, 0x1d4b9 +1,
    0x1d4bb, 0x1d4bb +1,
    0x1d4bd, 0x1d4c3 +1,
    0x1d4c5, 0x1d505 +1,
    0x1d507, 0x1d50a +1,
    0x1d50d, 0x1d514 +1,
    0x1d516, 0x1d51c +1,
    0x1d51e, 0x1d539 +1,
    0x1d53b, 0x1d53e +1,
    0x1d540, 0x1d544 +1,
    0x1d546, 0x1d546 +1,
    0x1d54a, 0x1d550 +1,
    0x1d552, 0x1d6a5 +1,
    0x1d6a8, 0x1d7cb +1,
    0x1d7ce, 0x1d7ff +1,
]);

immutable(Charset) unicodeInLinear_B_Ideograms = Charset([
    0x10080, 0x100ff +1,
]);

immutable(Charset) unicodeInYi_Syllables = Charset([
    0x0a000, 0x0a48f +1,
]);

immutable(Charset) unicodeInInscriptional_Pahlavi = Charset([
    0x10b60, 0x10b7f +1,
]);

immutable(Charset) unicodeCs = Charset([
    0x0d800, 0x0dfff +1,
]);

immutable(Charset) unicodeInHangul_Jamo_Extended_A = Charset([
    0x0a960, 0x0a97f +1,
]);

immutable(Charset) unicodeInGlagolitic = Charset([
    0x02c00, 0x02c5f +1,
]);

immutable(Charset) unicodeInHangul_Jamo_Extended_B = Charset([
    0x0d7b0, 0x0d7ff +1,
]);

immutable(Charset) unicodeInSpecials = Charset([
    0x0fff0, 0x0ffff +1,
]);

immutable(Charset) unicodeBopomofo = Charset([
    0x002ea, 0x002eb +1,
    0x03105, 0x0312d +1,
    0x031a0, 0x031ba +1,
]);

immutable(Charset) unicodeInBamum = Charset([
    0x0a6a0, 0x0a6ff +1,
]);

immutable(Charset) unicodeInPlaying_Cards = Charset([
    0x1f0a0, 0x1f0ff +1,
]);

immutable(Charset) unicodeInArabic = Charset([
    0x00600, 0x006ff +1,
]);

immutable(Charset) unicodeVariation_Selector = Charset([
    0x0180b, 0x0180d +1,
    0x0fe00, 0x0fe0f +1,
    0xe0100, 0xe01ef +1,
]);

immutable(Charset) unicodeInMathematical_Operators = Charset([
    0x02200, 0x022ff +1,
]);

immutable(Charset) unicodeInPhonetic_Extensions_Supplement = Charset([
    0x01d80, 0x01dbf +1,
]);

immutable(Charset) unicodeInBrahmi = Charset([
    0x11000, 0x1107f +1,
]);

immutable(Charset) unicodeMalayalam = Charset([
    0x00d02, 0x00d03 +1,
    0x00d05, 0x00d0c +1,
    0x00d0e, 0x00d10 +1,
    0x00d12, 0x00d3a +1,
    0x00d3d, 0x00d44 +1,
    0x00d46, 0x00d48 +1,
    0x00d4a, 0x00d4e +1,
    0x00d57, 0x00d57 +1,
    0x00d60, 0x00d63 +1,
    0x00d66, 0x00d75 +1,
    0x00d79, 0x00d7f +1,
]);

immutable(Charset) unicodeInCJK_Unified_Ideographs_Extension_A = Charset([
    0x03400, 0x04dbf +1,
]);

immutable(Charset) unicodeInCJK_Unified_Ideographs_Extension_B = Charset([
    0x20000, 0x2a6df +1,
]);

immutable(Charset) unicodeInYijing_Hexagram_Symbols = Charset([
    0x04dc0, 0x04dff +1,
]);

immutable(Charset) unicodeInCJK_Unified_Ideographs_Extension_C = Charset([
    0x2a700, 0x2b73f +1,
]);

immutable(Charset) unicodeInTibetan = Charset([
    0x00f00, 0x00fff +1,
]);

immutable(Charset) unicodeInImperial_Aramaic = Charset([
    0x10840, 0x1085f +1,
]);

immutable(Charset) unicodeInCJK_Unified_Ideographs_Extension_D = Charset([
    0x2b740, 0x2b81f +1,
]);

immutable(Charset) unicodeInAlchemical_Symbols = Charset([
    0x1f700, 0x1f77f +1,
]);

immutable(Charset) unicodePattern_White_Space = Charset([
    0x00009, 0x0000d +1,
    0x00020, 0x00020 +1,
    0x00085, 0x00085 +1,
    0x0200e, 0x0200f +1,
    0x02028, 0x02029 +1,
]);

immutable(Charset) unicodeInEmoticons = Charset([
    0x1f600, 0x1f64f +1,
]);

immutable(Charset) unicodeInYi_Radicals = Charset([
    0x0a490, 0x0a4cf +1,
]);

immutable(Charset) unicodeInBraille_Patterns = Charset([
    0x02800, 0x028ff +1,
]);

immutable(Charset) unicodeInscriptional_Pahlavi = Charset([
    0x10b60, 0x10b72 +1,
    0x10b78, 0x10b7f +1,
]);

immutable(Charset) unicodeInCoptic = Charset([
    0x02c80, 0x02cff +1,
]);

immutable(Charset) unicodeInGothic = Charset([
    0x10330, 0x1034f +1,
]);

immutable(Charset) unicodeInDevanagari = Charset([
    0x00900, 0x0097f +1,
]);

immutable(Charset) unicodeSTerm = Charset([
    0x00021, 0x00021 +1,
    0x0002e, 0x0002e +1,
    0x0003f, 0x0003f +1,
    0x0055c, 0x0055c +1,
    0x0055e, 0x0055e +1,
    0x00589, 0x00589 +1,
    0x0061f, 0x0061f +1,
    0x006d4, 0x006d4 +1,
    0x00700, 0x00702 +1,
    0x007f9, 0x007f9 +1,
    0x00964, 0x00965 +1,
    0x0104a, 0x0104b +1,
    0x01362, 0x01362 +1,
    0x01367, 0x01368 +1,
    0x0166e, 0x0166e +1,
    0x01735, 0x01736 +1,
    0x01803, 0x01803 +1,
    0x01809, 0x01809 +1,
    0x01944, 0x01945 +1,
    0x01aa8, 0x01aab +1,
    0x01b5a, 0x01b5b +1,
    0x01b5e, 0x01b5f +1,
    0x01c3b, 0x01c3c +1,
    0x01c7e, 0x01c7f +1,
    0x0203c, 0x0203d +1,
    0x02047, 0x02049 +1,
    0x02e2e, 0x02e2e +1,
    0x03002, 0x03002 +1,
    0x0a4ff, 0x0a4ff +1,
    0x0a60e, 0x0a60f +1,
    0x0a6f3, 0x0a6f3 +1,
    0x0a6f7, 0x0a6f7 +1,
    0x0a876, 0x0a877 +1,
    0x0a8ce, 0x0a8cf +1,
    0x0a92f, 0x0a92f +1,
    0x0a9c8, 0x0a9c9 +1,
    0x0aa5d, 0x0aa5f +1,
    0x0abeb, 0x0abeb +1,
    0x0fe52, 0x0fe52 +1,
    0x0fe56, 0x0fe57 +1,
    0x0ff01, 0x0ff01 +1,
    0x0ff0e, 0x0ff0e +1,
    0x0ff1f, 0x0ff1f +1,
    0x0ff61, 0x0ff61 +1,
    0x10a56, 0x10a57 +1,
    0x11047, 0x11048 +1,
    0x110be, 0x110c1 +1,
]);

immutable(Charset) unicodeInTai_Viet = Charset([
    0x0aa80, 0x0aadf +1,
]);

immutable(Charset) unicodeInDeseret = Charset([
    0x10400, 0x1044f +1,
]);

immutable(Charset) unicodeHebrew = Charset([
    0x00591, 0x005c7 +1,
    0x005d0, 0x005ea +1,
    0x005f0, 0x005f4 +1,
    0x0fb1d, 0x0fb36 +1,
    0x0fb38, 0x0fb3c +1,
    0x0fb3e, 0x0fb3e +1,
    0x0fb40, 0x0fb41 +1,
    0x0fb43, 0x0fb44 +1,
    0x0fb46, 0x0fb4f +1,
]);

immutable(Charset) unicodeLisu = Charset([
    0x0a4d0, 0x0a4ff +1,
]);

immutable(Charset) unicodeInSupplementary_Private_Use_Area_A = Charset([
    0xf0000, 0xfffff +1,
]);

immutable(Charset) unicodeInSupplementary_Private_Use_Area_B = Charset([
    0x100000, 0x10ffff +1,
]);

immutable(Charset) unicodeUgaritic = Charset([
    0x10380, 0x1039d +1,
    0x1039f, 0x1039f +1,
]);

immutable(Charset) unicodeInMongolian = Charset([
    0x01800, 0x018af +1,
]);

immutable(Charset) unicodeInBopomofo = Charset([
    0x03100, 0x0312f +1,
]);

immutable(Charset) unicodeOld_Persian = Charset([
    0x103a0, 0x103c3 +1,
    0x103c8, 0x103d5 +1,
]);

immutable(Charset) unicodeInCJK_Compatibility_Ideographs_Supplement = Charset([
    0x2f800, 0x2fa1f +1,
]);

immutable(Charset) unicodeInMahjong_Tiles = Charset([
    0x1f000, 0x1f02f +1,
]);

immutable(Charset) unicodePhoenician = Charset([
    0x10900, 0x1091b +1,
    0x1091f, 0x1091f +1,
]);

immutable(Charset) unicodeEgyptian_Hieroglyphs = Charset([
    0x13000, 0x1342e +1,
]);

immutable(Charset) unicodeInVariation_Selectors_Supplement = Charset([
    0xe0100, 0xe01ef +1,
]);

immutable(Charset) unicodeInLisu = Charset([
    0x0a4d0, 0x0a4ff +1,
]);

immutable(Charset) unicodeInLow_Surrogates = Charset([
    0x0dc00, 0x0dfff +1,
]);

immutable(Charset) unicodeInUgaritic = Charset([
    0x10380, 0x1039f +1,
]);

immutable(Charset) unicodeInAncient_Greek_Musical_Notation = Charset([
    0x1d200, 0x1d24f +1,
]);

immutable(Charset) unicodeInSupplemental_Punctuation = Charset([
    0x02e00, 0x02e7f +1,
]);

immutable(Charset) unicodeInTamil = Charset([
    0x00b80, 0x00bff +1,
]);

immutable(Charset) unicodeBidi_Control = Charset([
    0x0200e, 0x0200f +1,
    0x0202a, 0x0202e +1,
]);

immutable(Charset) unicodeKatakana = Charset([
    0x030a1, 0x030fa +1,
    0x030fd, 0x030ff +1,
    0x031f0, 0x031ff +1,
    0x032d0, 0x032fe +1,
    0x03300, 0x03357 +1,
    0x0ff66, 0x0ff6f +1,
    0x0ff71, 0x0ff9d +1,
    0x1b000, 0x1b000 +1,
]);

immutable(Charset) unicodeInKanbun = Charset([
    0x03190, 0x0319f +1,
]);

immutable(Charset) unicodeInHebrew = Charset([
    0x00590, 0x005ff +1,
]);

immutable(Charset) unicodeTai_Viet = Charset([
    0x0aa80, 0x0aac2 +1,
    0x0aadb, 0x0aadf +1,
]);

immutable(Charset) unicodeShavian = Charset([
    0x10450, 0x1047f +1,
]);

immutable(Charset) unicodeInHanunoo = Charset([
    0x01720, 0x0173f +1,
]);

immutable(Charset) unicodeOther_Lowercase = Charset([
    0x002b0, 0x002b8 +1,
    0x002c0, 0x002c1 +1,
    0x002e0, 0x002e4 +1,
    0x00345, 0x00345 +1,
    0x0037a, 0x0037a +1,
    0x01d2c, 0x01d61 +1,
    0x01d78, 0x01d78 +1,
    0x01d9b, 0x01dbf +1,
    0x02090, 0x02094 +1,
    0x02170, 0x0217f +1,
    0x024d0, 0x024e9 +1,
    0x02c7d, 0x02c7d +1,
    0x0a770, 0x0a770 +1,
]);

immutable(Charset) unicodeDash = Charset([
    0x0002d, 0x0002d +1,
    0x0058a, 0x0058a +1,
    0x005be, 0x005be +1,
    0x01400, 0x01400 +1,
    0x01806, 0x01806 +1,
    0x02010, 0x02015 +1,
    0x02053, 0x02053 +1,
    0x0207b, 0x0207b +1,
    0x0208b, 0x0208b +1,
    0x02212, 0x02212 +1,
    0x02e17, 0x02e17 +1,
    0x02e1a, 0x02e1a +1,
    0x0301c, 0x0301c +1,
    0x03030, 0x03030 +1,
    0x030a0, 0x030a0 +1,
    0x0fe31, 0x0fe32 +1,
    0x0fe58, 0x0fe58 +1,
    0x0fe63, 0x0fe63 +1,
    0x0ff0d, 0x0ff0d +1,
]);

immutable(Charset) unicodeInSinhala = Charset([
    0x00d80, 0x00dff +1,
]);

immutable(Charset) unicodeKaithi = Charset([
    0x11080, 0x110c1 +1,
]);

immutable(Charset) unicodeInSundanese = Charset([
    0x01b80, 0x01bbf +1,
]);

immutable(Charset) unicodeInEthiopic_Extended_A = Charset([
    0x0ab00, 0x0ab2f +1,
]);

immutable(Charset) unicodeInAegean_Numbers = Charset([
    0x10100, 0x1013f +1,
]);

immutable(Charset) unicodeTibetan = Charset([
    0x00f00, 0x00f47 +1,
    0x00f49, 0x00f6c +1,
    0x00f71, 0x00f97 +1,
    0x00f99, 0x00fbc +1,
    0x00fbe, 0x00fcc +1,
    0x00fce, 0x00fd4 +1,
    0x00fd9, 0x00fda +1,
]);

immutable(Charset) unicodeSamaritan = Charset([
    0x00800, 0x0082d +1,
    0x00830, 0x0083e +1,
]);

immutable(Charset) unicodeInOptical_Character_Recognition = Charset([
    0x02440, 0x0245f +1,
]);

immutable(Charset) unicodeInKatakana = Charset([
    0x030a0, 0x030ff +1,
]);

immutable(Charset) unicodeInVariation_Selectors = Charset([
    0x0fe00, 0x0fe0f +1,
]);

immutable(Charset) unicodeOld_Italic = Charset([
    0x10300, 0x1031e +1,
    0x10320, 0x10323 +1,
]);

immutable(Charset) unicodeInEnclosed_CJK_Letters_and_Months = Charset([
    0x03200, 0x032ff +1,
]);

immutable(Charset) unicodeInLatin_1_Supplement = Charset([
    0x00080, 0x000ff +1,
]);

immutable(Charset) unicodeHan = Charset([
    0x02e80, 0x02e99 +1,
    0x02e9b, 0x02ef3 +1,
    0x02f00, 0x02fd5 +1,
    0x03005, 0x03005 +1,
    0x03007, 0x03007 +1,
    0x03021, 0x03029 +1,
    0x03038, 0x0303b +1,
    0x03400, 0x04db5 +1,
    0x04e00, 0x09fcb +1,
    0x0f900, 0x0fa2d +1,
    0x0fa30, 0x0fa6d +1,
    0x0fa70, 0x0fad9 +1,
    0x20000, 0x2a6d6 +1,
    0x2a700, 0x2b734 +1,
    0x2b740, 0x2b81d +1,
    0x2f800, 0x2fa1d +1,
]);

immutable(Charset) unicodeDeseret = Charset([
    0x10400, 0x1044f +1,
]);

immutable(Charset) unicodeInMyanmar = Charset([
    0x01000, 0x0109f +1,
]);

immutable(Charset) unicodeSaurashtra = Charset([
    0x0a880, 0x0a8c4 +1,
    0x0a8ce, 0x0a8d9 +1,
]);

immutable(Charset) unicodeInLinear_B_Syllabary = Charset([
    0x10000, 0x1007f +1,
]);

immutable(Charset) unicodeLm = Charset([
    0x002b0, 0x002c1 +1,
    0x002c6, 0x002d1 +1,
    0x002e0, 0x002e4 +1,
    0x002ec, 0x002ec +1,
    0x002ee, 0x002ee +1,
    0x00374, 0x00374 +1,
    0x0037a, 0x0037a +1,
    0x00559, 0x00559 +1,
    0x00640, 0x00640 +1,
    0x006e5, 0x006e6 +1,
    0x007f4, 0x007f5 +1,
    0x007fa, 0x007fa +1,
    0x0081a, 0x0081a +1,
    0x00824, 0x00824 +1,
    0x00828, 0x00828 +1,
    0x00971, 0x00971 +1,
    0x00e46, 0x00e46 +1,
    0x00ec6, 0x00ec6 +1,
    0x010fc, 0x010fc +1,
    0x017d7, 0x017d7 +1,
    0x01843, 0x01843 +1,
    0x01aa7, 0x01aa7 +1,
    0x01c78, 0x01c7d +1,
    0x01d2c, 0x01d61 +1,
    0x01d78, 0x01d78 +1,
    0x01d9b, 0x01dbf +1,
    0x02071, 0x02071 +1,
    0x0207f, 0x0207f +1,
    0x02090, 0x0209c +1,
    0x02c7d, 0x02c7d +1,
    0x02d6f, 0x02d6f +1,
    0x02e2f, 0x02e2f +1,
    0x03005, 0x03005 +1,
    0x03031, 0x03035 +1,
    0x0303b, 0x0303b +1,
    0x0309d, 0x0309e +1,
    0x030fc, 0x030fe +1,
    0x0a015, 0x0a015 +1,
    0x0a4f8, 0x0a4fd +1,
    0x0a60c, 0x0a60c +1,
    0x0a67f, 0x0a67f +1,
    0x0a717, 0x0a71f +1,
    0x0a770, 0x0a770 +1,
    0x0a788, 0x0a788 +1,
    0x0a9cf, 0x0a9cf +1,
    0x0aa70, 0x0aa70 +1,
    0x0aadd, 0x0aadd +1,
    0x0ff70, 0x0ff70 +1,
    0x0ff9e, 0x0ff9f +1,
]);

immutable(Charset) unicodeInKannada = Charset([
    0x00c80, 0x00cff +1,
]);

immutable(Charset) unicodeInLimbu = Charset([
    0x01900, 0x0194f +1,
]);

immutable(Charset) unicodeInByzantine_Musical_Symbols = Charset([
    0x1d000, 0x1d0ff +1,
]);

immutable(Charset) unicodeMc = Charset([
    0x00903, 0x00903 +1,
    0x0093b, 0x0093b +1,
    0x0093e, 0x00940 +1,
    0x00949, 0x0094c +1,
    0x0094e, 0x0094f +1,
    0x00982, 0x00983 +1,
    0x009be, 0x009c0 +1,
    0x009c7, 0x009c8 +1,
    0x009cb, 0x009cc +1,
    0x009d7, 0x009d7 +1,
    0x00a03, 0x00a03 +1,
    0x00a3e, 0x00a40 +1,
    0x00a83, 0x00a83 +1,
    0x00abe, 0x00ac0 +1,
    0x00ac9, 0x00ac9 +1,
    0x00acb, 0x00acc +1,
    0x00b02, 0x00b03 +1,
    0x00b3e, 0x00b3e +1,
    0x00b40, 0x00b40 +1,
    0x00b47, 0x00b48 +1,
    0x00b4b, 0x00b4c +1,
    0x00b57, 0x00b57 +1,
    0x00bbe, 0x00bbf +1,
    0x00bc1, 0x00bc2 +1,
    0x00bc6, 0x00bc8 +1,
    0x00bca, 0x00bcc +1,
    0x00bd7, 0x00bd7 +1,
    0x00c01, 0x00c03 +1,
    0x00c41, 0x00c44 +1,
    0x00c82, 0x00c83 +1,
    0x00cbe, 0x00cbe +1,
    0x00cc0, 0x00cc4 +1,
    0x00cc7, 0x00cc8 +1,
    0x00cca, 0x00ccb +1,
    0x00cd5, 0x00cd6 +1,
    0x00d02, 0x00d03 +1,
    0x00d3e, 0x00d40 +1,
    0x00d46, 0x00d48 +1,
    0x00d4a, 0x00d4c +1,
    0x00d57, 0x00d57 +1,
    0x00d82, 0x00d83 +1,
    0x00dcf, 0x00dd1 +1,
    0x00dd8, 0x00ddf +1,
    0x00df2, 0x00df3 +1,
    0x00f3e, 0x00f3f +1,
    0x00f7f, 0x00f7f +1,
    0x0102b, 0x0102c +1,
    0x01031, 0x01031 +1,
    0x01038, 0x01038 +1,
    0x0103b, 0x0103c +1,
    0x01056, 0x01057 +1,
    0x01062, 0x01064 +1,
    0x01067, 0x0106d +1,
    0x01083, 0x01084 +1,
    0x01087, 0x0108c +1,
    0x0108f, 0x0108f +1,
    0x0109a, 0x0109c +1,
    0x017b6, 0x017b6 +1,
    0x017be, 0x017c5 +1,
    0x017c7, 0x017c8 +1,
    0x01923, 0x01926 +1,
    0x01929, 0x0192b +1,
    0x01930, 0x01931 +1,
    0x01933, 0x01938 +1,
    0x019b0, 0x019c0 +1,
    0x019c8, 0x019c9 +1,
    0x01a19, 0x01a1b +1,
    0x01a55, 0x01a55 +1,
    0x01a57, 0x01a57 +1,
    0x01a61, 0x01a61 +1,
    0x01a63, 0x01a64 +1,
    0x01a6d, 0x01a72 +1,
    0x01b04, 0x01b04 +1,
    0x01b35, 0x01b35 +1,
    0x01b3b, 0x01b3b +1,
    0x01b3d, 0x01b41 +1,
    0x01b43, 0x01b44 +1,
    0x01b82, 0x01b82 +1,
    0x01ba1, 0x01ba1 +1,
    0x01ba6, 0x01ba7 +1,
    0x01baa, 0x01baa +1,
    0x01be7, 0x01be7 +1,
    0x01bea, 0x01bec +1,
    0x01bee, 0x01bee +1,
    0x01bf2, 0x01bf3 +1,
    0x01c24, 0x01c2b +1,
    0x01c34, 0x01c35 +1,
    0x01ce1, 0x01ce1 +1,
    0x01cf2, 0x01cf2 +1,
    0x0a823, 0x0a824 +1,
    0x0a827, 0x0a827 +1,
    0x0a880, 0x0a881 +1,
    0x0a8b4, 0x0a8c3 +1,
    0x0a952, 0x0a953 +1,
    0x0a983, 0x0a983 +1,
    0x0a9b4, 0x0a9b5 +1,
    0x0a9ba, 0x0a9bb +1,
    0x0a9bd, 0x0a9c0 +1,
    0x0aa2f, 0x0aa30 +1,
    0x0aa33, 0x0aa34 +1,
    0x0aa4d, 0x0aa4d +1,
    0x0aa7b, 0x0aa7b +1,
    0x0abe3, 0x0abe4 +1,
    0x0abe6, 0x0abe7 +1,
    0x0abe9, 0x0abea +1,
    0x0abec, 0x0abec +1,
    0x11000, 0x11000 +1,
    0x11002, 0x11002 +1,
    0x11082, 0x11082 +1,
    0x110b0, 0x110b2 +1,
    0x110b7, 0x110b8 +1,
    0x1d165, 0x1d166 +1,
    0x1d16d, 0x1d172 +1,
]);

immutable(Charset) unicodeLo = Charset([
    0x001bb, 0x001bb +1,
    0x001c0, 0x001c3 +1,
    0x00294, 0x00294 +1,
    0x005d0, 0x005ea +1,
    0x005f0, 0x005f2 +1,
    0x00620, 0x0063f +1,
    0x00641, 0x0064a +1,
    0x0066e, 0x0066f +1,
    0x00671, 0x006d3 +1,
    0x006d5, 0x006d5 +1,
    0x006ee, 0x006ef +1,
    0x006fa, 0x006fc +1,
    0x006ff, 0x006ff +1,
    0x00710, 0x00710 +1,
    0x00712, 0x0072f +1,
    0x0074d, 0x007a5 +1,
    0x007b1, 0x007b1 +1,
    0x007ca, 0x007ea +1,
    0x00800, 0x00815 +1,
    0x00840, 0x00858 +1,
    0x00904, 0x00939 +1,
    0x0093d, 0x0093d +1,
    0x00950, 0x00950 +1,
    0x00958, 0x00961 +1,
    0x00972, 0x00977 +1,
    0x00979, 0x0097f +1,
    0x00985, 0x0098c +1,
    0x0098f, 0x00990 +1,
    0x00993, 0x009a8 +1,
    0x009aa, 0x009b0 +1,
    0x009b2, 0x009b2 +1,
    0x009b6, 0x009b9 +1,
    0x009bd, 0x009bd +1,
    0x009ce, 0x009ce +1,
    0x009dc, 0x009dd +1,
    0x009df, 0x009e1 +1,
    0x009f0, 0x009f1 +1,
    0x00a05, 0x00a0a +1,
    0x00a0f, 0x00a10 +1,
    0x00a13, 0x00a28 +1,
    0x00a2a, 0x00a30 +1,
    0x00a32, 0x00a33 +1,
    0x00a35, 0x00a36 +1,
    0x00a38, 0x00a39 +1,
    0x00a59, 0x00a5c +1,
    0x00a5e, 0x00a5e +1,
    0x00a72, 0x00a74 +1,
    0x00a85, 0x00a8d +1,
    0x00a8f, 0x00a91 +1,
    0x00a93, 0x00aa8 +1,
    0x00aaa, 0x00ab0 +1,
    0x00ab2, 0x00ab3 +1,
    0x00ab5, 0x00ab9 +1,
    0x00abd, 0x00abd +1,
    0x00ad0, 0x00ad0 +1,
    0x00ae0, 0x00ae1 +1,
    0x00b05, 0x00b0c +1,
    0x00b0f, 0x00b10 +1,
    0x00b13, 0x00b28 +1,
    0x00b2a, 0x00b30 +1,
    0x00b32, 0x00b33 +1,
    0x00b35, 0x00b39 +1,
    0x00b3d, 0x00b3d +1,
    0x00b5c, 0x00b5d +1,
    0x00b5f, 0x00b61 +1,
    0x00b71, 0x00b71 +1,
    0x00b83, 0x00b83 +1,
    0x00b85, 0x00b8a +1,
    0x00b8e, 0x00b90 +1,
    0x00b92, 0x00b95 +1,
    0x00b99, 0x00b9a +1,
    0x00b9c, 0x00b9c +1,
    0x00b9e, 0x00b9f +1,
    0x00ba3, 0x00ba4 +1,
    0x00ba8, 0x00baa +1,
    0x00bae, 0x00bb9 +1,
    0x00bd0, 0x00bd0 +1,
    0x00c05, 0x00c0c +1,
    0x00c0e, 0x00c10 +1,
    0x00c12, 0x00c28 +1,
    0x00c2a, 0x00c33 +1,
    0x00c35, 0x00c39 +1,
    0x00c3d, 0x00c3d +1,
    0x00c58, 0x00c59 +1,
    0x00c60, 0x00c61 +1,
    0x00c85, 0x00c8c +1,
    0x00c8e, 0x00c90 +1,
    0x00c92, 0x00ca8 +1,
    0x00caa, 0x00cb3 +1,
    0x00cb5, 0x00cb9 +1,
    0x00cbd, 0x00cbd +1,
    0x00cde, 0x00cde +1,
    0x00ce0, 0x00ce1 +1,
    0x00cf1, 0x00cf2 +1,
    0x00d05, 0x00d0c +1,
    0x00d0e, 0x00d10 +1,
    0x00d12, 0x00d3a +1,
    0x00d3d, 0x00d3d +1,
    0x00d4e, 0x00d4e +1,
    0x00d60, 0x00d61 +1,
    0x00d7a, 0x00d7f +1,
    0x00d85, 0x00d96 +1,
    0x00d9a, 0x00db1 +1,
    0x00db3, 0x00dbb +1,
    0x00dbd, 0x00dbd +1,
    0x00dc0, 0x00dc6 +1,
    0x00e01, 0x00e30 +1,
    0x00e32, 0x00e33 +1,
    0x00e40, 0x00e45 +1,
    0x00e81, 0x00e82 +1,
    0x00e84, 0x00e84 +1,
    0x00e87, 0x00e88 +1,
    0x00e8a, 0x00e8a +1,
    0x00e8d, 0x00e8d +1,
    0x00e94, 0x00e97 +1,
    0x00e99, 0x00e9f +1,
    0x00ea1, 0x00ea3 +1,
    0x00ea5, 0x00ea5 +1,
    0x00ea7, 0x00ea7 +1,
    0x00eaa, 0x00eab +1,
    0x00ead, 0x00eb0 +1,
    0x00eb2, 0x00eb3 +1,
    0x00ebd, 0x00ebd +1,
    0x00ec0, 0x00ec4 +1,
    0x00edc, 0x00edd +1,
    0x00f00, 0x00f00 +1,
    0x00f40, 0x00f47 +1,
    0x00f49, 0x00f6c +1,
    0x00f88, 0x00f8c +1,
    0x01000, 0x0102a +1,
    0x0103f, 0x0103f +1,
    0x01050, 0x01055 +1,
    0x0105a, 0x0105d +1,
    0x01061, 0x01061 +1,
    0x01065, 0x01066 +1,
    0x0106e, 0x01070 +1,
    0x01075, 0x01081 +1,
    0x0108e, 0x0108e +1,
    0x010d0, 0x010fa +1,
    0x01100, 0x01248 +1,
    0x0124a, 0x0124d +1,
    0x01250, 0x01256 +1,
    0x01258, 0x01258 +1,
    0x0125a, 0x0125d +1,
    0x01260, 0x01288 +1,
    0x0128a, 0x0128d +1,
    0x01290, 0x012b0 +1,
    0x012b2, 0x012b5 +1,
    0x012b8, 0x012be +1,
    0x012c0, 0x012c0 +1,
    0x012c2, 0x012c5 +1,
    0x012c8, 0x012d6 +1,
    0x012d8, 0x01310 +1,
    0x01312, 0x01315 +1,
    0x01318, 0x0135a +1,
    0x01380, 0x0138f +1,
    0x013a0, 0x013f4 +1,
    0x01401, 0x0166c +1,
    0x0166f, 0x0167f +1,
    0x01681, 0x0169a +1,
    0x016a0, 0x016ea +1,
    0x01700, 0x0170c +1,
    0x0170e, 0x01711 +1,
    0x01720, 0x01731 +1,
    0x01740, 0x01751 +1,
    0x01760, 0x0176c +1,
    0x0176e, 0x01770 +1,
    0x01780, 0x017b3 +1,
    0x017dc, 0x017dc +1,
    0x01820, 0x01842 +1,
    0x01844, 0x01877 +1,
    0x01880, 0x018a8 +1,
    0x018aa, 0x018aa +1,
    0x018b0, 0x018f5 +1,
    0x01900, 0x0191c +1,
    0x01950, 0x0196d +1,
    0x01970, 0x01974 +1,
    0x01980, 0x019ab +1,
    0x019c1, 0x019c7 +1,
    0x01a00, 0x01a16 +1,
    0x01a20, 0x01a54 +1,
    0x01b05, 0x01b33 +1,
    0x01b45, 0x01b4b +1,
    0x01b83, 0x01ba0 +1,
    0x01bae, 0x01baf +1,
    0x01bc0, 0x01be5 +1,
    0x01c00, 0x01c23 +1,
    0x01c4d, 0x01c4f +1,
    0x01c5a, 0x01c77 +1,
    0x01ce9, 0x01cec +1,
    0x01cee, 0x01cf1 +1,
    0x02135, 0x02138 +1,
    0x02d30, 0x02d65 +1,
    0x02d80, 0x02d96 +1,
    0x02da0, 0x02da6 +1,
    0x02da8, 0x02dae +1,
    0x02db0, 0x02db6 +1,
    0x02db8, 0x02dbe +1,
    0x02dc0, 0x02dc6 +1,
    0x02dc8, 0x02dce +1,
    0x02dd0, 0x02dd6 +1,
    0x02dd8, 0x02dde +1,
    0x03006, 0x03006 +1,
    0x0303c, 0x0303c +1,
    0x03041, 0x03096 +1,
    0x0309f, 0x0309f +1,
    0x030a1, 0x030fa +1,
    0x030ff, 0x030ff +1,
    0x03105, 0x0312d +1,
    0x03131, 0x0318e +1,
    0x031a0, 0x031ba +1,
    0x031f0, 0x031ff +1,
    0x03400, 0x04db5 +1,
    0x04e00, 0x09fcb +1,
    0x0a000, 0x0a014 +1,
    0x0a016, 0x0a48c +1,
    0x0a4d0, 0x0a4f7 +1,
    0x0a500, 0x0a60b +1,
    0x0a610, 0x0a61f +1,
    0x0a62a, 0x0a62b +1,
    0x0a66e, 0x0a66e +1,
    0x0a6a0, 0x0a6e5 +1,
    0x0a7fb, 0x0a801 +1,
    0x0a803, 0x0a805 +1,
    0x0a807, 0x0a80a +1,
    0x0a80c, 0x0a822 +1,
    0x0a840, 0x0a873 +1,
    0x0a882, 0x0a8b3 +1,
    0x0a8f2, 0x0a8f7 +1,
    0x0a8fb, 0x0a8fb +1,
    0x0a90a, 0x0a925 +1,
    0x0a930, 0x0a946 +1,
    0x0a960, 0x0a97c +1,
    0x0a984, 0x0a9b2 +1,
    0x0aa00, 0x0aa28 +1,
    0x0aa40, 0x0aa42 +1,
    0x0aa44, 0x0aa4b +1,
    0x0aa60, 0x0aa6f +1,
    0x0aa71, 0x0aa76 +1,
    0x0aa7a, 0x0aa7a +1,
    0x0aa80, 0x0aaaf +1,
    0x0aab1, 0x0aab1 +1,
    0x0aab5, 0x0aab6 +1,
    0x0aab9, 0x0aabd +1,
    0x0aac0, 0x0aac0 +1,
    0x0aac2, 0x0aac2 +1,
    0x0aadb, 0x0aadc +1,
    0x0ab01, 0x0ab06 +1,
    0x0ab09, 0x0ab0e +1,
    0x0ab11, 0x0ab16 +1,
    0x0ab20, 0x0ab26 +1,
    0x0ab28, 0x0ab2e +1,
    0x0abc0, 0x0abe2 +1,
    0x0ac00, 0x0d7a3 +1,
    0x0d7b0, 0x0d7c6 +1,
    0x0d7cb, 0x0d7fb +1,
    0x0f900, 0x0fa2d +1,
    0x0fa30, 0x0fa6d +1,
    0x0fa70, 0x0fad9 +1,
    0x0fb1d, 0x0fb1d +1,
    0x0fb1f, 0x0fb28 +1,
    0x0fb2a, 0x0fb36 +1,
    0x0fb38, 0x0fb3c +1,
    0x0fb3e, 0x0fb3e +1,
    0x0fb40, 0x0fb41 +1,
    0x0fb43, 0x0fb44 +1,
    0x0fb46, 0x0fbb1 +1,
    0x0fbd3, 0x0fd3d +1,
    0x0fd50, 0x0fd8f +1,
    0x0fd92, 0x0fdc7 +1,
    0x0fdf0, 0x0fdfb +1,
    0x0fe70, 0x0fe74 +1,
    0x0fe76, 0x0fefc +1,
    0x0ff66, 0x0ff6f +1,
    0x0ff71, 0x0ff9d +1,
    0x0ffa0, 0x0ffbe +1,
    0x0ffc2, 0x0ffc7 +1,
    0x0ffca, 0x0ffcf +1,
    0x0ffd2, 0x0ffd7 +1,
    0x0ffda, 0x0ffdc +1,
    0x10000, 0x1000b +1,
    0x1000d, 0x10026 +1,
    0x10028, 0x1003a +1,
    0x1003c, 0x1003d +1,
    0x1003f, 0x1004d +1,
    0x10050, 0x1005d +1,
    0x10080, 0x100fa +1,
    0x10280, 0x1029c +1,
    0x102a0, 0x102d0 +1,
    0x10300, 0x1031e +1,
    0x10330, 0x10340 +1,
    0x10342, 0x10349 +1,
    0x10380, 0x1039d +1,
    0x103a0, 0x103c3 +1,
    0x103c8, 0x103cf +1,
    0x10450, 0x1049d +1,
    0x10800, 0x10805 +1,
    0x10808, 0x10808 +1,
    0x1080a, 0x10835 +1,
    0x10837, 0x10838 +1,
    0x1083c, 0x1083c +1,
    0x1083f, 0x10855 +1,
    0x10900, 0x10915 +1,
    0x10920, 0x10939 +1,
    0x10a00, 0x10a00 +1,
    0x10a10, 0x10a13 +1,
    0x10a15, 0x10a17 +1,
    0x10a19, 0x10a33 +1,
    0x10a60, 0x10a7c +1,
    0x10b00, 0x10b35 +1,
    0x10b40, 0x10b55 +1,
    0x10b60, 0x10b72 +1,
    0x10c00, 0x10c48 +1,
    0x11003, 0x11037 +1,
    0x11083, 0x110af +1,
    0x12000, 0x1236e +1,
    0x13000, 0x1342e +1,
    0x16800, 0x16a38 +1,
    0x1b000, 0x1b001 +1,
    0x20000, 0x2a6d6 +1,
    0x2a700, 0x2b734 +1,
    0x2b740, 0x2b81d +1,
    0x2f800, 0x2fa1d +1,
]);

immutable(Charset) unicodeMe = Charset([
    0x00488, 0x00489 +1,
    0x020dd, 0x020e0 +1,
    0x020e2, 0x020e4 +1,
    0x0a670, 0x0a672 +1,
]);

immutable(Charset) unicodeInMeetei_Mayek = Charset([
    0x0abc0, 0x0abff +1,
]);

immutable(Charset) unicodeLt = Charset([
    0x001c5, 0x001c5 +1,
    0x001c8, 0x001c8 +1,
    0x001cb, 0x001cb +1,
    0x001f2, 0x001f2 +1,
    0x01f88, 0x01f8f +1,
    0x01f98, 0x01f9f +1,
    0x01fa8, 0x01faf +1,
    0x01fbc, 0x01fbc +1,
    0x01fcc, 0x01fcc +1,
    0x01ffc, 0x01ffc +1,
]);

immutable(Charset) unicodeInKhmer = Charset([
    0x01780, 0x017ff +1,
]);

immutable(Charset) unicodeInEthiopic_Extended = Charset([
    0x02d80, 0x02ddf +1,
]);

immutable(Charset) unicodeCarian = Charset([
    0x102a0, 0x102d0 +1,
]);

immutable(Charset) unicodeInKaithi = Charset([
    0x11080, 0x110cf +1,
]);

immutable(Charset) unicodeInVedic_Extensions = Charset([
    0x01cd0, 0x01cff +1,
]);

immutable(Charset) unicodeMn = Charset([
    0x00300, 0x0036f +1,
    0x00483, 0x00487 +1,
    0x00591, 0x005bd +1,
    0x005bf, 0x005bf +1,
    0x005c1, 0x005c2 +1,
    0x005c4, 0x005c5 +1,
    0x005c7, 0x005c7 +1,
    0x00610, 0x0061a +1,
    0x0064b, 0x0065f +1,
    0x00670, 0x00670 +1,
    0x006d6, 0x006dc +1,
    0x006df, 0x006e4 +1,
    0x006e7, 0x006e8 +1,
    0x006ea, 0x006ed +1,
    0x00711, 0x00711 +1,
    0x00730, 0x0074a +1,
    0x007a6, 0x007b0 +1,
    0x007eb, 0x007f3 +1,
    0x00816, 0x00819 +1,
    0x0081b, 0x00823 +1,
    0x00825, 0x00827 +1,
    0x00829, 0x0082d +1,
    0x00859, 0x0085b +1,
    0x00900, 0x00902 +1,
    0x0093a, 0x0093a +1,
    0x0093c, 0x0093c +1,
    0x00941, 0x00948 +1,
    0x0094d, 0x0094d +1,
    0x00951, 0x00957 +1,
    0x00962, 0x00963 +1,
    0x00981, 0x00981 +1,
    0x009bc, 0x009bc +1,
    0x009c1, 0x009c4 +1,
    0x009cd, 0x009cd +1,
    0x009e2, 0x009e3 +1,
    0x00a01, 0x00a02 +1,
    0x00a3c, 0x00a3c +1,
    0x00a41, 0x00a42 +1,
    0x00a47, 0x00a48 +1,
    0x00a4b, 0x00a4d +1,
    0x00a51, 0x00a51 +1,
    0x00a70, 0x00a71 +1,
    0x00a75, 0x00a75 +1,
    0x00a81, 0x00a82 +1,
    0x00abc, 0x00abc +1,
    0x00ac1, 0x00ac5 +1,
    0x00ac7, 0x00ac8 +1,
    0x00acd, 0x00acd +1,
    0x00ae2, 0x00ae3 +1,
    0x00b01, 0x00b01 +1,
    0x00b3c, 0x00b3c +1,
    0x00b3f, 0x00b3f +1,
    0x00b41, 0x00b44 +1,
    0x00b4d, 0x00b4d +1,
    0x00b56, 0x00b56 +1,
    0x00b62, 0x00b63 +1,
    0x00b82, 0x00b82 +1,
    0x00bc0, 0x00bc0 +1,
    0x00bcd, 0x00bcd +1,
    0x00c3e, 0x00c40 +1,
    0x00c46, 0x00c48 +1,
    0x00c4a, 0x00c4d +1,
    0x00c55, 0x00c56 +1,
    0x00c62, 0x00c63 +1,
    0x00cbc, 0x00cbc +1,
    0x00cbf, 0x00cbf +1,
    0x00cc6, 0x00cc6 +1,
    0x00ccc, 0x00ccd +1,
    0x00ce2, 0x00ce3 +1,
    0x00d41, 0x00d44 +1,
    0x00d4d, 0x00d4d +1,
    0x00d62, 0x00d63 +1,
    0x00dca, 0x00dca +1,
    0x00dd2, 0x00dd4 +1,
    0x00dd6, 0x00dd6 +1,
    0x00e31, 0x00e31 +1,
    0x00e34, 0x00e3a +1,
    0x00e47, 0x00e4e +1,
    0x00eb1, 0x00eb1 +1,
    0x00eb4, 0x00eb9 +1,
    0x00ebb, 0x00ebc +1,
    0x00ec8, 0x00ecd +1,
    0x00f18, 0x00f19 +1,
    0x00f35, 0x00f35 +1,
    0x00f37, 0x00f37 +1,
    0x00f39, 0x00f39 +1,
    0x00f71, 0x00f7e +1,
    0x00f80, 0x00f84 +1,
    0x00f86, 0x00f87 +1,
    0x00f8d, 0x00f97 +1,
    0x00f99, 0x00fbc +1,
    0x00fc6, 0x00fc6 +1,
    0x0102d, 0x01030 +1,
    0x01032, 0x01037 +1,
    0x01039, 0x0103a +1,
    0x0103d, 0x0103e +1,
    0x01058, 0x01059 +1,
    0x0105e, 0x01060 +1,
    0x01071, 0x01074 +1,
    0x01082, 0x01082 +1,
    0x01085, 0x01086 +1,
    0x0108d, 0x0108d +1,
    0x0109d, 0x0109d +1,
    0x0135d, 0x0135f +1,
    0x01712, 0x01714 +1,
    0x01732, 0x01734 +1,
    0x01752, 0x01753 +1,
    0x01772, 0x01773 +1,
    0x017b7, 0x017bd +1,
    0x017c6, 0x017c6 +1,
    0x017c9, 0x017d3 +1,
    0x017dd, 0x017dd +1,
    0x0180b, 0x0180d +1,
    0x018a9, 0x018a9 +1,
    0x01920, 0x01922 +1,
    0x01927, 0x01928 +1,
    0x01932, 0x01932 +1,
    0x01939, 0x0193b +1,
    0x01a17, 0x01a18 +1,
    0x01a56, 0x01a56 +1,
    0x01a58, 0x01a5e +1,
    0x01a60, 0x01a60 +1,
    0x01a62, 0x01a62 +1,
    0x01a65, 0x01a6c +1,
    0x01a73, 0x01a7c +1,
    0x01a7f, 0x01a7f +1,
    0x01b00, 0x01b03 +1,
    0x01b34, 0x01b34 +1,
    0x01b36, 0x01b3a +1,
    0x01b3c, 0x01b3c +1,
    0x01b42, 0x01b42 +1,
    0x01b6b, 0x01b73 +1,
    0x01b80, 0x01b81 +1,
    0x01ba2, 0x01ba5 +1,
    0x01ba8, 0x01ba9 +1,
    0x01be6, 0x01be6 +1,
    0x01be8, 0x01be9 +1,
    0x01bed, 0x01bed +1,
    0x01bef, 0x01bf1 +1,
    0x01c2c, 0x01c33 +1,
    0x01c36, 0x01c37 +1,
    0x01cd0, 0x01cd2 +1,
    0x01cd4, 0x01ce0 +1,
    0x01ce2, 0x01ce8 +1,
    0x01ced, 0x01ced +1,
    0x01dc0, 0x01de6 +1,
    0x01dfc, 0x01dff +1,
    0x020d0, 0x020dc +1,
    0x020e1, 0x020e1 +1,
    0x020e5, 0x020f0 +1,
    0x02cef, 0x02cf1 +1,
    0x02d7f, 0x02d7f +1,
    0x02de0, 0x02dff +1,
    0x0302a, 0x0302f +1,
    0x03099, 0x0309a +1,
    0x0a66f, 0x0a66f +1,
    0x0a67c, 0x0a67d +1,
    0x0a6f0, 0x0a6f1 +1,
    0x0a802, 0x0a802 +1,
    0x0a806, 0x0a806 +1,
    0x0a80b, 0x0a80b +1,
    0x0a825, 0x0a826 +1,
    0x0a8c4, 0x0a8c4 +1,
    0x0a8e0, 0x0a8f1 +1,
    0x0a926, 0x0a92d +1,
    0x0a947, 0x0a951 +1,
    0x0a980, 0x0a982 +1,
    0x0a9b3, 0x0a9b3 +1,
    0x0a9b6, 0x0a9b9 +1,
    0x0a9bc, 0x0a9bc +1,
    0x0aa29, 0x0aa2e +1,
    0x0aa31, 0x0aa32 +1,
    0x0aa35, 0x0aa36 +1,
    0x0aa43, 0x0aa43 +1,
    0x0aa4c, 0x0aa4c +1,
    0x0aab0, 0x0aab0 +1,
    0x0aab2, 0x0aab4 +1,
    0x0aab7, 0x0aab8 +1,
    0x0aabe, 0x0aabf +1,
    0x0aac1, 0x0aac1 +1,
    0x0abe5, 0x0abe5 +1,
    0x0abe8, 0x0abe8 +1,
    0x0abed, 0x0abed +1,
    0x0fb1e, 0x0fb1e +1,
    0x0fe00, 0x0fe0f +1,
    0x0fe20, 0x0fe26 +1,
    0x101fd, 0x101fd +1,
    0x10a01, 0x10a03 +1,
    0x10a05, 0x10a06 +1,
    0x10a0c, 0x10a0f +1,
    0x10a38, 0x10a3a +1,
    0x10a3f, 0x10a3f +1,
    0x11001, 0x11001 +1,
    0x11038, 0x11046 +1,
    0x11080, 0x11081 +1,
    0x110b3, 0x110b6 +1,
    0x110b9, 0x110ba +1,
    0x1d167, 0x1d169 +1,
    0x1d17b, 0x1d182 +1,
    0x1d185, 0x1d18b +1,
    0x1d1aa, 0x1d1ad +1,
    0x1d242, 0x1d244 +1,
    0xe0100, 0xe01ef +1,
]);

immutable(Charset) unicodeNd = Charset([
    0x00030, 0x00039 +1,
    0x00660, 0x00669 +1,
    0x006f0, 0x006f9 +1,
    0x007c0, 0x007c9 +1,
    0x00966, 0x0096f +1,
    0x009e6, 0x009ef +1,
    0x00a66, 0x00a6f +1,
    0x00ae6, 0x00aef +1,
    0x00b66, 0x00b6f +1,
    0x00be6, 0x00bef +1,
    0x00c66, 0x00c6f +1,
    0x00ce6, 0x00cef +1,
    0x00d66, 0x00d6f +1,
    0x00e50, 0x00e59 +1,
    0x00ed0, 0x00ed9 +1,
    0x00f20, 0x00f29 +1,
    0x01040, 0x01049 +1,
    0x01090, 0x01099 +1,
    0x017e0, 0x017e9 +1,
    0x01810, 0x01819 +1,
    0x01946, 0x0194f +1,
    0x019d0, 0x019d9 +1,
    0x01a80, 0x01a89 +1,
    0x01a90, 0x01a99 +1,
    0x01b50, 0x01b59 +1,
    0x01bb0, 0x01bb9 +1,
    0x01c40, 0x01c49 +1,
    0x01c50, 0x01c59 +1,
    0x0a620, 0x0a629 +1,
    0x0a8d0, 0x0a8d9 +1,
    0x0a900, 0x0a909 +1,
    0x0a9d0, 0x0a9d9 +1,
    0x0aa50, 0x0aa59 +1,
    0x0abf0, 0x0abf9 +1,
    0x0ff10, 0x0ff19 +1,
    0x104a0, 0x104a9 +1,
    0x11066, 0x1106f +1,
    0x1d7ce, 0x1d7ff +1,
]);

immutable(Charset) unicodeBamum = Charset([
    0x0a6a0, 0x0a6f7 +1,
    0x16800, 0x16a38 +1,
]);

immutable(Charset) unicodeJavanese = Charset([
    0x0a980, 0x0a9cd +1,
    0x0a9cf, 0x0a9d9 +1,
    0x0a9de, 0x0a9df +1,
]);

immutable(Charset) unicodeTifinagh = Charset([
    0x02d30, 0x02d65 +1,
    0x02d6f, 0x02d70 +1,
    0x02d7f, 0x02d7f +1,
]);

immutable(Charset) unicodeInHalfwidth_and_Fullwidth_Forms = Charset([
    0x0ff00, 0x0ffef +1,
]);

immutable(Charset) unicodeInDevanagari_Extended = Charset([
    0x0a8e0, 0x0a8ff +1,
]);

immutable(Charset) unicodeInIdeographic_Description_Characters = Charset([
    0x02ff0, 0x02fff +1,
]);

immutable(Charset) unicodeInCuneiform = Charset([
    0x12000, 0x123ff +1,
]);

immutable(Charset) unicodeNl = Charset([
    0x016ee, 0x016f0 +1,
    0x02160, 0x02182 +1,
    0x02185, 0x02188 +1,
    0x03007, 0x03007 +1,
    0x03021, 0x03029 +1,
    0x03038, 0x0303a +1,
    0x0a6e6, 0x0a6ef +1,
    0x10140, 0x10174 +1,
    0x10341, 0x10341 +1,
    0x1034a, 0x1034a +1,
    0x103d1, 0x103d5 +1,
    0x12400, 0x12462 +1,
]);

immutable(Charset) unicodeInHangul_Compatibility_Jamo = Charset([
    0x03130, 0x0318f +1,
]);

immutable(Charset) unicodeNo = Charset([
    0x000b2, 0x000b3 +1,
    0x000b9, 0x000b9 +1,
    0x000bc, 0x000be +1,
    0x009f4, 0x009f9 +1,
    0x00b72, 0x00b77 +1,
    0x00bf0, 0x00bf2 +1,
    0x00c78, 0x00c7e +1,
    0x00d70, 0x00d75 +1,
    0x00f2a, 0x00f33 +1,
    0x01369, 0x0137c +1,
    0x017f0, 0x017f9 +1,
    0x019da, 0x019da +1,
    0x02070, 0x02070 +1,
    0x02074, 0x02079 +1,
    0x02080, 0x02089 +1,
    0x02150, 0x0215f +1,
    0x02189, 0x02189 +1,
    0x02460, 0x0249b +1,
    0x024ea, 0x024ff +1,
    0x02776, 0x02793 +1,
    0x02cfd, 0x02cfd +1,
    0x03192, 0x03195 +1,
    0x03220, 0x03229 +1,
    0x03251, 0x0325f +1,
    0x03280, 0x03289 +1,
    0x032b1, 0x032bf +1,
    0x0a830, 0x0a835 +1,
    0x10107, 0x10133 +1,
    0x10175, 0x10178 +1,
    0x1018a, 0x1018a +1,
    0x10320, 0x10323 +1,
    0x10858, 0x1085f +1,
    0x10916, 0x1091b +1,
    0x10a40, 0x10a47 +1,
    0x10a7d, 0x10a7e +1,
    0x10b58, 0x10b5f +1,
    0x10b78, 0x10b7f +1,
    0x10e60, 0x10e7e +1,
    0x11052, 0x11065 +1,
    0x1d360, 0x1d371 +1,
    0x1f100, 0x1f10a +1,
]);

immutable(Charset) unicodeInOriya = Charset([
    0x00b00, 0x00b7f +1,
]);

immutable(Charset) unicodeLogical_Order_Exception = Charset([
    0x00e40, 0x00e44 +1,
    0x00ec0, 0x00ec4 +1,
    0x0aab5, 0x0aab6 +1,
    0x0aab9, 0x0aab9 +1,
    0x0aabb, 0x0aabc +1,
]);

immutable(Charset) unicodeInscriptional_Parthian = Charset([
    0x10b40, 0x10b55 +1,
    0x10b58, 0x10b5f +1,
]);

immutable(Charset) unicodeSyloti_Nagri = Charset([
    0x0a800, 0x0a82b +1,
]);

immutable(Charset) unicodeInBengali = Charset([
    0x00980, 0x009ff +1,
]);

immutable(Charset) unicodeInTagalog = Charset([
    0x01700, 0x0171f +1,
]);

immutable(Charset) unicodeInMyanmar_Extended_A = Charset([
    0x0aa60, 0x0aa7f +1,
]);

immutable(Charset) unicodeInAvestan = Charset([
    0x10b00, 0x10b3f +1,
]);

immutable(Charset) unicodePc = Charset([
    0x0005f, 0x0005f +1,
    0x0203f, 0x02040 +1,
    0x02054, 0x02054 +1,
    0x0fe33, 0x0fe34 +1,
    0x0fe4d, 0x0fe4f +1,
    0x0ff3f, 0x0ff3f +1,
]);

immutable(Charset) unicodeInCyrillic_Extended_A = Charset([
    0x02de0, 0x02dff +1,
]);

immutable(Charset) unicodePd = Charset([
    0x0002d, 0x0002d +1,
    0x0058a, 0x0058a +1,
    0x005be, 0x005be +1,
    0x01400, 0x01400 +1,
    0x01806, 0x01806 +1,
    0x02010, 0x02015 +1,
    0x02e17, 0x02e17 +1,
    0x02e1a, 0x02e1a +1,
    0x0301c, 0x0301c +1,
    0x03030, 0x03030 +1,
    0x030a0, 0x030a0 +1,
    0x0fe31, 0x0fe32 +1,
    0x0fe58, 0x0fe58 +1,
    0x0fe63, 0x0fe63 +1,
    0x0ff0d, 0x0ff0d +1,
]);

immutable(Charset) unicodeInCyrillic_Extended_B = Charset([
    0x0a640, 0x0a69f +1,
]);

immutable(Charset) unicodeInBasic_Latin = Charset([
    0x00000, 0x0007f +1,
]);

immutable(Charset) unicodePe = Charset([
    0x00029, 0x00029 +1,
    0x0005d, 0x0005d +1,
    0x0007d, 0x0007d +1,
    0x00f3b, 0x00f3b +1,
    0x00f3d, 0x00f3d +1,
    0x0169c, 0x0169c +1,
    0x02046, 0x02046 +1,
    0x0207e, 0x0207e +1,
    0x0208e, 0x0208e +1,
    0x0232a, 0x0232a +1,
    0x02769, 0x02769 +1,
    0x0276b, 0x0276b +1,
    0x0276d, 0x0276d +1,
    0x0276f, 0x0276f +1,
    0x02771, 0x02771 +1,
    0x02773, 0x02773 +1,
    0x02775, 0x02775 +1,
    0x027c6, 0x027c6 +1,
    0x027e7, 0x027e7 +1,
    0x027e9, 0x027e9 +1,
    0x027eb, 0x027eb +1,
    0x027ed, 0x027ed +1,
    0x027ef, 0x027ef +1,
    0x02984, 0x02984 +1,
    0x02986, 0x02986 +1,
    0x02988, 0x02988 +1,
    0x0298a, 0x0298a +1,
    0x0298c, 0x0298c +1,
    0x0298e, 0x0298e +1,
    0x02990, 0x02990 +1,
    0x02992, 0x02992 +1,
    0x02994, 0x02994 +1,
    0x02996, 0x02996 +1,
    0x02998, 0x02998 +1,
    0x029d9, 0x029d9 +1,
    0x029db, 0x029db +1,
    0x029fd, 0x029fd +1,
    0x02e23, 0x02e23 +1,
    0x02e25, 0x02e25 +1,
    0x02e27, 0x02e27 +1,
    0x02e29, 0x02e29 +1,
    0x03009, 0x03009 +1,
    0x0300b, 0x0300b +1,
    0x0300d, 0x0300d +1,
    0x0300f, 0x0300f +1,
    0x03011, 0x03011 +1,
    0x03015, 0x03015 +1,
    0x03017, 0x03017 +1,
    0x03019, 0x03019 +1,
    0x0301b, 0x0301b +1,
    0x0301e, 0x0301f +1,
    0x0fd3f, 0x0fd3f +1,
    0x0fe18, 0x0fe18 +1,
    0x0fe36, 0x0fe36 +1,
    0x0fe38, 0x0fe38 +1,
    0x0fe3a, 0x0fe3a +1,
    0x0fe3c, 0x0fe3c +1,
    0x0fe3e, 0x0fe3e +1,
    0x0fe40, 0x0fe40 +1,
    0x0fe42, 0x0fe42 +1,
    0x0fe44, 0x0fe44 +1,
    0x0fe48, 0x0fe48 +1,
    0x0fe5a, 0x0fe5a +1,
    0x0fe5c, 0x0fe5c +1,
    0x0fe5e, 0x0fe5e +1,
    0x0ff09, 0x0ff09 +1,
    0x0ff3d, 0x0ff3d +1,
    0x0ff5d, 0x0ff5d +1,
    0x0ff60, 0x0ff60 +1,
    0x0ff63, 0x0ff63 +1,
]);

immutable(Charset) unicodeHanunoo = Charset([
    0x01720, 0x01734 +1,
]);

immutable(Charset) unicodePf = Charset([
    0x000bb, 0x000bb +1,
    0x02019, 0x02019 +1,
    0x0201d, 0x0201d +1,
    0x0203a, 0x0203a +1,
    0x02e03, 0x02e03 +1,
    0x02e05, 0x02e05 +1,
    0x02e0a, 0x02e0a +1,
    0x02e0d, 0x02e0d +1,
    0x02e1d, 0x02e1d +1,
    0x02e21, 0x02e21 +1,
]);

immutable(Charset) unicodePi = Charset([
    0x000ab, 0x000ab +1,
    0x02018, 0x02018 +1,
    0x0201b, 0x0201c +1,
    0x0201f, 0x0201f +1,
    0x02039, 0x02039 +1,
    0x02e02, 0x02e02 +1,
    0x02e04, 0x02e04 +1,
    0x02e09, 0x02e09 +1,
    0x02e0c, 0x02e0c +1,
    0x02e1c, 0x02e1c +1,
    0x02e20, 0x02e20 +1,
]);

immutable(Charset) unicodeSinhala = Charset([
    0x00d82, 0x00d83 +1,
    0x00d85, 0x00d96 +1,
    0x00d9a, 0x00db1 +1,
    0x00db3, 0x00dbb +1,
    0x00dbd, 0x00dbd +1,
    0x00dc0, 0x00dc6 +1,
    0x00dca, 0x00dca +1,
    0x00dcf, 0x00dd4 +1,
    0x00dd6, 0x00dd6 +1,
    0x00dd8, 0x00ddf +1,
    0x00df2, 0x00df4 +1,
]);

immutable(Charset) unicodeInJavanese = Charset([
    0x0a980, 0x0a9df +1,
]);

immutable(Charset) unicodeInCarian = Charset([
    0x102a0, 0x102df +1,
]);

immutable(Charset) unicodeInDomino_Tiles = Charset([
    0x1f030, 0x1f09f +1,
]);

immutable(Charset) unicodeInTifinagh = Charset([
    0x02d30, 0x02d7f +1,
]);

immutable(Charset) unicodeLycian = Charset([
    0x10280, 0x1029c +1,
]);

immutable(Charset) unicodeInGeometric_Shapes = Charset([
    0x025a0, 0x025ff +1,
]);

immutable(Charset) unicodeInArabic_Presentation_Forms_A = Charset([
    0x0fb50, 0x0fdff +1,
]);

immutable(Charset) unicodeInArabic_Presentation_Forms_B = Charset([
    0x0fe70, 0x0feff +1,
]);

immutable(Charset) unicodePo = Charset([
    0x00021, 0x00023 +1,
    0x00025, 0x00027 +1,
    0x0002a, 0x0002a +1,
    0x0002c, 0x0002c +1,
    0x0002e, 0x0002f +1,
    0x0003a, 0x0003b +1,
    0x0003f, 0x00040 +1,
    0x0005c, 0x0005c +1,
    0x000a1, 0x000a1 +1,
    0x000b7, 0x000b7 +1,
    0x000bf, 0x000bf +1,
    0x0037e, 0x0037e +1,
    0x00387, 0x00387 +1,
    0x0055a, 0x0055f +1,
    0x00589, 0x00589 +1,
    0x005c0, 0x005c0 +1,
    0x005c3, 0x005c3 +1,
    0x005c6, 0x005c6 +1,
    0x005f3, 0x005f4 +1,
    0x00609, 0x0060a +1,
    0x0060c, 0x0060d +1,
    0x0061b, 0x0061b +1,
    0x0061e, 0x0061f +1,
    0x0066a, 0x0066d +1,
    0x006d4, 0x006d4 +1,
    0x00700, 0x0070d +1,
    0x007f7, 0x007f9 +1,
    0x00830, 0x0083e +1,
    0x0085e, 0x0085e +1,
    0x00964, 0x00965 +1,
    0x00970, 0x00970 +1,
    0x00df4, 0x00df4 +1,
    0x00e4f, 0x00e4f +1,
    0x00e5a, 0x00e5b +1,
    0x00f04, 0x00f12 +1,
    0x00f85, 0x00f85 +1,
    0x00fd0, 0x00fd4 +1,
    0x00fd9, 0x00fda +1,
    0x0104a, 0x0104f +1,
    0x010fb, 0x010fb +1,
    0x01361, 0x01368 +1,
    0x0166d, 0x0166e +1,
    0x016eb, 0x016ed +1,
    0x01735, 0x01736 +1,
    0x017d4, 0x017d6 +1,
    0x017d8, 0x017da +1,
    0x01800, 0x01805 +1,
    0x01807, 0x0180a +1,
    0x01944, 0x01945 +1,
    0x01a1e, 0x01a1f +1,
    0x01aa0, 0x01aa6 +1,
    0x01aa8, 0x01aad +1,
    0x01b5a, 0x01b60 +1,
    0x01bfc, 0x01bff +1,
    0x01c3b, 0x01c3f +1,
    0x01c7e, 0x01c7f +1,
    0x01cd3, 0x01cd3 +1,
    0x02016, 0x02017 +1,
    0x02020, 0x02027 +1,
    0x02030, 0x02038 +1,
    0x0203b, 0x0203e +1,
    0x02041, 0x02043 +1,
    0x02047, 0x02051 +1,
    0x02053, 0x02053 +1,
    0x02055, 0x0205e +1,
    0x02cf9, 0x02cfc +1,
    0x02cfe, 0x02cff +1,
    0x02d70, 0x02d70 +1,
    0x02e00, 0x02e01 +1,
    0x02e06, 0x02e08 +1,
    0x02e0b, 0x02e0b +1,
    0x02e0e, 0x02e16 +1,
    0x02e18, 0x02e19 +1,
    0x02e1b, 0x02e1b +1,
    0x02e1e, 0x02e1f +1,
    0x02e2a, 0x02e2e +1,
    0x02e30, 0x02e31 +1,
    0x03001, 0x03003 +1,
    0x0303d, 0x0303d +1,
    0x030fb, 0x030fb +1,
    0x0a4fe, 0x0a4ff +1,
    0x0a60d, 0x0a60f +1,
    0x0a673, 0x0a673 +1,
    0x0a67e, 0x0a67e +1,
    0x0a6f2, 0x0a6f7 +1,
    0x0a874, 0x0a877 +1,
    0x0a8ce, 0x0a8cf +1,
    0x0a8f8, 0x0a8fa +1,
    0x0a92e, 0x0a92f +1,
    0x0a95f, 0x0a95f +1,
    0x0a9c1, 0x0a9cd +1,
    0x0a9de, 0x0a9df +1,
    0x0aa5c, 0x0aa5f +1,
    0x0aade, 0x0aadf +1,
    0x0abeb, 0x0abeb +1,
    0x0fe10, 0x0fe16 +1,
    0x0fe19, 0x0fe19 +1,
    0x0fe30, 0x0fe30 +1,
    0x0fe45, 0x0fe46 +1,
    0x0fe49, 0x0fe4c +1,
    0x0fe50, 0x0fe52 +1,
    0x0fe54, 0x0fe57 +1,
    0x0fe5f, 0x0fe61 +1,
    0x0fe68, 0x0fe68 +1,
    0x0fe6a, 0x0fe6b +1,
    0x0ff01, 0x0ff03 +1,
    0x0ff05, 0x0ff07 +1,
    0x0ff0a, 0x0ff0a +1,
    0x0ff0c, 0x0ff0c +1,
    0x0ff0e, 0x0ff0f +1,
    0x0ff1a, 0x0ff1b +1,
    0x0ff1f, 0x0ff20 +1,
    0x0ff3c, 0x0ff3c +1,
    0x0ff61, 0x0ff61 +1,
    0x0ff64, 0x0ff65 +1,
    0x10100, 0x10101 +1,
    0x1039f, 0x1039f +1,
    0x103d0, 0x103d0 +1,
    0x10857, 0x10857 +1,
    0x1091f, 0x1091f +1,
    0x1093f, 0x1093f +1,
    0x10a50, 0x10a58 +1,
    0x10a7f, 0x10a7f +1,
    0x10b39, 0x10b3f +1,
    0x11047, 0x1104d +1,
    0x110bb, 0x110bc +1,
    0x110be, 0x110c1 +1,
    0x12470, 0x12473 +1,
]);

immutable(Charset) unicodeTerminal_Punctuation = Charset([
    0x00021, 0x00021 +1,
    0x0002c, 0x0002c +1,
    0x0002e, 0x0002e +1,
    0x0003a, 0x0003b +1,
    0x0003f, 0x0003f +1,
    0x0037e, 0x0037e +1,
    0x00387, 0x00387 +1,
    0x00589, 0x00589 +1,
    0x005c3, 0x005c3 +1,
    0x0060c, 0x0060c +1,
    0x0061b, 0x0061b +1,
    0x0061f, 0x0061f +1,
    0x006d4, 0x006d4 +1,
    0x00700, 0x0070a +1,
    0x0070c, 0x0070c +1,
    0x007f8, 0x007f9 +1,
    0x00830, 0x0083e +1,
    0x0085e, 0x0085e +1,
    0x00964, 0x00965 +1,
    0x00e5a, 0x00e5b +1,
    0x00f08, 0x00f08 +1,
    0x00f0d, 0x00f12 +1,
    0x0104a, 0x0104b +1,
    0x01361, 0x01368 +1,
    0x0166d, 0x0166e +1,
    0x016eb, 0x016ed +1,
    0x017d4, 0x017d6 +1,
    0x017da, 0x017da +1,
    0x01802, 0x01805 +1,
    0x01808, 0x01809 +1,
    0x01944, 0x01945 +1,
    0x01aa8, 0x01aab +1,
    0x01b5a, 0x01b5b +1,
    0x01b5d, 0x01b5f +1,
    0x01c3b, 0x01c3f +1,
    0x01c7e, 0x01c7f +1,
    0x0203c, 0x0203d +1,
    0x02047, 0x02049 +1,
    0x02e2e, 0x02e2e +1,
    0x03001, 0x03002 +1,
    0x0a4fe, 0x0a4ff +1,
    0x0a60d, 0x0a60f +1,
    0x0a6f3, 0x0a6f7 +1,
    0x0a876, 0x0a877 +1,
    0x0a8ce, 0x0a8cf +1,
    0x0a92f, 0x0a92f +1,
    0x0a9c7, 0x0a9c9 +1,
    0x0aa5d, 0x0aa5f +1,
    0x0aadf, 0x0aadf +1,
    0x0abeb, 0x0abeb +1,
    0x0fe50, 0x0fe52 +1,
    0x0fe54, 0x0fe57 +1,
    0x0ff01, 0x0ff01 +1,
    0x0ff0c, 0x0ff0c +1,
    0x0ff0e, 0x0ff0e +1,
    0x0ff1a, 0x0ff1b +1,
    0x0ff1f, 0x0ff1f +1,
    0x0ff61, 0x0ff61 +1,
    0x0ff64, 0x0ff64 +1,
    0x1039f, 0x1039f +1,
    0x103d0, 0x103d0 +1,
    0x10857, 0x10857 +1,
    0x1091f, 0x1091f +1,
    0x10b3a, 0x10b3f +1,
    0x11047, 0x1104d +1,
    0x110be, 0x110c1 +1,
    0x12470, 0x12473 +1,
]);

immutable(Charset) unicodePs = Charset([
    0x00028, 0x00028 +1,
    0x0005b, 0x0005b +1,
    0x0007b, 0x0007b +1,
    0x00f3a, 0x00f3a +1,
    0x00f3c, 0x00f3c +1,
    0x0169b, 0x0169b +1,
    0x0201a, 0x0201a +1,
    0x0201e, 0x0201e +1,
    0x02045, 0x02045 +1,
    0x0207d, 0x0207d +1,
    0x0208d, 0x0208d +1,
    0x02329, 0x02329 +1,
    0x02768, 0x02768 +1,
    0x0276a, 0x0276a +1,
    0x0276c, 0x0276c +1,
    0x0276e, 0x0276e +1,
    0x02770, 0x02770 +1,
    0x02772, 0x02772 +1,
    0x02774, 0x02774 +1,
    0x027c5, 0x027c5 +1,
    0x027e6, 0x027e6 +1,
    0x027e8, 0x027e8 +1,
    0x027ea, 0x027ea +1,
    0x027ec, 0x027ec +1,
    0x027ee, 0x027ee +1,
    0x02983, 0x02983 +1,
    0x02985, 0x02985 +1,
    0x02987, 0x02987 +1,
    0x02989, 0x02989 +1,
    0x0298b, 0x0298b +1,
    0x0298d, 0x0298d +1,
    0x0298f, 0x0298f +1,
    0x02991, 0x02991 +1,
    0x02993, 0x02993 +1,
    0x02995, 0x02995 +1,
    0x02997, 0x02997 +1,
    0x029d8, 0x029d8 +1,
    0x029da, 0x029da +1,
    0x029fc, 0x029fc +1,
    0x02e22, 0x02e22 +1,
    0x02e24, 0x02e24 +1,
    0x02e26, 0x02e26 +1,
    0x02e28, 0x02e28 +1,
    0x03008, 0x03008 +1,
    0x0300a, 0x0300a +1,
    0x0300c, 0x0300c +1,
    0x0300e, 0x0300e +1,
    0x03010, 0x03010 +1,
    0x03014, 0x03014 +1,
    0x03016, 0x03016 +1,
    0x03018, 0x03018 +1,
    0x0301a, 0x0301a +1,
    0x0301d, 0x0301d +1,
    0x0fd3e, 0x0fd3e +1,
    0x0fe17, 0x0fe17 +1,
    0x0fe35, 0x0fe35 +1,
    0x0fe37, 0x0fe37 +1,
    0x0fe39, 0x0fe39 +1,
    0x0fe3b, 0x0fe3b +1,
    0x0fe3d, 0x0fe3d +1,
    0x0fe3f, 0x0fe3f +1,
    0x0fe41, 0x0fe41 +1,
    0x0fe43, 0x0fe43 +1,
    0x0fe47, 0x0fe47 +1,
    0x0fe59, 0x0fe59 +1,
    0x0fe5b, 0x0fe5b +1,
    0x0fe5d, 0x0fe5d +1,
    0x0ff08, 0x0ff08 +1,
    0x0ff3b, 0x0ff3b +1,
    0x0ff5b, 0x0ff5b +1,
    0x0ff5f, 0x0ff5f +1,
    0x0ff62, 0x0ff62 +1,
]);

immutable(Charset) unicodeInSpacing_Modifier_Letters = Charset([
    0x002b0, 0x002ff +1,
]);

immutable(Charset) unicodeOther_Alphabetic = Charset([
    0x00345, 0x00345 +1,
    0x005b0, 0x005bd +1,
    0x005bf, 0x005bf +1,
    0x005c1, 0x005c2 +1,
    0x005c4, 0x005c5 +1,
    0x005c7, 0x005c7 +1,
    0x00610, 0x0061a +1,
    0x0064b, 0x00657 +1,
    0x00659, 0x0065f +1,
    0x00670, 0x00670 +1,
    0x006d6, 0x006dc +1,
    0x006e1, 0x006e4 +1,
    0x006e7, 0x006e8 +1,
    0x006ed, 0x006ed +1,
    0x00711, 0x00711 +1,
    0x00730, 0x0073f +1,
    0x007a6, 0x007b0 +1,
    0x00816, 0x00817 +1,
    0x0081b, 0x00823 +1,
    0x00825, 0x00827 +1,
    0x00829, 0x0082c +1,
    0x00900, 0x00903 +1,
    0x0093a, 0x0093b +1,
    0x0093e, 0x0094c +1,
    0x0094e, 0x0094f +1,
    0x00955, 0x00957 +1,
    0x00962, 0x00963 +1,
    0x00981, 0x00983 +1,
    0x009be, 0x009c4 +1,
    0x009c7, 0x009c8 +1,
    0x009cb, 0x009cc +1,
    0x009d7, 0x009d7 +1,
    0x009e2, 0x009e3 +1,
    0x00a01, 0x00a03 +1,
    0x00a3e, 0x00a42 +1,
    0x00a47, 0x00a48 +1,
    0x00a4b, 0x00a4c +1,
    0x00a51, 0x00a51 +1,
    0x00a70, 0x00a71 +1,
    0x00a75, 0x00a75 +1,
    0x00a81, 0x00a83 +1,
    0x00abe, 0x00ac5 +1,
    0x00ac7, 0x00ac9 +1,
    0x00acb, 0x00acc +1,
    0x00ae2, 0x00ae3 +1,
    0x00b01, 0x00b03 +1,
    0x00b3e, 0x00b44 +1,
    0x00b47, 0x00b48 +1,
    0x00b4b, 0x00b4c +1,
    0x00b56, 0x00b57 +1,
    0x00b62, 0x00b63 +1,
    0x00b82, 0x00b82 +1,
    0x00bbe, 0x00bc2 +1,
    0x00bc6, 0x00bc8 +1,
    0x00bca, 0x00bcc +1,
    0x00bd7, 0x00bd7 +1,
    0x00c01, 0x00c03 +1,
    0x00c3e, 0x00c44 +1,
    0x00c46, 0x00c48 +1,
    0x00c4a, 0x00c4c +1,
    0x00c55, 0x00c56 +1,
    0x00c62, 0x00c63 +1,
    0x00c82, 0x00c83 +1,
    0x00cbe, 0x00cc4 +1,
    0x00cc6, 0x00cc8 +1,
    0x00cca, 0x00ccc +1,
    0x00cd5, 0x00cd6 +1,
    0x00ce2, 0x00ce3 +1,
    0x00d02, 0x00d03 +1,
    0x00d3e, 0x00d44 +1,
    0x00d46, 0x00d48 +1,
    0x00d4a, 0x00d4c +1,
    0x00d57, 0x00d57 +1,
    0x00d62, 0x00d63 +1,
    0x00d82, 0x00d83 +1,
    0x00dcf, 0x00dd4 +1,
    0x00dd6, 0x00dd6 +1,
    0x00dd8, 0x00ddf +1,
    0x00df2, 0x00df3 +1,
    0x00e31, 0x00e31 +1,
    0x00e34, 0x00e3a +1,
    0x00e4d, 0x00e4d +1,
    0x00eb1, 0x00eb1 +1,
    0x00eb4, 0x00eb9 +1,
    0x00ebb, 0x00ebc +1,
    0x00ecd, 0x00ecd +1,
    0x00f71, 0x00f81 +1,
    0x00f8d, 0x00f97 +1,
    0x00f99, 0x00fbc +1,
    0x0102b, 0x01036 +1,
    0x01038, 0x01038 +1,
    0x0103b, 0x0103e +1,
    0x01056, 0x01059 +1,
    0x0105e, 0x01060 +1,
    0x01062, 0x01062 +1,
    0x01067, 0x01068 +1,
    0x01071, 0x01074 +1,
    0x01082, 0x01086 +1,
    0x0109c, 0x0109d +1,
    0x0135f, 0x0135f +1,
    0x01712, 0x01713 +1,
    0x01732, 0x01733 +1,
    0x01752, 0x01753 +1,
    0x01772, 0x01773 +1,
    0x017b6, 0x017c8 +1,
    0x018a9, 0x018a9 +1,
    0x01920, 0x0192b +1,
    0x01930, 0x01938 +1,
    0x019b0, 0x019c0 +1,
    0x019c8, 0x019c9 +1,
    0x01a17, 0x01a1b +1,
    0x01a55, 0x01a5e +1,
    0x01a61, 0x01a74 +1,
    0x01b00, 0x01b04 +1,
    0x01b35, 0x01b43 +1,
    0x01b80, 0x01b82 +1,
    0x01ba1, 0x01ba9 +1,
    0x01be7, 0x01bf1 +1,
    0x01c24, 0x01c35 +1,
    0x01cf2, 0x01cf2 +1,
    0x024b6, 0x024e9 +1,
    0x02de0, 0x02dff +1,
    0x0a823, 0x0a827 +1,
    0x0a880, 0x0a881 +1,
    0x0a8b4, 0x0a8c3 +1,
    0x0a926, 0x0a92a +1,
    0x0a947, 0x0a952 +1,
    0x0a980, 0x0a983 +1,
    0x0a9b4, 0x0a9bf +1,
    0x0aa29, 0x0aa36 +1,
    0x0aa43, 0x0aa43 +1,
    0x0aa4c, 0x0aa4d +1,
    0x0aab0, 0x0aab0 +1,
    0x0aab2, 0x0aab4 +1,
    0x0aab7, 0x0aab8 +1,
    0x0aabe, 0x0aabe +1,
    0x0abe3, 0x0abea +1,
    0x0fb1e, 0x0fb1e +1,
    0x10a01, 0x10a03 +1,
    0x10a05, 0x10a06 +1,
    0x10a0c, 0x10a0f +1,
    0x11000, 0x11002 +1,
    0x11038, 0x11045 +1,
    0x11082, 0x11082 +1,
    0x110b0, 0x110b8 +1,
]);

immutable(Charset) unicodeLepcha = Charset([
    0x01c00, 0x01c37 +1,
    0x01c3b, 0x01c49 +1,
    0x01c4d, 0x01c4f +1,
]);

immutable(Charset) unicodeKayah_Li = Charset([
    0x0a900, 0x0a92f +1,
]);

immutable(Charset) unicodeInCounting_Rod_Numerals = Charset([
    0x1d360, 0x1d37f +1,
]);

immutable(Charset) unicodeNko = Charset([
    0x007c0, 0x007fa +1,
]);

immutable(Charset) unicodeInOld_Turkic = Charset([
    0x10c00, 0x10c4f +1,
]);

immutable(Charset) unicodeInMiscellaneous_Symbols_And_Pictographs = Charset([
    0x1f300, 0x1f5ff +1,
]);

immutable(Charset) unicodeInLao = Charset([
    0x00e80, 0x00eff +1,
]);

immutable(Charset) unicodeInNKo = Charset([
    0x007c0, 0x007ff +1,
]);

immutable(Charset) unicodeInGreek_and_Coptic = Charset([
    0x00370, 0x003ff +1,
]);

immutable(Charset) unicodePhags_Pa = Charset([
    0x0a840, 0x0a877 +1,
]);

immutable(Charset) unicodeCypriot = Charset([
    0x10800, 0x10805 +1,
    0x10808, 0x10808 +1,
    0x1080a, 0x10835 +1,
    0x10837, 0x10838 +1,
    0x1083c, 0x1083c +1,
    0x1083f, 0x1083f +1,
]);

immutable(Charset) unicodeInModifier_Tone_Letters = Charset([
    0x0a700, 0x0a71f +1,
]);

immutable(Charset) unicodeTamil = Charset([
    0x00b82, 0x00b83 +1,
    0x00b85, 0x00b8a +1,
    0x00b8e, 0x00b90 +1,
    0x00b92, 0x00b95 +1,
    0x00b99, 0x00b9a +1,
    0x00b9c, 0x00b9c +1,
    0x00b9e, 0x00b9f +1,
    0x00ba3, 0x00ba4 +1,
    0x00ba8, 0x00baa +1,
    0x00bae, 0x00bb9 +1,
    0x00bbe, 0x00bc2 +1,
    0x00bc6, 0x00bc8 +1,
    0x00bca, 0x00bcd +1,
    0x00bd0, 0x00bd0 +1,
    0x00bd7, 0x00bd7 +1,
    0x00be6, 0x00bfa +1,
]);

immutable(Charset) unicodeMyanmar = Charset([
    0x01000, 0x0109f +1,
    0x0aa60, 0x0aa7b +1,
]);

immutable(Charset) unicodeSc = Charset([
    0x00024, 0x00024 +1,
    0x000a2, 0x000a5 +1,
    0x0060b, 0x0060b +1,
    0x009f2, 0x009f3 +1,
    0x009fb, 0x009fb +1,
    0x00af1, 0x00af1 +1,
    0x00bf9, 0x00bf9 +1,
    0x00e3f, 0x00e3f +1,
    0x017db, 0x017db +1,
    0x020a0, 0x020b9 +1,
    0x0a838, 0x0a838 +1,
    0x0fdfc, 0x0fdfc +1,
    0x0fe69, 0x0fe69 +1,
    0x0ff04, 0x0ff04 +1,
    0x0ffe0, 0x0ffe1 +1,
    0x0ffe5, 0x0ffe6 +1,
]);

immutable(Charset) unicodeInPrivate_Use_Area = Charset([
    0x0e000, 0x0f8ff +1,
]);

immutable(Charset) unicodeKannada = Charset([
    0x00c82, 0x00c83 +1,
    0x00c85, 0x00c8c +1,
    0x00c8e, 0x00c90 +1,
    0x00c92, 0x00ca8 +1,
    0x00caa, 0x00cb3 +1,
    0x00cb5, 0x00cb9 +1,
    0x00cbc, 0x00cc4 +1,
    0x00cc6, 0x00cc8 +1,
    0x00cca, 0x00ccd +1,
    0x00cd5, 0x00cd6 +1,
    0x00cde, 0x00cde +1,
    0x00ce0, 0x00ce3 +1,
    0x00ce6, 0x00cef +1,
    0x00cf1, 0x00cf2 +1,
]);

immutable(Charset) unicodeInPhonetic_Extensions = Charset([
    0x01d00, 0x01d7f +1,
]);

immutable(Charset) unicodeInEgyptian_Hieroglyphs = Charset([
    0x13000, 0x1342f +1,
]);

immutable(Charset) unicodeTelugu = Charset([
    0x00c01, 0x00c03 +1,
    0x00c05, 0x00c0c +1,
    0x00c0e, 0x00c10 +1,
    0x00c12, 0x00c28 +1,
    0x00c2a, 0x00c33 +1,
    0x00c35, 0x00c39 +1,
    0x00c3d, 0x00c44 +1,
    0x00c46, 0x00c48 +1,
    0x00c4a, 0x00c4d +1,
    0x00c55, 0x00c56 +1,
    0x00c58, 0x00c59 +1,
    0x00c60, 0x00c63 +1,
    0x00c66, 0x00c6f +1,
    0x00c78, 0x00c7f +1,
]);

immutable(Charset) unicodeInCombining_Diacritical_Marks = Charset([
    0x00300, 0x0036f +1,
]);

immutable(Charset) unicodeCham = Charset([
    0x0aa00, 0x0aa36 +1,
    0x0aa40, 0x0aa4d +1,
    0x0aa50, 0x0aa59 +1,
    0x0aa5c, 0x0aa5f +1,
]);

immutable(Charset) unicodeInArabic_Supplement = Charset([
    0x00750, 0x0077f +1,
]);

immutable(Charset) unicodeSk = Charset([
    0x0005e, 0x0005e +1,
    0x00060, 0x00060 +1,
    0x000a8, 0x000a8 +1,
    0x000af, 0x000af +1,
    0x000b4, 0x000b4 +1,
    0x000b8, 0x000b8 +1,
    0x002c2, 0x002c5 +1,
    0x002d2, 0x002df +1,
    0x002e5, 0x002eb +1,
    0x002ed, 0x002ed +1,
    0x002ef, 0x002ff +1,
    0x00375, 0x00375 +1,
    0x00384, 0x00385 +1,
    0x01fbd, 0x01fbd +1,
    0x01fbf, 0x01fc1 +1,
    0x01fcd, 0x01fcf +1,
    0x01fdd, 0x01fdf +1,
    0x01fed, 0x01fef +1,
    0x01ffd, 0x01ffe +1,
    0x0309b, 0x0309c +1,
    0x0a700, 0x0a716 +1,
    0x0a720, 0x0a721 +1,
    0x0a789, 0x0a78a +1,
    0x0fbb2, 0x0fbc1 +1,
    0x0ff3e, 0x0ff3e +1,
    0x0ff40, 0x0ff40 +1,
    0x0ffe3, 0x0ffe3 +1,
]);

immutable(Charset) unicodeImperial_Aramaic = Charset([
    0x10840, 0x10855 +1,
    0x10857, 0x1085f +1,
]);

immutable(Charset) unicodeSm = Charset([
    0x0002b, 0x0002b +1,
    0x0003c, 0x0003e +1,
    0x0007c, 0x0007c +1,
    0x0007e, 0x0007e +1,
    0x000ac, 0x000ac +1,
    0x000b1, 0x000b1 +1,
    0x000d7, 0x000d7 +1,
    0x000f7, 0x000f7 +1,
    0x003f6, 0x003f6 +1,
    0x00606, 0x00608 +1,
    0x02044, 0x02044 +1,
    0x02052, 0x02052 +1,
    0x0207a, 0x0207c +1,
    0x0208a, 0x0208c +1,
    0x02118, 0x02118 +1,
    0x02140, 0x02144 +1,
    0x0214b, 0x0214b +1,
    0x02190, 0x02194 +1,
    0x0219a, 0x0219b +1,
    0x021a0, 0x021a0 +1,
    0x021a3, 0x021a3 +1,
    0x021a6, 0x021a6 +1,
    0x021ae, 0x021ae +1,
    0x021ce, 0x021cf +1,
    0x021d2, 0x021d2 +1,
    0x021d4, 0x021d4 +1,
    0x021f4, 0x022ff +1,
    0x02308, 0x0230b +1,
    0x02320, 0x02321 +1,
    0x0237c, 0x0237c +1,
    0x0239b, 0x023b3 +1,
    0x023dc, 0x023e1 +1,
    0x025b7, 0x025b7 +1,
    0x025c1, 0x025c1 +1,
    0x025f8, 0x025ff +1,
    0x0266f, 0x0266f +1,
    0x027c0, 0x027c4 +1,
    0x027c7, 0x027ca +1,
    0x027cc, 0x027cc +1,
    0x027ce, 0x027e5 +1,
    0x027f0, 0x027ff +1,
    0x02900, 0x02982 +1,
    0x02999, 0x029d7 +1,
    0x029dc, 0x029fb +1,
    0x029fe, 0x02aff +1,
    0x02b30, 0x02b44 +1,
    0x02b47, 0x02b4c +1,
    0x0fb29, 0x0fb29 +1,
    0x0fe62, 0x0fe62 +1,
    0x0fe64, 0x0fe66 +1,
    0x0ff0b, 0x0ff0b +1,
    0x0ff1c, 0x0ff1e +1,
    0x0ff5c, 0x0ff5c +1,
    0x0ff5e, 0x0ff5e +1,
    0x0ffe2, 0x0ffe2 +1,
    0x0ffe9, 0x0ffec +1,
    0x1d6c1, 0x1d6c1 +1,
    0x1d6db, 0x1d6db +1,
    0x1d6fb, 0x1d6fb +1,
    0x1d715, 0x1d715 +1,
    0x1d735, 0x1d735 +1,
    0x1d74f, 0x1d74f +1,
    0x1d76f, 0x1d76f +1,
    0x1d789, 0x1d789 +1,
    0x1d7a9, 0x1d7a9 +1,
    0x1d7c3, 0x1d7c3 +1,
]);

immutable(Charset) unicodeKharoshthi = Charset([
    0x10a00, 0x10a03 +1,
    0x10a05, 0x10a06 +1,
    0x10a0c, 0x10a13 +1,
    0x10a15, 0x10a17 +1,
    0x10a19, 0x10a33 +1,
    0x10a38, 0x10a3a +1,
    0x10a3f, 0x10a47 +1,
    0x10a50, 0x10a58 +1,
]);

immutable(Charset) unicodeInLycian = Charset([
    0x10280, 0x1029f +1,
]);

immutable(Charset) unicodeInCombining_Half_Marks = Charset([
    0x0fe20, 0x0fe2f +1,
]);

immutable(Charset) unicodeSo = Charset([
    0x000a6, 0x000a7 +1,
    0x000a9, 0x000a9 +1,
    0x000ae, 0x000ae +1,
    0x000b0, 0x000b0 +1,
    0x000b6, 0x000b6 +1,
    0x00482, 0x00482 +1,
    0x0060e, 0x0060f +1,
    0x006de, 0x006de +1,
    0x006e9, 0x006e9 +1,
    0x006fd, 0x006fe +1,
    0x007f6, 0x007f6 +1,
    0x009fa, 0x009fa +1,
    0x00b70, 0x00b70 +1,
    0x00bf3, 0x00bf8 +1,
    0x00bfa, 0x00bfa +1,
    0x00c7f, 0x00c7f +1,
    0x00d79, 0x00d79 +1,
    0x00f01, 0x00f03 +1,
    0x00f13, 0x00f17 +1,
    0x00f1a, 0x00f1f +1,
    0x00f34, 0x00f34 +1,
    0x00f36, 0x00f36 +1,
    0x00f38, 0x00f38 +1,
    0x00fbe, 0x00fc5 +1,
    0x00fc7, 0x00fcc +1,
    0x00fce, 0x00fcf +1,
    0x00fd5, 0x00fd8 +1,
    0x0109e, 0x0109f +1,
    0x01360, 0x01360 +1,
    0x01390, 0x01399 +1,
    0x01940, 0x01940 +1,
    0x019de, 0x019ff +1,
    0x01b61, 0x01b6a +1,
    0x01b74, 0x01b7c +1,
    0x02100, 0x02101 +1,
    0x02103, 0x02106 +1,
    0x02108, 0x02109 +1,
    0x02114, 0x02114 +1,
    0x02116, 0x02117 +1,
    0x0211e, 0x02123 +1,
    0x02125, 0x02125 +1,
    0x02127, 0x02127 +1,
    0x02129, 0x02129 +1,
    0x0212e, 0x0212e +1,
    0x0213a, 0x0213b +1,
    0x0214a, 0x0214a +1,
    0x0214c, 0x0214d +1,
    0x0214f, 0x0214f +1,
    0x02195, 0x02199 +1,
    0x0219c, 0x0219f +1,
    0x021a1, 0x021a2 +1,
    0x021a4, 0x021a5 +1,
    0x021a7, 0x021ad +1,
    0x021af, 0x021cd +1,
    0x021d0, 0x021d1 +1,
    0x021d3, 0x021d3 +1,
    0x021d5, 0x021f3 +1,
    0x02300, 0x02307 +1,
    0x0230c, 0x0231f +1,
    0x02322, 0x02328 +1,
    0x0232b, 0x0237b +1,
    0x0237d, 0x0239a +1,
    0x023b4, 0x023db +1,
    0x023e2, 0x023f3 +1,
    0x02400, 0x02426 +1,
    0x02440, 0x0244a +1,
    0x0249c, 0x024e9 +1,
    0x02500, 0x025b6 +1,
    0x025b8, 0x025c0 +1,
    0x025c2, 0x025f7 +1,
    0x02600, 0x0266e +1,
    0x02670, 0x026ff +1,
    0x02701, 0x02767 +1,
    0x02794, 0x027bf +1,
    0x02800, 0x028ff +1,
    0x02b00, 0x02b2f +1,
    0x02b45, 0x02b46 +1,
    0x02b50, 0x02b59 +1,
    0x02ce5, 0x02cea +1,
    0x02e80, 0x02e99 +1,
    0x02e9b, 0x02ef3 +1,
    0x02f00, 0x02fd5 +1,
    0x02ff0, 0x02ffb +1,
    0x03004, 0x03004 +1,
    0x03012, 0x03013 +1,
    0x03020, 0x03020 +1,
    0x03036, 0x03037 +1,
    0x0303e, 0x0303f +1,
    0x03190, 0x03191 +1,
    0x03196, 0x0319f +1,
    0x031c0, 0x031e3 +1,
    0x03200, 0x0321e +1,
    0x0322a, 0x03250 +1,
    0x03260, 0x0327f +1,
    0x0328a, 0x032b0 +1,
    0x032c0, 0x032fe +1,
    0x03300, 0x033ff +1,
    0x04dc0, 0x04dff +1,
    0x0a490, 0x0a4c6 +1,
    0x0a828, 0x0a82b +1,
    0x0a836, 0x0a837 +1,
    0x0a839, 0x0a839 +1,
    0x0aa77, 0x0aa79 +1,
    0x0fdfd, 0x0fdfd +1,
    0x0ffe4, 0x0ffe4 +1,
    0x0ffe8, 0x0ffe8 +1,
    0x0ffed, 0x0ffee +1,
    0x0fffc, 0x0fffd +1,
    0x10102, 0x10102 +1,
    0x10137, 0x1013f +1,
    0x10179, 0x10189 +1,
    0x10190, 0x1019b +1,
    0x101d0, 0x101fc +1,
    0x1d000, 0x1d0f5 +1,
    0x1d100, 0x1d126 +1,
    0x1d129, 0x1d164 +1,
    0x1d16a, 0x1d16c +1,
    0x1d183, 0x1d184 +1,
    0x1d18c, 0x1d1a9 +1,
    0x1d1ae, 0x1d1dd +1,
    0x1d200, 0x1d241 +1,
    0x1d245, 0x1d245 +1,
    0x1d300, 0x1d356 +1,
    0x1f000, 0x1f02b +1,
    0x1f030, 0x1f093 +1,
    0x1f0a0, 0x1f0ae +1,
    0x1f0b1, 0x1f0be +1,
    0x1f0c1, 0x1f0cf +1,
    0x1f0d1, 0x1f0df +1,
    0x1f110, 0x1f12e +1,
    0x1f130, 0x1f169 +1,
    0x1f170, 0x1f19a +1,
    0x1f1e6, 0x1f202 +1,
    0x1f210, 0x1f23a +1,
    0x1f240, 0x1f248 +1,
    0x1f250, 0x1f251 +1,
    0x1f300, 0x1f320 +1,
    0x1f330, 0x1f335 +1,
    0x1f337, 0x1f37c +1,
    0x1f380, 0x1f393 +1,
    0x1f3a0, 0x1f3c4 +1,
    0x1f3c6, 0x1f3ca +1,
    0x1f3e0, 0x1f3f0 +1,
    0x1f400, 0x1f43e +1,
    0x1f440, 0x1f440 +1,
    0x1f442, 0x1f4f7 +1,
    0x1f4f9, 0x1f4fc +1,
    0x1f500, 0x1f53d +1,
    0x1f550, 0x1f567 +1,
    0x1f5fb, 0x1f5ff +1,
    0x1f601, 0x1f610 +1,
    0x1f612, 0x1f614 +1,
    0x1f616, 0x1f616 +1,
    0x1f618, 0x1f618 +1,
    0x1f61a, 0x1f61a +1,
    0x1f61c, 0x1f61e +1,
    0x1f620, 0x1f625 +1,
    0x1f628, 0x1f62b +1,
    0x1f62d, 0x1f62d +1,
    0x1f630, 0x1f633 +1,
    0x1f635, 0x1f640 +1,
    0x1f645, 0x1f64f +1,
    0x1f680, 0x1f6c5 +1,
    0x1f700, 0x1f773 +1,
]);

immutable(Charset) unicodeInEnclosed_Alphanumeric_Supplement = Charset([
    0x1f100, 0x1f1ff +1,
]);

immutable(Charset) unicodeInTai_Le = Charset([
    0x01950, 0x0197f +1,
]);

immutable(Charset) unicodeInMandaic = Charset([
    0x00840, 0x0085f +1,
]);

immutable(Charset) unicodeInLepcha = Charset([
    0x01c00, 0x01c4f +1,
]);

immutable(Charset) unicodeCanadian_Aboriginal = Charset([
    0x01400, 0x0167f +1,
    0x018b0, 0x018f5 +1,
]);

immutable(Charset) unicodeInGreek_Extended = Charset([
    0x01f00, 0x01fff +1,
]);

immutable(Charset) unicodeInCJK_Unified_Ideographs = Charset([
    0x04e00, 0x09fff +1,
]);

immutable(Charset) unicodeIDS_Trinary_Operator = Charset([
    0x02ff2, 0x02ff3 +1,
]);

immutable(Charset) unicodeInMiscellaneous_Symbols = Charset([
    0x02600, 0x026ff +1,
]);

immutable(Charset) unicodeLao = Charset([
    0x00e81, 0x00e82 +1,
    0x00e84, 0x00e84 +1,
    0x00e87, 0x00e88 +1,
    0x00e8a, 0x00e8a +1,
    0x00e8d, 0x00e8d +1,
    0x00e94, 0x00e97 +1,
    0x00e99, 0x00e9f +1,
    0x00ea1, 0x00ea3 +1,
    0x00ea5, 0x00ea5 +1,
    0x00ea7, 0x00ea7 +1,
    0x00eaa, 0x00eab +1,
    0x00ead, 0x00eb9 +1,
    0x00ebb, 0x00ebd +1,
    0x00ec0, 0x00ec4 +1,
    0x00ec6, 0x00ec6 +1,
    0x00ec8, 0x00ecd +1,
    0x00ed0, 0x00ed9 +1,
    0x00edc, 0x00edd +1,
]);

immutable(Charset) unicodeInLatin_Extended_Additional = Charset([
    0x01e00, 0x01eff +1,
]);

immutable(Charset) unicodeRadical = Charset([
    0x02e80, 0x02e99 +1,
    0x02e9b, 0x02ef3 +1,
    0x02f00, 0x02fd5 +1,
]);

immutable(Charset) unicodeMongolian = Charset([
    0x01800, 0x01801 +1,
    0x01804, 0x01804 +1,
    0x01806, 0x0180e +1,
    0x01810, 0x01819 +1,
    0x01820, 0x01877 +1,
    0x01880, 0x018aa +1,
]);

immutable(Charset) unicodeInVai = Charset([
    0x0a500, 0x0a63f +1,
]);

immutable(Charset) unicodeBengali = Charset([
    0x00981, 0x00983 +1,
    0x00985, 0x0098c +1,
    0x0098f, 0x00990 +1,
    0x00993, 0x009a8 +1,
    0x009aa, 0x009b0 +1,
    0x009b2, 0x009b2 +1,
    0x009b6, 0x009b9 +1,
    0x009bc, 0x009c4 +1,
    0x009c7, 0x009c8 +1,
    0x009cb, 0x009ce +1,
    0x009d7, 0x009d7 +1,
    0x009dc, 0x009dd +1,
    0x009df, 0x009e3 +1,
    0x009e6, 0x009fb +1,
]);

immutable(Charset) unicodeLatin = Charset([
    0x00041, 0x0005a +1,
    0x00061, 0x0007a +1,
    0x000aa, 0x000aa +1,
    0x000ba, 0x000ba +1,
    0x000c0, 0x000d6 +1,
    0x000d8, 0x000f6 +1,
    0x000f8, 0x002b8 +1,
    0x002e0, 0x002e4 +1,
    0x01d00, 0x01d25 +1,
    0x01d2c, 0x01d5c +1,
    0x01d62, 0x01d65 +1,
    0x01d6b, 0x01d77 +1,
    0x01d79, 0x01dbe +1,
    0x01e00, 0x01eff +1,
    0x02071, 0x02071 +1,
    0x0207f, 0x0207f +1,
    0x02090, 0x0209c +1,
    0x0212a, 0x0212b +1,
    0x02132, 0x02132 +1,
    0x0214e, 0x0214e +1,
    0x02160, 0x02188 +1,
    0x02c60, 0x02c7f +1,
    0x0a722, 0x0a787 +1,
    0x0a78b, 0x0a78e +1,
    0x0a790, 0x0a791 +1,
    0x0a7a0, 0x0a7a9 +1,
    0x0a7fa, 0x0a7ff +1,
    0x0fb00, 0x0fb06 +1,
    0x0ff21, 0x0ff3a +1,
    0x0ff41, 0x0ff5a +1,
]);

immutable(Charset) unicodeTagalog = Charset([
    0x01700, 0x0170c +1,
    0x0170e, 0x01714 +1,
]);

immutable(Charset) unicodeRejang = Charset([
    0x0a930, 0x0a953 +1,
    0x0a95f, 0x0a95f +1,
]);

immutable(Charset) unicodeInCombining_Diacritical_Marks_for_Symbols = Charset([
    0x020d0, 0x020ff +1,
]);

immutable(Charset) unicodeInSupplemental_Mathematical_Operators = Charset([
    0x02a00, 0x02aff +1,
]);

immutable(Charset) unicodeInCham = Charset([
    0x0aa00, 0x0aa5f +1,
]);

immutable(Charset) unicodeAvestan = Charset([
    0x10b00, 0x10b35 +1,
    0x10b39, 0x10b3f +1,
]);

immutable(Charset) unicodeInMiscellaneous_Mathematical_Symbols_A = Charset([
    0x027c0, 0x027ef +1,
]);

immutable(Charset) unicodeInMiscellaneous_Mathematical_Symbols_B = Charset([
    0x02980, 0x029ff +1,
]);

immutable(Charset) unicodeInTelugu = Charset([
    0x00c00, 0x00c7f +1,
]);

immutable(Charset) unicodeLimbu = Charset([
    0x01900, 0x0191c +1,
    0x01920, 0x0192b +1,
    0x01930, 0x0193b +1,
    0x01940, 0x01940 +1,
    0x01944, 0x0194f +1,
]);

immutable(Charset) unicodeInGeneral_Punctuation = Charset([
    0x02000, 0x0206f +1,
]);

immutable(Charset) unicodeUnified_Ideograph = Charset([
    0x03400, 0x04db5 +1,
    0x04e00, 0x09fcb +1,
    0x0fa0e, 0x0fa0f +1,
    0x0fa11, 0x0fa11 +1,
    0x0fa13, 0x0fa14 +1,
    0x0fa1f, 0x0fa1f +1,
    0x0fa21, 0x0fa21 +1,
    0x0fa23, 0x0fa24 +1,
    0x0fa27, 0x0fa29 +1,
    0x20000, 0x2a6d6 +1,
    0x2a700, 0x2b734 +1,
    0x2b740, 0x2b81d +1,
]);

immutable(Charset) unicodeInPhoenician = Charset([
    0x10900, 0x1091f +1,
]);

immutable(Charset) unicodeOld_South_Arabian = Charset([
    0x10a60, 0x10a7f +1,
]);

immutable(Charset) unicodeInBuhid = Charset([
    0x01740, 0x0175f +1,
]);

immutable(Charset) unicodeKhmer = Charset([
    0x01780, 0x017dd +1,
    0x017e0, 0x017e9 +1,
    0x017f0, 0x017f9 +1,
    0x019e0, 0x019ff +1,
]);

immutable(Charset) unicodeInLatin_Extended_A = Charset([
    0x00100, 0x0017f +1,
]);

immutable(Charset) unicodeInLatin_Extended_B = Charset([
    0x00180, 0x0024f +1,
]);

immutable(Charset) unicodeInLatin_Extended_C = Charset([
    0x02c60, 0x02c7f +1,
]);

immutable(Charset) unicodeInLatin_Extended_D = Charset([
    0x0a720, 0x0a7ff +1,
]);

immutable(Charset) unicodeGurmukhi = Charset([
    0x00a01, 0x00a03 +1,
    0x00a05, 0x00a0a +1,
    0x00a0f, 0x00a10 +1,
    0x00a13, 0x00a28 +1,
    0x00a2a, 0x00a30 +1,
    0x00a32, 0x00a33 +1,
    0x00a35, 0x00a36 +1,
    0x00a38, 0x00a39 +1,
    0x00a3c, 0x00a3c +1,
    0x00a3e, 0x00a42 +1,
    0x00a47, 0x00a48 +1,
    0x00a4b, 0x00a4d +1,
    0x00a51, 0x00a51 +1,
    0x00a59, 0x00a5c +1,
    0x00a5e, 0x00a5e +1,
    0x00a66, 0x00a75 +1,
]);

immutable(Charset) unicodeInOsmanya = Charset([
    0x10480, 0x104af +1,
]);

immutable(Charset) unicodeInCJK_Compatibility = Charset([
    0x03300, 0x033ff +1,
]);

immutable(Charset) unicodeOriya = Charset([
    0x00b01, 0x00b03 +1,
    0x00b05, 0x00b0c +1,
    0x00b0f, 0x00b10 +1,
    0x00b13, 0x00b28 +1,
    0x00b2a, 0x00b30 +1,
    0x00b32, 0x00b33 +1,
    0x00b35, 0x00b39 +1,
    0x00b3c, 0x00b44 +1,
    0x00b47, 0x00b48 +1,
    0x00b4b, 0x00b4d +1,
    0x00b56, 0x00b57 +1,
    0x00b5c, 0x00b5d +1,
    0x00b5f, 0x00b63 +1,
    0x00b66, 0x00b77 +1,
]);

immutable(Charset) unicodeBuginese = Charset([
    0x01a00, 0x01a1b +1,
    0x01a1e, 0x01a1f +1,
]);

immutable(Charset) unicodeInGeorgian_Supplement = Charset([
    0x02d00, 0x02d2f +1,
]);

immutable(Charset) unicodeInCJK_Strokes = Charset([
    0x031c0, 0x031ef +1,
]);

immutable(Charset) unicodeVai = Charset([
    0x0a500, 0x0a62b +1,
]);

immutable(Charset) unicodeHangul = Charset([
    0x01100, 0x011ff +1,
    0x0302e, 0x0302f +1,
    0x03131, 0x0318e +1,
    0x03200, 0x0321e +1,
    0x03260, 0x0327e +1,
    0x0a960, 0x0a97c +1,
    0x0ac00, 0x0d7a3 +1,
    0x0d7b0, 0x0d7c6 +1,
    0x0d7cb, 0x0d7fb +1,
    0x0ffa0, 0x0ffbe +1,
    0x0ffc2, 0x0ffc7 +1,
    0x0ffca, 0x0ffcf +1,
    0x0ffd2, 0x0ffd7 +1,
    0x0ffda, 0x0ffdc +1,
]);

immutable(Charset) unicodeInRejang = Charset([
    0x0a930, 0x0a95f +1,
]);

immutable(Charset) unicodeInMiscellaneous_Technical = Charset([
    0x02300, 0x023ff +1,
]);

immutable(Charset) unicodeInTransport_And_Map_Symbols = Charset([
    0x1f680, 0x1f6ff +1,
]);

immutable(Charset) unicodeHyphen = Charset([
    0x0002d, 0x0002d +1,
    0x000ad, 0x000ad +1,
    0x0058a, 0x0058a +1,
    0x01806, 0x01806 +1,
    0x02010, 0x02011 +1,
    0x02e17, 0x02e17 +1,
    0x030fb, 0x030fb +1,
    0x0fe63, 0x0fe63 +1,
    0x0ff0d, 0x0ff0d +1,
    0x0ff65, 0x0ff65 +1,
]);

immutable(Charset) unicodeThai = Charset([
    0x00e01, 0x00e3a +1,
    0x00e40, 0x00e5b +1,
]);

immutable(Charset) unicodeSundanese = Charset([
    0x01b80, 0x01baa +1,
    0x01bae, 0x01bb9 +1,
]);

immutable(Charset) unicodeInRunic = Charset([
    0x016a0, 0x016ff +1,
]);

immutable(Charset) unicodeDiacritic = Charset([
    0x0005e, 0x0005e +1,
    0x00060, 0x00060 +1,
    0x000a8, 0x000a8 +1,
    0x000af, 0x000af +1,
    0x000b4, 0x000b4 +1,
    0x000b7, 0x000b8 +1,
    0x002b0, 0x0034e +1,
    0x00350, 0x00357 +1,
    0x0035d, 0x00362 +1,
    0x00374, 0x00375 +1,
    0x0037a, 0x0037a +1,
    0x00384, 0x00385 +1,
    0x00483, 0x00487 +1,
    0x00559, 0x00559 +1,
    0x00591, 0x005a1 +1,
    0x005a3, 0x005bd +1,
    0x005bf, 0x005bf +1,
    0x005c1, 0x005c2 +1,
    0x005c4, 0x005c4 +1,
    0x0064b, 0x00652 +1,
    0x00657, 0x00658 +1,
    0x006df, 0x006e0 +1,
    0x006e5, 0x006e6 +1,
    0x006ea, 0x006ec +1,
    0x00730, 0x0074a +1,
    0x007a6, 0x007b0 +1,
    0x007eb, 0x007f5 +1,
    0x00818, 0x00819 +1,
    0x0093c, 0x0093c +1,
    0x0094d, 0x0094d +1,
    0x00951, 0x00954 +1,
    0x00971, 0x00971 +1,
    0x009bc, 0x009bc +1,
    0x009cd, 0x009cd +1,
    0x00a3c, 0x00a3c +1,
    0x00a4d, 0x00a4d +1,
    0x00abc, 0x00abc +1,
    0x00acd, 0x00acd +1,
    0x00b3c, 0x00b3c +1,
    0x00b4d, 0x00b4d +1,
    0x00bcd, 0x00bcd +1,
    0x00c4d, 0x00c4d +1,
    0x00cbc, 0x00cbc +1,
    0x00ccd, 0x00ccd +1,
    0x00d4d, 0x00d4d +1,
    0x00dca, 0x00dca +1,
    0x00e47, 0x00e4c +1,
    0x00e4e, 0x00e4e +1,
    0x00ec8, 0x00ecc +1,
    0x00f18, 0x00f19 +1,
    0x00f35, 0x00f35 +1,
    0x00f37, 0x00f37 +1,
    0x00f39, 0x00f39 +1,
    0x00f3e, 0x00f3f +1,
    0x00f82, 0x00f84 +1,
    0x00f86, 0x00f87 +1,
    0x00fc6, 0x00fc6 +1,
    0x01037, 0x01037 +1,
    0x01039, 0x0103a +1,
    0x01087, 0x0108d +1,
    0x0108f, 0x0108f +1,
    0x0109a, 0x0109b +1,
    0x017c9, 0x017d3 +1,
    0x017dd, 0x017dd +1,
    0x01939, 0x0193b +1,
    0x01a75, 0x01a7c +1,
    0x01a7f, 0x01a7f +1,
    0x01b34, 0x01b34 +1,
    0x01b44, 0x01b44 +1,
    0x01b6b, 0x01b73 +1,
    0x01baa, 0x01baa +1,
    0x01c36, 0x01c37 +1,
    0x01c78, 0x01c7d +1,
    0x01cd0, 0x01ce8 +1,
    0x01ced, 0x01ced +1,
    0x01d2c, 0x01d6a +1,
    0x01dc4, 0x01dcf +1,
    0x01dfd, 0x01dff +1,
    0x01fbd, 0x01fbd +1,
    0x01fbf, 0x01fc1 +1,
    0x01fcd, 0x01fcf +1,
    0x01fdd, 0x01fdf +1,
    0x01fed, 0x01fef +1,
    0x01ffd, 0x01ffe +1,
    0x02cef, 0x02cf1 +1,
    0x02e2f, 0x02e2f +1,
    0x0302a, 0x0302f +1,
    0x03099, 0x0309c +1,
    0x030fc, 0x030fc +1,
    0x0a66f, 0x0a66f +1,
    0x0a67c, 0x0a67d +1,
    0x0a67f, 0x0a67f +1,
    0x0a6f0, 0x0a6f1 +1,
    0x0a717, 0x0a721 +1,
    0x0a788, 0x0a788 +1,
    0x0a8c4, 0x0a8c4 +1,
    0x0a8e0, 0x0a8f1 +1,
    0x0a92b, 0x0a92e +1,
    0x0a953, 0x0a953 +1,
    0x0a9b3, 0x0a9b3 +1,
    0x0a9c0, 0x0a9c0 +1,
    0x0aa7b, 0x0aa7b +1,
    0x0aabf, 0x0aac2 +1,
    0x0abec, 0x0abed +1,
    0x0fb1e, 0x0fb1e +1,
    0x0fe20, 0x0fe26 +1,
    0x0ff3e, 0x0ff3e +1,
    0x0ff40, 0x0ff40 +1,
    0x0ff70, 0x0ff70 +1,
    0x0ff9e, 0x0ff9f +1,
    0x0ffe3, 0x0ffe3 +1,
    0x110b9, 0x110ba +1,
    0x1d167, 0x1d169 +1,
    0x1d16d, 0x1d172 +1,
    0x1d17b, 0x1d182 +1,
    0x1d185, 0x1d18b +1,
    0x1d1aa, 0x1d1ad +1,
]);

immutable(Charset) unicodeYi = Charset([
    0x0a000, 0x0a48c +1,
    0x0a490, 0x0a4c6 +1,
]);

immutable(Charset) unicodeInAlphabetic_Presentation_Forms = Charset([
    0x0fb00, 0x0fb4f +1,
]);

immutable(Charset) unicodeExtender = Charset([
    0x000b7, 0x000b7 +1,
    0x002d0, 0x002d1 +1,
    0x00640, 0x00640 +1,
    0x007fa, 0x007fa +1,
    0x00e46, 0x00e46 +1,
    0x00ec6, 0x00ec6 +1,
    0x01843, 0x01843 +1,
    0x01aa7, 0x01aa7 +1,
    0x01c36, 0x01c36 +1,
    0x01c7b, 0x01c7b +1,
    0x03005, 0x03005 +1,
    0x03031, 0x03035 +1,
    0x0309d, 0x0309e +1,
    0x030fc, 0x030fe +1,
    0x0a015, 0x0a015 +1,
    0x0a60c, 0x0a60c +1,
    0x0a9cf, 0x0a9cf +1,
    0x0aa70, 0x0aa70 +1,
    0x0aadd, 0x0aadd +1,
    0x0ff70, 0x0ff70 +1,
]);

immutable(Charset) unicodeGlagolitic = Charset([
    0x02c00, 0x02c2e +1,
    0x02c30, 0x02c5e +1,
]);

immutable(Charset) unicodeInSuperscripts_and_Subscripts = Charset([
    0x02070, 0x0209f +1,
]);

immutable(Charset) unicodeInMalayalam = Charset([
    0x00d00, 0x00d7f +1,
]);

immutable(Charset) unicodeJoin_Control = Charset([
    0x0200c, 0x0200d +1,
]);

immutable(Charset) unicodeInBatak = Charset([
    0x01bc0, 0x01bff +1,
]);

immutable(Charset) unicodeThaana = Charset([
    0x00780, 0x007b1 +1,
]);

immutable(Charset) unicodeSoft_Dotted = Charset([
    0x00069, 0x0006a +1,
    0x0012f, 0x0012f +1,
    0x00249, 0x00249 +1,
    0x00268, 0x00268 +1,
    0x0029d, 0x0029d +1,
    0x002b2, 0x002b2 +1,
    0x003f3, 0x003f3 +1,
    0x00456, 0x00456 +1,
    0x00458, 0x00458 +1,
    0x01d62, 0x01d62 +1,
    0x01d96, 0x01d96 +1,
    0x01da4, 0x01da4 +1,
    0x01da8, 0x01da8 +1,
    0x01e2d, 0x01e2d +1,
    0x01ecb, 0x01ecb +1,
    0x02071, 0x02071 +1,
    0x02148, 0x02149 +1,
    0x02c7c, 0x02c7c +1,
    0x1d422, 0x1d423 +1,
    0x1d456, 0x1d457 +1,
    0x1d48a, 0x1d48b +1,
    0x1d4be, 0x1d4bf +1,
    0x1d4f2, 0x1d4f3 +1,
    0x1d526, 0x1d527 +1,
    0x1d55a, 0x1d55b +1,
    0x1d58e, 0x1d58f +1,
    0x1d5c2, 0x1d5c3 +1,
    0x1d5f6, 0x1d5f7 +1,
    0x1d62a, 0x1d62b +1,
    0x1d65e, 0x1d65f +1,
    0x1d692, 0x1d693 +1,
]);

immutable(Charset) unicodeBraille = Charset([
    0x02800, 0x028ff +1,
]);

immutable(Charset) unicodeInGurmukhi = Charset([
    0x00a00, 0x00a7f +1,
]);

immutable(Charset) unicodeMandaic = Charset([
    0x00840, 0x0085b +1,
    0x0085e, 0x0085e +1,
]);

immutable(Charset) unicodeInUnified_Canadian_Aboriginal_Syllabics = Charset([
    0x01400, 0x0167f +1,
]);

immutable(Charset) unicodeInDingbats = Charset([
    0x02700, 0x027bf +1,
]);

immutable(Charset) unicodeZl = Charset([
    0x02028, 0x02028 +1,
]);

immutable(Charset) unicodeInMusical_Symbols = Charset([
    0x1d100, 0x1d1ff +1,
]);

immutable(Charset) unicodeInBuginese = Charset([
    0x01a00, 0x01a1f +1,
]);

immutable(Charset) unicodeInSaurashtra = Charset([
    0x0a880, 0x0a8df +1,
]);

immutable(Charset) unicodeInCJK_Symbols_and_Punctuation = Charset([
    0x03000, 0x0303f +1,
]);

immutable(Charset) unicodeInKangxi_Radicals = Charset([
    0x02f00, 0x02fdf +1,
]);

immutable(Charset) unicodeZp = Charset([
    0x02029, 0x02029 +1,
]);

immutable(Charset) unicodeHex_Digit = Charset([
    0x00030, 0x00039 +1,
    0x00041, 0x00046 +1,
    0x00061, 0x00066 +1,
    0x0ff10, 0x0ff19 +1,
    0x0ff21, 0x0ff26 +1,
    0x0ff41, 0x0ff46 +1,
]);

immutable(Charset) unicodeZs = Charset([
    0x00020, 0x00020 +1,
    0x000a0, 0x000a0 +1,
    0x01680, 0x01680 +1,
    0x0180e, 0x0180e +1,
    0x02000, 0x0200a +1,
    0x0202f, 0x0202f +1,
    0x0205f, 0x0205f +1,
    0x03000, 0x03000 +1,
]);

immutable(Charset) unicodeInThai = Charset([
    0x00e00, 0x00e7f +1,
]);

immutable(Charset) unicodeDevanagari = Charset([
    0x00900, 0x00950 +1,
    0x00953, 0x00963 +1,
    0x00966, 0x0096f +1,
    0x00971, 0x00977 +1,
    0x00979, 0x0097f +1,
    0x0a8e0, 0x0a8fb +1,
]);

immutable(Charset) unicodeInArrows = Charset([
    0x02190, 0x021ff +1,
]);

immutable(Charset) unicodeEthiopic = Charset([
    0x01200, 0x01248 +1,
    0x0124a, 0x0124d +1,
    0x01250, 0x01256 +1,
    0x01258, 0x01258 +1,
    0x0125a, 0x0125d +1,
    0x01260, 0x01288 +1,
    0x0128a, 0x0128d +1,
    0x01290, 0x012b0 +1,
    0x012b2, 0x012b5 +1,
    0x012b8, 0x012be +1,
    0x012c0, 0x012c0 +1,
    0x012c2, 0x012c5 +1,
    0x012c8, 0x012d6 +1,
    0x012d8, 0x01310 +1,
    0x01312, 0x01315 +1,
    0x01318, 0x0135a +1,
    0x0135d, 0x0137c +1,
    0x01380, 0x01399 +1,
    0x02d80, 0x02d96 +1,
    0x02da0, 0x02da6 +1,
    0x02da8, 0x02dae +1,
    0x02db0, 0x02db6 +1,
    0x02db8, 0x02dbe +1,
    0x02dc0, 0x02dc6 +1,
    0x02dc8, 0x02dce +1,
    0x02dd0, 0x02dd6 +1,
    0x02dd8, 0x02dde +1,
    0x0ab01, 0x0ab06 +1,
    0x0ab09, 0x0ab0e +1,
    0x0ab11, 0x0ab16 +1,
    0x0ab20, 0x0ab26 +1,
    0x0ab28, 0x0ab2e +1,
]);

immutable(Charset) unicodeInCurrency_Symbols = Charset([
    0x020a0, 0x020cf +1,
]);

immutable(Charset) unicodeInOld_Persian = Charset([
    0x103a0, 0x103df +1,
]);

immutable(Charset) unicodeInRumi_Numeral_Symbols = Charset([
    0x10e60, 0x10e7f +1,
]);

immutable(Charset) unicodeInTags = Charset([
    0xe0000, 0xe007f +1,
]);

immutable(Charset) unicodeGreek = Charset([
    0x00370, 0x00373 +1,
    0x00375, 0x00377 +1,
    0x0037a, 0x0037d +1,
    0x00384, 0x00384 +1,
    0x00386, 0x00386 +1,
    0x00388, 0x0038a +1,
    0x0038c, 0x0038c +1,
    0x0038e, 0x003a1 +1,
    0x003a3, 0x003e1 +1,
    0x003f0, 0x003ff +1,
    0x01d26, 0x01d2a +1,
    0x01d5d, 0x01d61 +1,
    0x01d66, 0x01d6a +1,
    0x01dbf, 0x01dbf +1,
    0x01f00, 0x01f15 +1,
    0x01f18, 0x01f1d +1,
    0x01f20, 0x01f45 +1,
    0x01f48, 0x01f4d +1,
    0x01f50, 0x01f57 +1,
    0x01f59, 0x01f59 +1,
    0x01f5b, 0x01f5b +1,
    0x01f5d, 0x01f5d +1,
    0x01f5f, 0x01f7d +1,
    0x01f80, 0x01fb4 +1,
    0x01fb6, 0x01fc4 +1,
    0x01fc6, 0x01fd3 +1,
    0x01fd6, 0x01fdb +1,
    0x01fdd, 0x01fef +1,
    0x01ff2, 0x01ff4 +1,
    0x01ff6, 0x01ffe +1,
    0x02126, 0x02126 +1,
    0x10140, 0x1018a +1,
    0x1d200, 0x1d245 +1,
]);

immutable(Charset) unicodeOl_Chiki = Charset([
    0x01c50, 0x01c7f +1,
]);

immutable(Charset) unicodeTagbanwa = Charset([
    0x01760, 0x0176c +1,
    0x0176e, 0x01770 +1,
    0x01772, 0x01773 +1,
]);

immutable(Charset) unicodeOther_Uppercase = Charset([
    0x02160, 0x0216f +1,
    0x024b6, 0x024cf +1,
]);

immutable(Charset) unicodeInOgham = Charset([
    0x01680, 0x0169f +1,
]);

immutable(Charset) unicodeInThaana = Charset([
    0x00780, 0x007bf +1,
]);

immutable(Charset) unicodeInEnclosed_Ideographic_Supplement = Charset([
    0x1f200, 0x1f2ff +1,
]);

immutable(Charset) unicodeInKhmer_Symbols = Charset([
    0x019e0, 0x019ff +1,
]);

immutable(Charset) unicodeCommon = Charset([
    0x00000, 0x00040 +1,
    0x0005b, 0x00060 +1,
    0x0007b, 0x000a9 +1,
    0x000ab, 0x000b9 +1,
    0x000bb, 0x000bf +1,
    0x000d7, 0x000d7 +1,
    0x000f7, 0x000f7 +1,
    0x002b9, 0x002df +1,
    0x002e5, 0x002e9 +1,
    0x002ec, 0x002ff +1,
    0x00374, 0x00374 +1,
    0x0037e, 0x0037e +1,
    0x00385, 0x00385 +1,
    0x00387, 0x00387 +1,
    0x00589, 0x00589 +1,
    0x0060c, 0x0060c +1,
    0x0061b, 0x0061b +1,
    0x0061f, 0x0061f +1,
    0x00640, 0x00640 +1,
    0x00660, 0x00669 +1,
    0x006dd, 0x006dd +1,
    0x00964, 0x00965 +1,
    0x00970, 0x00970 +1,
    0x00e3f, 0x00e3f +1,
    0x00fd5, 0x00fd8 +1,
    0x010fb, 0x010fb +1,
    0x016eb, 0x016ed +1,
    0x01735, 0x01736 +1,
    0x01802, 0x01803 +1,
    0x01805, 0x01805 +1,
    0x01cd3, 0x01cd3 +1,
    0x01ce1, 0x01ce1 +1,
    0x01ce9, 0x01cec +1,
    0x01cee, 0x01cf2 +1,
    0x02000, 0x0200b +1,
    0x0200e, 0x02064 +1,
    0x0206a, 0x02070 +1,
    0x02074, 0x0207e +1,
    0x02080, 0x0208e +1,
    0x020a0, 0x020b9 +1,
    0x02100, 0x02125 +1,
    0x02127, 0x02129 +1,
    0x0212c, 0x02131 +1,
    0x02133, 0x0214d +1,
    0x0214f, 0x0215f +1,
    0x02189, 0x02189 +1,
    0x02190, 0x023f3 +1,
    0x02400, 0x02426 +1,
    0x02440, 0x0244a +1,
    0x02460, 0x026ff +1,
    0x02701, 0x027ca +1,
    0x027cc, 0x027cc +1,
    0x027ce, 0x027ff +1,
    0x02900, 0x02b4c +1,
    0x02b50, 0x02b59 +1,
    0x02e00, 0x02e31 +1,
    0x02ff0, 0x02ffb +1,
    0x03000, 0x03004 +1,
    0x03006, 0x03006 +1,
    0x03008, 0x03020 +1,
    0x03030, 0x03037 +1,
    0x0303c, 0x0303f +1,
    0x0309b, 0x0309c +1,
    0x030a0, 0x030a0 +1,
    0x030fb, 0x030fc +1,
    0x03190, 0x0319f +1,
    0x031c0, 0x031e3 +1,
    0x03220, 0x0325f +1,
    0x0327f, 0x032cf +1,
    0x03358, 0x033ff +1,
    0x04dc0, 0x04dff +1,
    0x0a700, 0x0a721 +1,
    0x0a788, 0x0a78a +1,
    0x0a830, 0x0a839 +1,
    0x0fd3e, 0x0fd3f +1,
    0x0fdfd, 0x0fdfd +1,
    0x0fe10, 0x0fe19 +1,
    0x0fe30, 0x0fe52 +1,
    0x0fe54, 0x0fe66 +1,
    0x0fe68, 0x0fe6b +1,
    0x0feff, 0x0feff +1,
    0x0ff01, 0x0ff20 +1,
    0x0ff3b, 0x0ff40 +1,
    0x0ff5b, 0x0ff65 +1,
    0x0ff70, 0x0ff70 +1,
    0x0ff9e, 0x0ff9f +1,
    0x0ffe0, 0x0ffe6 +1,
    0x0ffe8, 0x0ffee +1,
    0x0fff9, 0x0fffd +1,
    0x10100, 0x10102 +1,
    0x10107, 0x10133 +1,
    0x10137, 0x1013f +1,
    0x10190, 0x1019b +1,
    0x101d0, 0x101fc +1,
    0x1d000, 0x1d0f5 +1,
    0x1d100, 0x1d126 +1,
    0x1d129, 0x1d166 +1,
    0x1d16a, 0x1d17a +1,
    0x1d183, 0x1d184 +1,
    0x1d18c, 0x1d1a9 +1,
    0x1d1ae, 0x1d1dd +1,
    0x1d300, 0x1d356 +1,
    0x1d360, 0x1d371 +1,
    0x1d400, 0x1d454 +1,
    0x1d456, 0x1d49c +1,
    0x1d49e, 0x1d49f +1,
    0x1d4a2, 0x1d4a2 +1,
    0x1d4a5, 0x1d4a6 +1,
    0x1d4a9, 0x1d4ac +1,
    0x1d4ae, 0x1d4b9 +1,
    0x1d4bb, 0x1d4bb +1,
    0x1d4bd, 0x1d4c3 +1,
    0x1d4c5, 0x1d505 +1,
    0x1d507, 0x1d50a +1,
    0x1d50d, 0x1d514 +1,
    0x1d516, 0x1d51c +1,
    0x1d51e, 0x1d539 +1,
    0x1d53b, 0x1d53e +1,
    0x1d540, 0x1d544 +1,
    0x1d546, 0x1d546 +1,
    0x1d54a, 0x1d550 +1,
    0x1d552, 0x1d6a5 +1,
    0x1d6a8, 0x1d7cb +1,
    0x1d7ce, 0x1d7ff +1,
    0x1f000, 0x1f02b +1,
    0x1f030, 0x1f093 +1,
    0x1f0a0, 0x1f0ae +1,
    0x1f0b1, 0x1f0be +1,
    0x1f0c1, 0x1f0cf +1,
    0x1f0d1, 0x1f0df +1,
    0x1f100, 0x1f10a +1,
    0x1f110, 0x1f12e +1,
    0x1f130, 0x1f169 +1,
    0x1f170, 0x1f19a +1,
    0x1f1e6, 0x1f1ff +1,
    0x1f201, 0x1f202 +1,
    0x1f210, 0x1f23a +1,
    0x1f240, 0x1f248 +1,
    0x1f250, 0x1f251 +1,
    0x1f300, 0x1f320 +1,
    0x1f330, 0x1f335 +1,
    0x1f337, 0x1f37c +1,
    0x1f380, 0x1f393 +1,
    0x1f3a0, 0x1f3c4 +1,
    0x1f3c6, 0x1f3ca +1,
    0x1f3e0, 0x1f3f0 +1,
    0x1f400, 0x1f43e +1,
    0x1f440, 0x1f440 +1,
    0x1f442, 0x1f4f7 +1,
    0x1f4f9, 0x1f4fc +1,
    0x1f500, 0x1f53d +1,
    0x1f550, 0x1f567 +1,
    0x1f5fb, 0x1f5ff +1,
    0x1f601, 0x1f610 +1,
    0x1f612, 0x1f614 +1,
    0x1f616, 0x1f616 +1,
    0x1f618, 0x1f618 +1,
    0x1f61a, 0x1f61a +1,
    0x1f61c, 0x1f61e +1,
    0x1f620, 0x1f625 +1,
    0x1f628, 0x1f62b +1,
    0x1f62d, 0x1f62d +1,
    0x1f630, 0x1f633 +1,
    0x1f635, 0x1f640 +1,
    0x1f645, 0x1f64f +1,
    0x1f680, 0x1f6c5 +1,
    0x1f700, 0x1f773 +1,
    0xe0001, 0xe0001 +1,
    0xe0020, 0xe007f +1,
]);

immutable(Charset) unicodeInCommon_Indic_Number_Forms = Charset([
    0x0a830, 0x0a83f +1,
]);

immutable(Charset) unicodeInSmall_Form_Variants = Charset([
    0x0fe50, 0x0fe6f +1,
]);

immutable(Charset) unicodeIdeographic = Charset([
    0x03006, 0x03007 +1,
    0x03021, 0x03029 +1,
    0x03038, 0x0303a +1,
    0x03400, 0x04db5 +1,
    0x04e00, 0x09fcb +1,
    0x0f900, 0x0fa2d +1,
    0x0fa30, 0x0fa6d +1,
    0x0fa70, 0x0fad9 +1,
    0x20000, 0x2a6d6 +1,
    0x2a700, 0x2b734 +1,
    0x2b740, 0x2b81d +1,
    0x2f800, 0x2fa1d +1,
]);

immutable(Charset) unicodeGeorgian = Charset([
    0x010a0, 0x010c5 +1,
    0x010d0, 0x010fa +1,
    0x010fc, 0x010fc +1,
    0x02d00, 0x02d25 +1,
]);

immutable(Charset) unicodeOsmanya = Charset([
    0x10480, 0x1049d +1,
    0x104a0, 0x104a9 +1,
]);

immutable(Charset) unicodeInEthiopic = Charset([
    0x01200, 0x0137f +1,
]);

immutable(Charset) unicodeInEnclosed_Alphanumerics = Charset([
    0x02460, 0x024ff +1,
]);

immutable(Charset) unicodeCuneiform = Charset([
    0x12000, 0x1236e +1,
    0x12400, 0x12462 +1,
    0x12470, 0x12473 +1,
]);

immutable(Charset) unicodeSyriac = Charset([
    0x00700, 0x0070d +1,
    0x0070f, 0x0074a +1,
    0x0074d, 0x0074f +1,
]);

immutable(Charset) unicodeInVertical_Forms = Charset([
    0x0fe10, 0x0fe1f +1,
]);

immutable(Charset) unicodeInTai_Xuan_Jing_Symbols = Charset([
    0x1d300, 0x1d35f +1,
]);

immutable(Charset) unicodeNoncharacter_Code_Point = Charset([
    0x0fdd0, 0x0fdef +1,
    0x0fffe, 0x0ffff +1,
    0x1fffe, 0x1ffff +1,
    0x2fffe, 0x2ffff +1,
    0x3fffe, 0x3ffff +1,
    0x4fffe, 0x4ffff +1,
    0x5fffe, 0x5ffff +1,
    0x6fffe, 0x6ffff +1,
    0x7fffe, 0x7ffff +1,
    0x8fffe, 0x8ffff +1,
    0x9fffe, 0x9ffff +1,
    0xafffe, 0xaffff +1,
    0xbfffe, 0xbffff +1,
    0xcfffe, 0xcffff +1,
    0xdfffe, 0xdffff +1,
    0xefffe, 0xeffff +1,
    0xffffe, 0xfffff +1,
    0x10fffe, 0x10ffff +1,
]);

immutable(Charset) unicodeInMiscellaneous_Symbols_and_Arrows = Charset([
    0x02b00, 0x02bff +1,
]);

immutable(Charset) unicodeInOld_Italic = Charset([
    0x10300, 0x1032f +1,
]);

immutable(Charset) unicodeMeetei_Mayek = Charset([
    0x0abc0, 0x0abed +1,
    0x0abf0, 0x0abf9 +1,
]);

immutable(Charset) unicodeOther_Grapheme_Extend = Charset([
    0x009be, 0x009be +1,
    0x009d7, 0x009d7 +1,
    0x00b3e, 0x00b3e +1,
    0x00b57, 0x00b57 +1,
    0x00bbe, 0x00bbe +1,
    0x00bd7, 0x00bd7 +1,
    0x00cc2, 0x00cc2 +1,
    0x00cd5, 0x00cd6 +1,
    0x00d3e, 0x00d3e +1,
    0x00d57, 0x00d57 +1,
    0x00dcf, 0x00dcf +1,
    0x00ddf, 0x00ddf +1,
    0x0200c, 0x0200d +1,
    0x0ff9e, 0x0ff9f +1,
    0x1d165, 0x1d165 +1,
    0x1d16e, 0x1d172 +1,
]);

immutable(Charset) unicodeOther_Math = Charset([
    0x0005e, 0x0005e +1,
    0x003d0, 0x003d2 +1,
    0x003d5, 0x003d5 +1,
    0x003f0, 0x003f1 +1,
    0x003f4, 0x003f5 +1,
    0x02016, 0x02016 +1,
    0x02032, 0x02034 +1,
    0x02040, 0x02040 +1,
    0x02061, 0x02064 +1,
    0x0207d, 0x0207e +1,
    0x0208d, 0x0208e +1,
    0x020d0, 0x020dc +1,
    0x020e1, 0x020e1 +1,
    0x020e5, 0x020e6 +1,
    0x020eb, 0x020ef +1,
    0x02102, 0x02102 +1,
    0x02107, 0x02107 +1,
    0x0210a, 0x02113 +1,
    0x02115, 0x02115 +1,
    0x02119, 0x0211d +1,
    0x02124, 0x02124 +1,
    0x02128, 0x02129 +1,
    0x0212c, 0x0212d +1,
    0x0212f, 0x02131 +1,
    0x02133, 0x02138 +1,
    0x0213c, 0x0213f +1,
    0x02145, 0x02149 +1,
    0x02195, 0x02199 +1,
    0x0219c, 0x0219f +1,
    0x021a1, 0x021a2 +1,
    0x021a4, 0x021a5 +1,
    0x021a7, 0x021a7 +1,
    0x021a9, 0x021ad +1,
    0x021b0, 0x021b1 +1,
    0x021b6, 0x021b7 +1,
    0x021bc, 0x021cd +1,
    0x021d0, 0x021d1 +1,
    0x021d3, 0x021d3 +1,
    0x021d5, 0x021db +1,
    0x021dd, 0x021dd +1,
    0x021e4, 0x021e5 +1,
    0x023b4, 0x023b5 +1,
    0x023b7, 0x023b7 +1,
    0x023d0, 0x023d0 +1,
    0x023e2, 0x023e2 +1,
    0x025a0, 0x025a1 +1,
    0x025ae, 0x025b6 +1,
    0x025bc, 0x025c0 +1,
    0x025c6, 0x025c7 +1,
    0x025ca, 0x025cb +1,
    0x025cf, 0x025d3 +1,
    0x025e2, 0x025e2 +1,
    0x025e4, 0x025e4 +1,
    0x025e7, 0x025ec +1,
    0x02605, 0x02606 +1,
    0x02640, 0x02640 +1,
    0x02642, 0x02642 +1,
    0x02660, 0x02663 +1,
    0x0266d, 0x0266e +1,
    0x027c5, 0x027c6 +1,
    0x027e6, 0x027ef +1,
    0x02983, 0x02998 +1,
    0x029d8, 0x029db +1,
    0x029fc, 0x029fd +1,
    0x0fe61, 0x0fe61 +1,
    0x0fe63, 0x0fe63 +1,
    0x0fe68, 0x0fe68 +1,
    0x0ff3c, 0x0ff3c +1,
    0x0ff3e, 0x0ff3e +1,
    0x1d400, 0x1d454 +1,
    0x1d456, 0x1d49c +1,
    0x1d49e, 0x1d49f +1,
    0x1d4a2, 0x1d4a2 +1,
    0x1d4a5, 0x1d4a6 +1,
    0x1d4a9, 0x1d4ac +1,
    0x1d4ae, 0x1d4b9 +1,
    0x1d4bb, 0x1d4bb +1,
    0x1d4bd, 0x1d4c3 +1,
    0x1d4c5, 0x1d505 +1,
    0x1d507, 0x1d50a +1,
    0x1d50d, 0x1d514 +1,
    0x1d516, 0x1d51c +1,
    0x1d51e, 0x1d539 +1,
    0x1d53b, 0x1d53e +1,
    0x1d540, 0x1d544 +1,
    0x1d546, 0x1d546 +1,
    0x1d54a, 0x1d550 +1,
    0x1d552, 0x1d6a5 +1,
    0x1d6a8, 0x1d6c0 +1,
    0x1d6c2, 0x1d6da +1,
    0x1d6dc, 0x1d6fa +1,
    0x1d6fc, 0x1d714 +1,
    0x1d716, 0x1d734 +1,
    0x1d736, 0x1d74e +1,
    0x1d750, 0x1d76e +1,
    0x1d770, 0x1d788 +1,
    0x1d78a, 0x1d7a8 +1,
    0x1d7aa, 0x1d7c2 +1,
    0x1d7c4, 0x1d7cb +1,
    0x1d7ce, 0x1d7ff +1,
]);

immutable(Charset) unicodeGujarati = Charset([
    0x00a81, 0x00a83 +1,
    0x00a85, 0x00a8d +1,
    0x00a8f, 0x00a91 +1,
    0x00a93, 0x00aa8 +1,
    0x00aaa, 0x00ab0 +1,
    0x00ab2, 0x00ab3 +1,
    0x00ab5, 0x00ab9 +1,
    0x00abc, 0x00ac5 +1,
    0x00ac7, 0x00ac9 +1,
    0x00acb, 0x00acd +1,
    0x00ad0, 0x00ad0 +1,
    0x00ae0, 0x00ae3 +1,
    0x00ae6, 0x00aef +1,
    0x00af1, 0x00af1 +1,
]);

immutable(Charset) unicodeInBox_Drawing = Charset([
    0x02500, 0x0257f +1,
]);

immutable(Charset) unicodeInTagbanwa = Charset([
    0x01760, 0x0177f +1,
]);

immutable(Charset) unicodeInHangul_Syllables = Charset([
    0x0ac00, 0x0d7af +1,
]);

immutable(Charset) unicodeLydian = Charset([
    0x10920, 0x10939 +1,
    0x1093f, 0x1093f +1,
]);

immutable(Charset) unicodeInKatakana_Phonetic_Extensions = Charset([
    0x031f0, 0x031ff +1,
]);

immutable(Charset) unicodeInTai_Tham = Charset([
    0x01a20, 0x01aaf +1,
]);

immutable(Charset) unicodeInNumber_Forms = Charset([
    0x02150, 0x0218f +1,
]);

immutable(Charset) unicodeInBopomofo_Extended = Charset([
    0x031a0, 0x031bf +1,
]);

immutable(Charset) unicodeInherited = Charset([
    0x00300, 0x0036f +1,
    0x00485, 0x00486 +1,
    0x0064b, 0x00655 +1,
    0x0065f, 0x0065f +1,
    0x00670, 0x00670 +1,
    0x00951, 0x00952 +1,
    0x01cd0, 0x01cd2 +1,
    0x01cd4, 0x01ce0 +1,
    0x01ce2, 0x01ce8 +1,
    0x01ced, 0x01ced +1,
    0x01dc0, 0x01de6 +1,
    0x01dfc, 0x01dff +1,
    0x0200c, 0x0200d +1,
    0x020d0, 0x020f0 +1,
    0x0302a, 0x0302d +1,
    0x03099, 0x0309a +1,
    0x0fe00, 0x0fe0f +1,
    0x0fe20, 0x0fe26 +1,
    0x101fd, 0x101fd +1,
    0x1d167, 0x1d169 +1,
    0x1d17b, 0x1d182 +1,
    0x1d185, 0x1d18b +1,
    0x1d1aa, 0x1d1ad +1,
    0xe0100, 0xe01ef +1,
]);

immutable(Charset) unicodeInLetterlike_Symbols = Charset([
    0x02100, 0x0214f +1,
]);

immutable(Charset) unicodeBuhid = Charset([
    0x01740, 0x01753 +1,
]);

immutable(Charset) unicodeInCypriot_Syllabary = Charset([
    0x10800, 0x1083f +1,
]);

immutable(Charset) unicodeInSyloti_Nagri = Charset([
    0x0a800, 0x0a82f +1,
]);

immutable(Charset) unicodeInSamaritan = Charset([
    0x00800, 0x0083f +1,
]);

immutable(Charset) unicodeInGeorgian = Charset([
    0x010a0, 0x010ff +1,
]);

immutable(Charset) unicodeAlphabetic = Charset([
    0x00041, 0x0005a +1,
    0x00061, 0x0007a +1,
    0x000aa, 0x000aa +1,
    0x000b5, 0x000b5 +1,
    0x000ba, 0x000ba +1,
    0x000c0, 0x000d6 +1,
    0x000d8, 0x000f6 +1,
    0x000f8, 0x002c1 +1,
    0x002c6, 0x002d1 +1,
    0x002e0, 0x002e4 +1,
    0x002ec, 0x002ec +1,
    0x002ee, 0x002ee +1,
    0x00345, 0x00345 +1,
    0x00370, 0x00374 +1,
    0x00376, 0x00377 +1,
    0x0037a, 0x0037d +1,
    0x00386, 0x00386 +1,
    0x00388, 0x0038a +1,
    0x0038c, 0x0038c +1,
    0x0038e, 0x003a1 +1,
    0x003a3, 0x003f5 +1,
    0x003f7, 0x00481 +1,
    0x0048a, 0x00527 +1,
    0x00531, 0x00556 +1,
    0x00559, 0x00559 +1,
    0x00561, 0x00587 +1,
    0x005b0, 0x005bd +1,
    0x005bf, 0x005bf +1,
    0x005c1, 0x005c2 +1,
    0x005c4, 0x005c5 +1,
    0x005c7, 0x005c7 +1,
    0x005d0, 0x005ea +1,
    0x005f0, 0x005f2 +1,
    0x00610, 0x0061a +1,
    0x00620, 0x00657 +1,
    0x00659, 0x0065f +1,
    0x0066e, 0x006d3 +1,
    0x006d5, 0x006dc +1,
    0x006e1, 0x006e8 +1,
    0x006ed, 0x006ef +1,
    0x006fa, 0x006fc +1,
    0x006ff, 0x006ff +1,
    0x00710, 0x0073f +1,
    0x0074d, 0x007b1 +1,
    0x007ca, 0x007ea +1,
    0x007f4, 0x007f5 +1,
    0x007fa, 0x007fa +1,
    0x00800, 0x00817 +1,
    0x0081a, 0x0082c +1,
    0x00840, 0x00858 +1,
    0x00900, 0x0093b +1,
    0x0093d, 0x0094c +1,
    0x0094e, 0x00950 +1,
    0x00955, 0x00963 +1,
    0x00971, 0x00977 +1,
    0x00979, 0x0097f +1,
    0x00981, 0x00983 +1,
    0x00985, 0x0098c +1,
    0x0098f, 0x00990 +1,
    0x00993, 0x009a8 +1,
    0x009aa, 0x009b0 +1,
    0x009b2, 0x009b2 +1,
    0x009b6, 0x009b9 +1,
    0x009bd, 0x009c4 +1,
    0x009c7, 0x009c8 +1,
    0x009cb, 0x009cc +1,
    0x009ce, 0x009ce +1,
    0x009d7, 0x009d7 +1,
    0x009dc, 0x009dd +1,
    0x009df, 0x009e3 +1,
    0x009f0, 0x009f1 +1,
    0x00a01, 0x00a03 +1,
    0x00a05, 0x00a0a +1,
    0x00a0f, 0x00a10 +1,
    0x00a13, 0x00a28 +1,
    0x00a2a, 0x00a30 +1,
    0x00a32, 0x00a33 +1,
    0x00a35, 0x00a36 +1,
    0x00a38, 0x00a39 +1,
    0x00a3e, 0x00a42 +1,
    0x00a47, 0x00a48 +1,
    0x00a4b, 0x00a4c +1,
    0x00a51, 0x00a51 +1,
    0x00a59, 0x00a5c +1,
    0x00a5e, 0x00a5e +1,
    0x00a70, 0x00a75 +1,
    0x00a81, 0x00a83 +1,
    0x00a85, 0x00a8d +1,
    0x00a8f, 0x00a91 +1,
    0x00a93, 0x00aa8 +1,
    0x00aaa, 0x00ab0 +1,
    0x00ab2, 0x00ab3 +1,
    0x00ab5, 0x00ab9 +1,
    0x00abd, 0x00ac5 +1,
    0x00ac7, 0x00ac9 +1,
    0x00acb, 0x00acc +1,
    0x00ad0, 0x00ad0 +1,
    0x00ae0, 0x00ae3 +1,
    0x00b01, 0x00b03 +1,
    0x00b05, 0x00b0c +1,
    0x00b0f, 0x00b10 +1,
    0x00b13, 0x00b28 +1,
    0x00b2a, 0x00b30 +1,
    0x00b32, 0x00b33 +1,
    0x00b35, 0x00b39 +1,
    0x00b3d, 0x00b44 +1,
    0x00b47, 0x00b48 +1,
    0x00b4b, 0x00b4c +1,
    0x00b56, 0x00b57 +1,
    0x00b5c, 0x00b5d +1,
    0x00b5f, 0x00b63 +1,
    0x00b71, 0x00b71 +1,
    0x00b82, 0x00b83 +1,
    0x00b85, 0x00b8a +1,
    0x00b8e, 0x00b90 +1,
    0x00b92, 0x00b95 +1,
    0x00b99, 0x00b9a +1,
    0x00b9c, 0x00b9c +1,
    0x00b9e, 0x00b9f +1,
    0x00ba3, 0x00ba4 +1,
    0x00ba8, 0x00baa +1,
    0x00bae, 0x00bb9 +1,
    0x00bbe, 0x00bc2 +1,
    0x00bc6, 0x00bc8 +1,
    0x00bca, 0x00bcc +1,
    0x00bd0, 0x00bd0 +1,
    0x00bd7, 0x00bd7 +1,
    0x00c01, 0x00c03 +1,
    0x00c05, 0x00c0c +1,
    0x00c0e, 0x00c10 +1,
    0x00c12, 0x00c28 +1,
    0x00c2a, 0x00c33 +1,
    0x00c35, 0x00c39 +1,
    0x00c3d, 0x00c44 +1,
    0x00c46, 0x00c48 +1,
    0x00c4a, 0x00c4c +1,
    0x00c55, 0x00c56 +1,
    0x00c58, 0x00c59 +1,
    0x00c60, 0x00c63 +1,
    0x00c82, 0x00c83 +1,
    0x00c85, 0x00c8c +1,
    0x00c8e, 0x00c90 +1,
    0x00c92, 0x00ca8 +1,
    0x00caa, 0x00cb3 +1,
    0x00cb5, 0x00cb9 +1,
    0x00cbd, 0x00cc4 +1,
    0x00cc6, 0x00cc8 +1,
    0x00cca, 0x00ccc +1,
    0x00cd5, 0x00cd6 +1,
    0x00cde, 0x00cde +1,
    0x00ce0, 0x00ce3 +1,
    0x00cf1, 0x00cf2 +1,
    0x00d02, 0x00d03 +1,
    0x00d05, 0x00d0c +1,
    0x00d0e, 0x00d10 +1,
    0x00d12, 0x00d3a +1,
    0x00d3d, 0x00d44 +1,
    0x00d46, 0x00d48 +1,
    0x00d4a, 0x00d4c +1,
    0x00d4e, 0x00d4e +1,
    0x00d57, 0x00d57 +1,
    0x00d60, 0x00d63 +1,
    0x00d7a, 0x00d7f +1,
    0x00d82, 0x00d83 +1,
    0x00d85, 0x00d96 +1,
    0x00d9a, 0x00db1 +1,
    0x00db3, 0x00dbb +1,
    0x00dbd, 0x00dbd +1,
    0x00dc0, 0x00dc6 +1,
    0x00dcf, 0x00dd4 +1,
    0x00dd6, 0x00dd6 +1,
    0x00dd8, 0x00ddf +1,
    0x00df2, 0x00df3 +1,
    0x00e01, 0x00e3a +1,
    0x00e40, 0x00e46 +1,
    0x00e4d, 0x00e4d +1,
    0x00e81, 0x00e82 +1,
    0x00e84, 0x00e84 +1,
    0x00e87, 0x00e88 +1,
    0x00e8a, 0x00e8a +1,
    0x00e8d, 0x00e8d +1,
    0x00e94, 0x00e97 +1,
    0x00e99, 0x00e9f +1,
    0x00ea1, 0x00ea3 +1,
    0x00ea5, 0x00ea5 +1,
    0x00ea7, 0x00ea7 +1,
    0x00eaa, 0x00eab +1,
    0x00ead, 0x00eb9 +1,
    0x00ebb, 0x00ebd +1,
    0x00ec0, 0x00ec4 +1,
    0x00ec6, 0x00ec6 +1,
    0x00ecd, 0x00ecd +1,
    0x00edc, 0x00edd +1,
    0x00f00, 0x00f00 +1,
    0x00f40, 0x00f47 +1,
    0x00f49, 0x00f6c +1,
    0x00f71, 0x00f81 +1,
    0x00f88, 0x00f97 +1,
    0x00f99, 0x00fbc +1,
    0x01000, 0x01036 +1,
    0x01038, 0x01038 +1,
    0x0103b, 0x0103f +1,
    0x01050, 0x01062 +1,
    0x01065, 0x01068 +1,
    0x0106e, 0x01086 +1,
    0x0108e, 0x0108e +1,
    0x0109c, 0x0109d +1,
    0x010a0, 0x010c5 +1,
    0x010d0, 0x010fa +1,
    0x010fc, 0x010fc +1,
    0x01100, 0x01248 +1,
    0x0124a, 0x0124d +1,
    0x01250, 0x01256 +1,
    0x01258, 0x01258 +1,
    0x0125a, 0x0125d +1,
    0x01260, 0x01288 +1,
    0x0128a, 0x0128d +1,
    0x01290, 0x012b0 +1,
    0x012b2, 0x012b5 +1,
    0x012b8, 0x012be +1,
    0x012c0, 0x012c0 +1,
    0x012c2, 0x012c5 +1,
    0x012c8, 0x012d6 +1,
    0x012d8, 0x01310 +1,
    0x01312, 0x01315 +1,
    0x01318, 0x0135a +1,
    0x0135f, 0x0135f +1,
    0x01380, 0x0138f +1,
    0x013a0, 0x013f4 +1,
    0x01401, 0x0166c +1,
    0x0166f, 0x0167f +1,
    0x01681, 0x0169a +1,
    0x016a0, 0x016ea +1,
    0x016ee, 0x016f0 +1,
    0x01700, 0x0170c +1,
    0x0170e, 0x01713 +1,
    0x01720, 0x01733 +1,
    0x01740, 0x01753 +1,
    0x01760, 0x0176c +1,
    0x0176e, 0x01770 +1,
    0x01772, 0x01773 +1,
    0x01780, 0x017b3 +1,
    0x017b6, 0x017c8 +1,
    0x017d7, 0x017d7 +1,
    0x017dc, 0x017dc +1,
    0x01820, 0x01877 +1,
    0x01880, 0x018aa +1,
    0x018b0, 0x018f5 +1,
    0x01900, 0x0191c +1,
    0x01920, 0x0192b +1,
    0x01930, 0x01938 +1,
    0x01950, 0x0196d +1,
    0x01970, 0x01974 +1,
    0x01980, 0x019ab +1,
    0x019b0, 0x019c9 +1,
    0x01a00, 0x01a1b +1,
    0x01a20, 0x01a5e +1,
    0x01a61, 0x01a74 +1,
    0x01aa7, 0x01aa7 +1,
    0x01b00, 0x01b33 +1,
    0x01b35, 0x01b43 +1,
    0x01b45, 0x01b4b +1,
    0x01b80, 0x01ba9 +1,
    0x01bae, 0x01baf +1,
    0x01bc0, 0x01be5 +1,
    0x01be7, 0x01bf1 +1,
    0x01c00, 0x01c35 +1,
    0x01c4d, 0x01c4f +1,
    0x01c5a, 0x01c7d +1,
    0x01ce9, 0x01cec +1,
    0x01cee, 0x01cf2 +1,
    0x01d00, 0x01dbf +1,
    0x01e00, 0x01f15 +1,
    0x01f18, 0x01f1d +1,
    0x01f20, 0x01f45 +1,
    0x01f48, 0x01f4d +1,
    0x01f50, 0x01f57 +1,
    0x01f59, 0x01f59 +1,
    0x01f5b, 0x01f5b +1,
    0x01f5d, 0x01f5d +1,
    0x01f5f, 0x01f7d +1,
    0x01f80, 0x01fb4 +1,
    0x01fb6, 0x01fbc +1,
    0x01fbe, 0x01fbe +1,
    0x01fc2, 0x01fc4 +1,
    0x01fc6, 0x01fcc +1,
    0x01fd0, 0x01fd3 +1,
    0x01fd6, 0x01fdb +1,
    0x01fe0, 0x01fec +1,
    0x01ff2, 0x01ff4 +1,
    0x01ff6, 0x01ffc +1,
    0x02071, 0x02071 +1,
    0x0207f, 0x0207f +1,
    0x02090, 0x0209c +1,
    0x02102, 0x02102 +1,
    0x02107, 0x02107 +1,
    0x0210a, 0x02113 +1,
    0x02115, 0x02115 +1,
    0x02119, 0x0211d +1,
    0x02124, 0x02124 +1,
    0x02126, 0x02126 +1,
    0x02128, 0x02128 +1,
    0x0212a, 0x0212d +1,
    0x0212f, 0x02139 +1,
    0x0213c, 0x0213f +1,
    0x02145, 0x02149 +1,
    0x0214e, 0x0214e +1,
    0x02160, 0x02188 +1,
    0x024b6, 0x024e9 +1,
    0x02c00, 0x02c2e +1,
    0x02c30, 0x02c5e +1,
    0x02c60, 0x02ce4 +1,
    0x02ceb, 0x02cee +1,
    0x02d00, 0x02d25 +1,
    0x02d30, 0x02d65 +1,
    0x02d6f, 0x02d6f +1,
    0x02d80, 0x02d96 +1,
    0x02da0, 0x02da6 +1,
    0x02da8, 0x02dae +1,
    0x02db0, 0x02db6 +1,
    0x02db8, 0x02dbe +1,
    0x02dc0, 0x02dc6 +1,
    0x02dc8, 0x02dce +1,
    0x02dd0, 0x02dd6 +1,
    0x02dd8, 0x02dde +1,
    0x02de0, 0x02dff +1,
    0x02e2f, 0x02e2f +1,
    0x03005, 0x03007 +1,
    0x03021, 0x03029 +1,
    0x03031, 0x03035 +1,
    0x03038, 0x0303c +1,
    0x03041, 0x03096 +1,
    0x0309d, 0x0309f +1,
    0x030a1, 0x030fa +1,
    0x030fc, 0x030ff +1,
    0x03105, 0x0312d +1,
    0x03131, 0x0318e +1,
    0x031a0, 0x031ba +1,
    0x031f0, 0x031ff +1,
    0x03400, 0x04db5 +1,
    0x04e00, 0x09fcb +1,
    0x0a000, 0x0a48c +1,
    0x0a4d0, 0x0a4fd +1,
    0x0a500, 0x0a60c +1,
    0x0a610, 0x0a61f +1,
    0x0a62a, 0x0a62b +1,
    0x0a640, 0x0a66e +1,
    0x0a67f, 0x0a697 +1,
    0x0a6a0, 0x0a6ef +1,
    0x0a717, 0x0a71f +1,
    0x0a722, 0x0a788 +1,
    0x0a78b, 0x0a78e +1,
    0x0a790, 0x0a791 +1,
    0x0a7a0, 0x0a7a9 +1,
    0x0a7fa, 0x0a801 +1,
    0x0a803, 0x0a805 +1,
    0x0a807, 0x0a80a +1,
    0x0a80c, 0x0a827 +1,
    0x0a840, 0x0a873 +1,
    0x0a880, 0x0a8c3 +1,
    0x0a8f2, 0x0a8f7 +1,
    0x0a8fb, 0x0a8fb +1,
    0x0a90a, 0x0a92a +1,
    0x0a930, 0x0a952 +1,
    0x0a960, 0x0a97c +1,
    0x0a980, 0x0a9b2 +1,
    0x0a9b4, 0x0a9bf +1,
    0x0a9cf, 0x0a9cf +1,
    0x0aa00, 0x0aa36 +1,
    0x0aa40, 0x0aa4d +1,
    0x0aa60, 0x0aa76 +1,
    0x0aa7a, 0x0aa7a +1,
    0x0aa80, 0x0aabe +1,
    0x0aac0, 0x0aac0 +1,
    0x0aac2, 0x0aac2 +1,
    0x0aadb, 0x0aadd +1,
    0x0ab01, 0x0ab06 +1,
    0x0ab09, 0x0ab0e +1,
    0x0ab11, 0x0ab16 +1,
    0x0ab20, 0x0ab26 +1,
    0x0ab28, 0x0ab2e +1,
    0x0abc0, 0x0abea +1,
    0x0ac00, 0x0d7a3 +1,
    0x0d7b0, 0x0d7c6 +1,
    0x0d7cb, 0x0d7fb +1,
    0x0f900, 0x0fa2d +1,
    0x0fa30, 0x0fa6d +1,
    0x0fa70, 0x0fad9 +1,
    0x0fb00, 0x0fb06 +1,
    0x0fb13, 0x0fb17 +1,
    0x0fb1d, 0x0fb28 +1,
    0x0fb2a, 0x0fb36 +1,
    0x0fb38, 0x0fb3c +1,
    0x0fb3e, 0x0fb3e +1,
    0x0fb40, 0x0fb41 +1,
    0x0fb43, 0x0fb44 +1,
    0x0fb46, 0x0fbb1 +1,
    0x0fbd3, 0x0fd3d +1,
    0x0fd50, 0x0fd8f +1,
    0x0fd92, 0x0fdc7 +1,
    0x0fdf0, 0x0fdfb +1,
    0x0fe70, 0x0fe74 +1,
    0x0fe76, 0x0fefc +1,
    0x0ff21, 0x0ff3a +1,
    0x0ff41, 0x0ff5a +1,
    0x0ff66, 0x0ffbe +1,
    0x0ffc2, 0x0ffc7 +1,
    0x0ffca, 0x0ffcf +1,
    0x0ffd2, 0x0ffd7 +1,
    0x0ffda, 0x0ffdc +1,
    0x10000, 0x1000b +1,
    0x1000d, 0x10026 +1,
    0x10028, 0x1003a +1,
    0x1003c, 0x1003d +1,
    0x1003f, 0x1004d +1,
    0x10050, 0x1005d +1,
    0x10080, 0x100fa +1,
    0x10140, 0x10174 +1,
    0x10280, 0x1029c +1,
    0x102a0, 0x102d0 +1,
    0x10300, 0x1031e +1,
    0x10330, 0x1034a +1,
    0x10380, 0x1039d +1,
    0x103a0, 0x103c3 +1,
    0x103c8, 0x103cf +1,
    0x103d1, 0x103d5 +1,
    0x10400, 0x1049d +1,
    0x10800, 0x10805 +1,
    0x10808, 0x10808 +1,
    0x1080a, 0x10835 +1,
    0x10837, 0x10838 +1,
    0x1083c, 0x1083c +1,
    0x1083f, 0x10855 +1,
    0x10900, 0x10915 +1,
    0x10920, 0x10939 +1,
    0x10a00, 0x10a03 +1,
    0x10a05, 0x10a06 +1,
    0x10a0c, 0x10a13 +1,
    0x10a15, 0x10a17 +1,
    0x10a19, 0x10a33 +1,
    0x10a60, 0x10a7c +1,
    0x10b00, 0x10b35 +1,
    0x10b40, 0x10b55 +1,
    0x10b60, 0x10b72 +1,
    0x10c00, 0x10c48 +1,
    0x11000, 0x11045 +1,
    0x11082, 0x110b8 +1,
    0x12000, 0x1236e +1,
    0x12400, 0x12462 +1,
    0x13000, 0x1342e +1,
    0x16800, 0x16a38 +1,
    0x1b000, 0x1b001 +1,
    0x1d400, 0x1d454 +1,
    0x1d456, 0x1d49c +1,
    0x1d49e, 0x1d49f +1,
    0x1d4a2, 0x1d4a2 +1,
    0x1d4a5, 0x1d4a6 +1,
    0x1d4a9, 0x1d4ac +1,
    0x1d4ae, 0x1d4b9 +1,
    0x1d4bb, 0x1d4bb +1,
    0x1d4bd, 0x1d4c3 +1,
    0x1d4c5, 0x1d505 +1,
    0x1d507, 0x1d50a +1,
    0x1d50d, 0x1d514 +1,
    0x1d516, 0x1d51c +1,
    0x1d51e, 0x1d539 +1,
    0x1d53b, 0x1d53e +1,
    0x1d540, 0x1d544 +1,
    0x1d546, 0x1d546 +1,
    0x1d54a, 0x1d550 +1,
    0x1d552, 0x1d6a5 +1,
    0x1d6a8, 0x1d6c0 +1,
    0x1d6c2, 0x1d6da +1,
    0x1d6dc, 0x1d6fa +1,
    0x1d6fc, 0x1d714 +1,
    0x1d716, 0x1d734 +1,
    0x1d736, 0x1d74e +1,
    0x1d750, 0x1d76e +1,
    0x1d770, 0x1d788 +1,
    0x1d78a, 0x1d7a8 +1,
    0x1d7aa, 0x1d7c2 +1,
    0x1d7c4, 0x1d7cb +1,
    0x20000, 0x2a6d6 +1,
    0x2a700, 0x2b734 +1,
    0x2b740, 0x2b81d +1,
    0x2f800, 0x2fa1d +1,
]);

immutable(Charset) unicodeBalinese = Charset([
    0x01b00, 0x01b4b +1,
    0x01b50, 0x01b7c +1,
]);

immutable unicodeProperties = [
UnicodeProperty("Alphabetic", unicodeAlphabetic),
UnicodeProperty("Arabic", unicodeArabic),
UnicodeProperty("Armenian", unicodeArmenian),
UnicodeProperty("ASCII_Hex_Digit", unicodeASCII_Hex_Digit),
UnicodeProperty("Avestan", unicodeAvestan),
UnicodeProperty("Balinese", unicodeBalinese),
UnicodeProperty("Bamum", unicodeBamum),
UnicodeProperty("Batak", unicodeBatak),
UnicodeProperty("Bengali", unicodeBengali),
UnicodeProperty("Bidi_Control", unicodeBidi_Control),
UnicodeProperty("Bopomofo", unicodeBopomofo),
UnicodeProperty("Brahmi", unicodeBrahmi),
UnicodeProperty("Braille", unicodeBraille),
UnicodeProperty("Buginese", unicodeBuginese),
UnicodeProperty("Buhid", unicodeBuhid),
UnicodeProperty("Canadian_Aboriginal", unicodeCanadian_Aboriginal),
UnicodeProperty("Carian", unicodeCarian),
UnicodeProperty("Cc", unicodeCc),
UnicodeProperty("Cf", unicodeCf),
UnicodeProperty("Cham", unicodeCham),
UnicodeProperty("Cherokee", unicodeCherokee),
UnicodeProperty("Close_Punctuation", unicodePe),
UnicodeProperty("Cn", unicodeCn),
UnicodeProperty("Co", unicodeCo),
UnicodeProperty("Common", unicodeCommon),
UnicodeProperty("Connector_Punctuation", unicodePc),
UnicodeProperty("Control", unicodeCc),
UnicodeProperty("Coptic", unicodeCoptic),
UnicodeProperty("Cs", unicodeCs),
UnicodeProperty("Cuneiform", unicodeCuneiform),
UnicodeProperty("Currency_Symbol", unicodeSc),
UnicodeProperty("Cypriot", unicodeCypriot),
UnicodeProperty("Cyrillic", unicodeCyrillic),
UnicodeProperty("Dash", unicodeDash),
UnicodeProperty("Dash_Punctuation", unicodePd),
UnicodeProperty("Decimal_Number", unicodeNd),
UnicodeProperty("Deprecated", unicodeDeprecated),
UnicodeProperty("Deseret", unicodeDeseret),
UnicodeProperty("Devanagari", unicodeDevanagari),
UnicodeProperty("Diacritic", unicodeDiacritic),
UnicodeProperty("Egyptian_Hieroglyphs", unicodeEgyptian_Hieroglyphs),
UnicodeProperty("Enclosing_Mark", unicodeMe),
UnicodeProperty("Ethiopic", unicodeEthiopic),
UnicodeProperty("Extender", unicodeExtender),
UnicodeProperty("Final_Punctuation", unicodePf),
UnicodeProperty("Format", unicodeCf),
UnicodeProperty("Georgian", unicodeGeorgian),
UnicodeProperty("Glagolitic", unicodeGlagolitic),
UnicodeProperty("Gothic", unicodeGothic),
UnicodeProperty("Greek", unicodeGreek),
UnicodeProperty("Gujarati", unicodeGujarati),
UnicodeProperty("Gurmukhi", unicodeGurmukhi),
UnicodeProperty("Han", unicodeHan),
UnicodeProperty("Hangul", unicodeHangul),
UnicodeProperty("Hanunoo", unicodeHanunoo),
UnicodeProperty("Hebrew", unicodeHebrew),
UnicodeProperty("Hex_Digit", unicodeHex_Digit),
UnicodeProperty("Hiragana", unicodeHiragana),
UnicodeProperty("Hyphen", unicodeHyphen),
UnicodeProperty("Ideographic", unicodeIdeographic),
UnicodeProperty("IDS_Binary_Operator", unicodeIDS_Binary_Operator),
UnicodeProperty("IDS_Trinary_Operator", unicodeIDS_Trinary_Operator),
UnicodeProperty("Imperial_Aramaic", unicodeImperial_Aramaic),
UnicodeProperty("InAegean Numbers", unicodeInAegean_Numbers),
UnicodeProperty("InAlchemical Symbols", unicodeInAlchemical_Symbols),
UnicodeProperty("InAlphabetic Presentation Forms", unicodeInAlphabetic_Presentation_Forms),
UnicodeProperty("InAncient Greek Musical Notation", unicodeInAncient_Greek_Musical_Notation),
UnicodeProperty("InAncient Greek Numbers", unicodeInAncient_Greek_Numbers),
UnicodeProperty("InAncient Symbols", unicodeInAncient_Symbols),
UnicodeProperty("InArabic", unicodeInArabic),
UnicodeProperty("InArabic Presentation Forms-A", unicodeInArabic_Presentation_Forms_A),
UnicodeProperty("InArabic Presentation Forms-B", unicodeInArabic_Presentation_Forms_B),
UnicodeProperty("InArabic Supplement", unicodeInArabic_Supplement),
UnicodeProperty("InArmenian", unicodeInArmenian),
UnicodeProperty("InArrows", unicodeInArrows),
UnicodeProperty("InAvestan", unicodeInAvestan),
UnicodeProperty("InBalinese", unicodeInBalinese),
UnicodeProperty("InBamum", unicodeInBamum),
UnicodeProperty("InBamum Supplement", unicodeInBamum_Supplement),
UnicodeProperty("InBasic Latin", unicodeInBasic_Latin),
UnicodeProperty("InBatak", unicodeInBatak),
UnicodeProperty("InBengali", unicodeInBengali),
UnicodeProperty("InBlock Elements", unicodeInBlock_Elements),
UnicodeProperty("InBopomofo", unicodeInBopomofo),
UnicodeProperty("InBopomofo Extended", unicodeInBopomofo_Extended),
UnicodeProperty("InBox Drawing", unicodeInBox_Drawing),
UnicodeProperty("InBrahmi", unicodeInBrahmi),
UnicodeProperty("InBraille Patterns", unicodeInBraille_Patterns),
UnicodeProperty("InBuginese", unicodeInBuginese),
UnicodeProperty("InBuhid", unicodeInBuhid),
UnicodeProperty("InByzantine Musical Symbols", unicodeInByzantine_Musical_Symbols),
UnicodeProperty("InCarian", unicodeInCarian),
UnicodeProperty("InCham", unicodeInCham),
UnicodeProperty("InCherokee", unicodeInCherokee),
UnicodeProperty("InCJK Compatibility", unicodeInCJK_Compatibility),
UnicodeProperty("InCJK Compatibility Forms", unicodeInCJK_Compatibility_Forms),
UnicodeProperty("InCJK Compatibility Ideographs", unicodeInCJK_Compatibility_Ideographs),
UnicodeProperty("InCJK Compatibility Ideographs Supplement", unicodeInCJK_Compatibility_Ideographs_Supplement),
UnicodeProperty("InCJK Radicals Supplement", unicodeInCJK_Radicals_Supplement),
UnicodeProperty("InCJK Strokes", unicodeInCJK_Strokes),
UnicodeProperty("InCJK Symbols and Punctuation", unicodeInCJK_Symbols_and_Punctuation),
UnicodeProperty("InCJK Unified Ideographs", unicodeInCJK_Unified_Ideographs),
UnicodeProperty("InCJK Unified Ideographs Extension A", unicodeInCJK_Unified_Ideographs_Extension_A),
UnicodeProperty("InCJK Unified Ideographs Extension B", unicodeInCJK_Unified_Ideographs_Extension_B),
UnicodeProperty("InCJK Unified Ideographs Extension C", unicodeInCJK_Unified_Ideographs_Extension_C),
UnicodeProperty("InCJK Unified Ideographs Extension D", unicodeInCJK_Unified_Ideographs_Extension_D),
UnicodeProperty("InCombining Diacritical Marks", unicodeInCombining_Diacritical_Marks),
UnicodeProperty("InCombining Diacritical Marks for Symbols", unicodeInCombining_Diacritical_Marks_for_Symbols),
UnicodeProperty("InCombining Diacritical Marks Supplement", unicodeInCombining_Diacritical_Marks_Supplement),
UnicodeProperty("InCombining Half Marks", unicodeInCombining_Half_Marks),
UnicodeProperty("InCommon Indic Number Forms", unicodeInCommon_Indic_Number_Forms),
UnicodeProperty("InControl Pictures", unicodeInControl_Pictures),
UnicodeProperty("InCoptic", unicodeInCoptic),
UnicodeProperty("InCounting Rod Numerals", unicodeInCounting_Rod_Numerals),
UnicodeProperty("InCuneiform", unicodeInCuneiform),
UnicodeProperty("InCuneiform Numbers and Punctuation", unicodeInCuneiform_Numbers_and_Punctuation),
UnicodeProperty("InCurrency Symbols", unicodeInCurrency_Symbols),
UnicodeProperty("InCypriot Syllabary", unicodeInCypriot_Syllabary),
UnicodeProperty("InCyrillic", unicodeInCyrillic),
UnicodeProperty("InCyrillic Extended-A", unicodeInCyrillic_Extended_A),
UnicodeProperty("InCyrillic Extended-B", unicodeInCyrillic_Extended_B),
UnicodeProperty("InCyrillic Supplement", unicodeInCyrillic_Supplement),
UnicodeProperty("InDeseret", unicodeInDeseret),
UnicodeProperty("InDevanagari", unicodeInDevanagari),
UnicodeProperty("InDevanagari Extended", unicodeInDevanagari_Extended),
UnicodeProperty("InDingbats", unicodeInDingbats),
UnicodeProperty("InDomino Tiles", unicodeInDomino_Tiles),
UnicodeProperty("InEgyptian Hieroglyphs", unicodeInEgyptian_Hieroglyphs),
UnicodeProperty("InEmoticons", unicodeInEmoticons),
UnicodeProperty("InEnclosed Alphanumerics", unicodeInEnclosed_Alphanumerics),
UnicodeProperty("InEnclosed Alphanumeric Supplement", unicodeInEnclosed_Alphanumeric_Supplement),
UnicodeProperty("InEnclosed CJK Letters and Months", unicodeInEnclosed_CJK_Letters_and_Months),
UnicodeProperty("InEnclosed Ideographic Supplement", unicodeInEnclosed_Ideographic_Supplement),
UnicodeProperty("InEthiopic", unicodeInEthiopic),
UnicodeProperty("InEthiopic Extended", unicodeInEthiopic_Extended),
UnicodeProperty("InEthiopic Extended-A", unicodeInEthiopic_Extended_A),
UnicodeProperty("InEthiopic Supplement", unicodeInEthiopic_Supplement),
UnicodeProperty("InGeneral Punctuation", unicodeInGeneral_Punctuation),
UnicodeProperty("InGeometric Shapes", unicodeInGeometric_Shapes),
UnicodeProperty("InGeorgian", unicodeInGeorgian),
UnicodeProperty("InGeorgian Supplement", unicodeInGeorgian_Supplement),
UnicodeProperty("InGlagolitic", unicodeInGlagolitic),
UnicodeProperty("InGothic", unicodeInGothic),
UnicodeProperty("InGreek and Coptic", unicodeInGreek_and_Coptic),
UnicodeProperty("InGreek Extended", unicodeInGreek_Extended),
UnicodeProperty("InGujarati", unicodeInGujarati),
UnicodeProperty("InGurmukhi", unicodeInGurmukhi),
UnicodeProperty("InHalfwidth and Fullwidth Forms", unicodeInHalfwidth_and_Fullwidth_Forms),
UnicodeProperty("InHangul Compatibility Jamo", unicodeInHangul_Compatibility_Jamo),
UnicodeProperty("InHangul Jamo", unicodeInHangul_Jamo),
UnicodeProperty("InHangul Jamo Extended-A", unicodeInHangul_Jamo_Extended_A),
UnicodeProperty("InHangul Jamo Extended-B", unicodeInHangul_Jamo_Extended_B),
UnicodeProperty("InHangul Syllables", unicodeInHangul_Syllables),
UnicodeProperty("InHanunoo", unicodeInHanunoo),
UnicodeProperty("InHebrew", unicodeInHebrew),
UnicodeProperty("Inherited", unicodeInherited),
UnicodeProperty("InHigh Private Use Surrogates", unicodeInHigh_Private_Use_Surrogates),
UnicodeProperty("InHigh Surrogates", unicodeInHigh_Surrogates),
UnicodeProperty("InHiragana", unicodeInHiragana),
UnicodeProperty("InIdeographic Description Characters", unicodeInIdeographic_Description_Characters),
UnicodeProperty("InImperial Aramaic", unicodeInImperial_Aramaic),
UnicodeProperty("InInscriptional Pahlavi", unicodeInInscriptional_Pahlavi),
UnicodeProperty("InInscriptional Parthian", unicodeInInscriptional_Parthian),
UnicodeProperty("InIPA Extensions", unicodeInIPA_Extensions),
UnicodeProperty("Initial_Punctuation", unicodePi),
UnicodeProperty("InJavanese", unicodeInJavanese),
UnicodeProperty("InKaithi", unicodeInKaithi),
UnicodeProperty("InKana Supplement", unicodeInKana_Supplement),
UnicodeProperty("InKanbun", unicodeInKanbun),
UnicodeProperty("InKangxi Radicals", unicodeInKangxi_Radicals),
UnicodeProperty("InKannada", unicodeInKannada),
UnicodeProperty("InKatakana", unicodeInKatakana),
UnicodeProperty("InKatakana Phonetic Extensions", unicodeInKatakana_Phonetic_Extensions),
UnicodeProperty("InKayah Li", unicodeInKayah_Li),
UnicodeProperty("InKharoshthi", unicodeInKharoshthi),
UnicodeProperty("InKhmer", unicodeInKhmer),
UnicodeProperty("InKhmer Symbols", unicodeInKhmer_Symbols),
UnicodeProperty("InLao", unicodeInLao),
UnicodeProperty("InLatin-1 Supplement", unicodeInLatin_1_Supplement),
UnicodeProperty("InLatin Extended-A", unicodeInLatin_Extended_A),
UnicodeProperty("InLatin Extended Additional", unicodeInLatin_Extended_Additional),
UnicodeProperty("InLatin Extended-B", unicodeInLatin_Extended_B),
UnicodeProperty("InLatin Extended-C", unicodeInLatin_Extended_C),
UnicodeProperty("InLatin Extended-D", unicodeInLatin_Extended_D),
UnicodeProperty("InLepcha", unicodeInLepcha),
UnicodeProperty("InLetterlike Symbols", unicodeInLetterlike_Symbols),
UnicodeProperty("InLimbu", unicodeInLimbu),
UnicodeProperty("InLinear B Ideograms", unicodeInLinear_B_Ideograms),
UnicodeProperty("InLinear B Syllabary", unicodeInLinear_B_Syllabary),
UnicodeProperty("InLisu", unicodeInLisu),
UnicodeProperty("InLow Surrogates", unicodeInLow_Surrogates),
UnicodeProperty("InLycian", unicodeInLycian),
UnicodeProperty("InLydian", unicodeInLydian),
UnicodeProperty("InMahjong Tiles", unicodeInMahjong_Tiles),
UnicodeProperty("InMalayalam", unicodeInMalayalam),
UnicodeProperty("InMandaic", unicodeInMandaic),
UnicodeProperty("InMathematical Alphanumeric Symbols", unicodeInMathematical_Alphanumeric_Symbols),
UnicodeProperty("InMathematical Operators", unicodeInMathematical_Operators),
UnicodeProperty("InMeetei Mayek", unicodeInMeetei_Mayek),
UnicodeProperty("InMiscellaneous Mathematical Symbols-A", unicodeInMiscellaneous_Mathematical_Symbols_A),
UnicodeProperty("InMiscellaneous Mathematical Symbols-B", unicodeInMiscellaneous_Mathematical_Symbols_B),
UnicodeProperty("InMiscellaneous Symbols", unicodeInMiscellaneous_Symbols),
UnicodeProperty("InMiscellaneous Symbols and Arrows", unicodeInMiscellaneous_Symbols_and_Arrows),
UnicodeProperty("InMiscellaneous Symbols And Pictographs", unicodeInMiscellaneous_Symbols_And_Pictographs),
UnicodeProperty("InMiscellaneous Technical", unicodeInMiscellaneous_Technical),
UnicodeProperty("InModifier Tone Letters", unicodeInModifier_Tone_Letters),
UnicodeProperty("InMongolian", unicodeInMongolian),
UnicodeProperty("InMusical Symbols", unicodeInMusical_Symbols),
UnicodeProperty("InMyanmar", unicodeInMyanmar),
UnicodeProperty("InMyanmar Extended-A", unicodeInMyanmar_Extended_A),
UnicodeProperty("InNew Tai Lue", unicodeInNew_Tai_Lue),
UnicodeProperty("InNKo", unicodeInNKo),
UnicodeProperty("InNumber Forms", unicodeInNumber_Forms),
UnicodeProperty("InOgham", unicodeInOgham),
UnicodeProperty("InOl Chiki", unicodeInOl_Chiki),
UnicodeProperty("InOld Italic", unicodeInOld_Italic),
UnicodeProperty("InOld Persian", unicodeInOld_Persian),
UnicodeProperty("InOld South Arabian", unicodeInOld_South_Arabian),
UnicodeProperty("InOld Turkic", unicodeInOld_Turkic),
UnicodeProperty("InOptical Character Recognition", unicodeInOptical_Character_Recognition),
UnicodeProperty("InOriya", unicodeInOriya),
UnicodeProperty("InOsmanya", unicodeInOsmanya),
UnicodeProperty("InPhags-pa", unicodeInPhags_pa),
UnicodeProperty("InPhaistos Disc", unicodeInPhaistos_Disc),
UnicodeProperty("InPhoenician", unicodeInPhoenician),
UnicodeProperty("InPhonetic Extensions", unicodeInPhonetic_Extensions),
UnicodeProperty("InPhonetic Extensions Supplement", unicodeInPhonetic_Extensions_Supplement),
UnicodeProperty("InPlaying Cards", unicodeInPlaying_Cards),
UnicodeProperty("InPrivate Use Area", unicodeInPrivate_Use_Area),
UnicodeProperty("InRejang", unicodeInRejang),
UnicodeProperty("InRumi Numeral Symbols", unicodeInRumi_Numeral_Symbols),
UnicodeProperty("InRunic", unicodeInRunic),
UnicodeProperty("InSamaritan", unicodeInSamaritan),
UnicodeProperty("InSaurashtra", unicodeInSaurashtra),
UnicodeProperty("Inscriptional_Pahlavi", unicodeInscriptional_Pahlavi),
UnicodeProperty("Inscriptional_Parthian", unicodeInscriptional_Parthian),
UnicodeProperty("InShavian", unicodeInShavian),
UnicodeProperty("InSinhala", unicodeInSinhala),
UnicodeProperty("InSmall Form Variants", unicodeInSmall_Form_Variants),
UnicodeProperty("InSpacing Modifier Letters", unicodeInSpacing_Modifier_Letters),
UnicodeProperty("InSpecials", unicodeInSpecials),
UnicodeProperty("InSundanese", unicodeInSundanese),
UnicodeProperty("InSuperscripts and Subscripts", unicodeInSuperscripts_and_Subscripts),
UnicodeProperty("InSupplemental Arrows-A", unicodeInSupplemental_Arrows_A),
UnicodeProperty("InSupplemental Arrows-B", unicodeInSupplemental_Arrows_B),
UnicodeProperty("InSupplemental Mathematical Operators", unicodeInSupplemental_Mathematical_Operators),
UnicodeProperty("InSupplemental Punctuation", unicodeInSupplemental_Punctuation),
UnicodeProperty("InSupplementary Private Use Area-A", unicodeInSupplementary_Private_Use_Area_A),
UnicodeProperty("InSupplementary Private Use Area-B", unicodeInSupplementary_Private_Use_Area_B),
UnicodeProperty("InSyloti Nagri", unicodeInSyloti_Nagri),
UnicodeProperty("InSyriac", unicodeInSyriac),
UnicodeProperty("InTagalog", unicodeInTagalog),
UnicodeProperty("InTagbanwa", unicodeInTagbanwa),
UnicodeProperty("InTags", unicodeInTags),
UnicodeProperty("InTai Le", unicodeInTai_Le),
UnicodeProperty("InTai Tham", unicodeInTai_Tham),
UnicodeProperty("InTai Viet", unicodeInTai_Viet),
UnicodeProperty("InTai Xuan Jing Symbols", unicodeInTai_Xuan_Jing_Symbols),
UnicodeProperty("InTamil", unicodeInTamil),
UnicodeProperty("InTelugu", unicodeInTelugu),
UnicodeProperty("InThaana", unicodeInThaana),
UnicodeProperty("InThai", unicodeInThai),
UnicodeProperty("InTibetan", unicodeInTibetan),
UnicodeProperty("InTifinagh", unicodeInTifinagh),
UnicodeProperty("InTransport And Map Symbols", unicodeInTransport_And_Map_Symbols),
UnicodeProperty("InUgaritic", unicodeInUgaritic),
UnicodeProperty("InUnified Canadian Aboriginal Syllabics", unicodeInUnified_Canadian_Aboriginal_Syllabics),
UnicodeProperty("InUnified Canadian Aboriginal Syllabics Extended", unicodeInUnified_Canadian_Aboriginal_Syllabics_Extended),
UnicodeProperty("InVai", unicodeInVai),
UnicodeProperty("InVariation Selectors", unicodeInVariation_Selectors),
UnicodeProperty("InVariation Selectors Supplement", unicodeInVariation_Selectors_Supplement),
UnicodeProperty("InVedic Extensions", unicodeInVedic_Extensions),
UnicodeProperty("InVertical Forms", unicodeInVertical_Forms),
UnicodeProperty("InYijing Hexagram Symbols", unicodeInYijing_Hexagram_Symbols),
UnicodeProperty("InYi Radicals", unicodeInYi_Radicals),
UnicodeProperty("InYi Syllables", unicodeInYi_Syllables),
UnicodeProperty("Javanese", unicodeJavanese),
UnicodeProperty("Join_Control", unicodeJoin_Control),
UnicodeProperty("Kaithi", unicodeKaithi),
UnicodeProperty("Kannada", unicodeKannada),
UnicodeProperty("Katakana", unicodeKatakana),
UnicodeProperty("Kayah_Li", unicodeKayah_Li),
UnicodeProperty("Kharoshthi", unicodeKharoshthi),
UnicodeProperty("Khmer", unicodeKhmer),
UnicodeProperty("Lao", unicodeLao),
UnicodeProperty("Latin", unicodeLatin),
UnicodeProperty("Lepcha", unicodeLepcha),
UnicodeProperty("Letter_Number", unicodeNl),
UnicodeProperty("Limbu", unicodeLimbu),
UnicodeProperty("Linear_B", unicodeLinear_B),
UnicodeProperty("Line_Separator", unicodeZl),
UnicodeProperty("Lisu", unicodeLisu),
UnicodeProperty("Lm", unicodeLm),
UnicodeProperty("Lo", unicodeLo),
UnicodeProperty("Logical_Order_Exception", unicodeLogical_Order_Exception),
UnicodeProperty("Lt", unicodeLt),
UnicodeProperty("Lycian", unicodeLycian),
UnicodeProperty("Lydian", unicodeLydian),
UnicodeProperty("Malayalam", unicodeMalayalam),
UnicodeProperty("Mandaic", unicodeMandaic),
UnicodeProperty("Math", unicodeMath),
UnicodeProperty("Math_Symbol", unicodeSm),
UnicodeProperty("Mc", unicodeMc),
UnicodeProperty("Me", unicodeMe),
UnicodeProperty("Meetei_Mayek", unicodeMeetei_Mayek),
UnicodeProperty("Mn", unicodeMn),
UnicodeProperty("Modifier_Letter", unicodeLm),
UnicodeProperty("Modifier_Symbol", unicodeSk),
UnicodeProperty("Mongolian", unicodeMongolian),
UnicodeProperty("Myanmar", unicodeMyanmar),
UnicodeProperty("Nd", unicodeNd),
UnicodeProperty("New_Tai_Lue", unicodeNew_Tai_Lue),
UnicodeProperty("Nko", unicodeNko),
UnicodeProperty("Nl", unicodeNl),
UnicodeProperty("No", unicodeNo),
UnicodeProperty("Noncharacter_Code_Point", unicodeNoncharacter_Code_Point),
UnicodeProperty("Nonspacing_Mark", unicodeMn),
UnicodeProperty("Ogham", unicodeOgham),
UnicodeProperty("Ol_Chiki", unicodeOl_Chiki),
UnicodeProperty("Old_Italic", unicodeOld_Italic),
UnicodeProperty("Old_Persian", unicodeOld_Persian),
UnicodeProperty("Old_South_Arabian", unicodeOld_South_Arabian),
UnicodeProperty("Old_Turkic", unicodeOld_Turkic),
UnicodeProperty("Open_Punctuation", unicodePs),
UnicodeProperty("Oriya", unicodeOriya),
UnicodeProperty("Osmanya", unicodeOsmanya),
UnicodeProperty("Other_Alphabetic", unicodeOther_Alphabetic),
UnicodeProperty("Other_Default_Ignorable_Code_Point", unicodeOther_Default_Ignorable_Code_Point),
UnicodeProperty("Other_Grapheme_Extend", unicodeOther_Grapheme_Extend),
UnicodeProperty("Other_ID_Continue", unicodeOther_ID_Continue),
UnicodeProperty("Other_ID_Start", unicodeOther_ID_Start),
UnicodeProperty("Other_Letter", unicodeLo),
UnicodeProperty("Other_Lowercase", unicodeOther_Lowercase),
UnicodeProperty("Other_Math", unicodeOther_Math),
UnicodeProperty("Other_Number", unicodeNo),
UnicodeProperty("Other_Punctuation", unicodePo),
UnicodeProperty("Other_Symbol", unicodeSo),
UnicodeProperty("Other_Uppercase", unicodeOther_Uppercase),
UnicodeProperty("Paragraph_Separator", unicodeZp),
UnicodeProperty("Pattern_Syntax", unicodePattern_Syntax),
UnicodeProperty("Pattern_White_Space", unicodePattern_White_Space),
UnicodeProperty("Pc", unicodePc),
UnicodeProperty("Pd", unicodePd),
UnicodeProperty("Pe", unicodePe),
UnicodeProperty("Pf", unicodePf),
UnicodeProperty("Phags_Pa", unicodePhags_Pa),
UnicodeProperty("Phoenician", unicodePhoenician),
UnicodeProperty("Pi", unicodePi),
UnicodeProperty("Po", unicodePo),
UnicodeProperty("Private_Use", unicodeCo),
UnicodeProperty("Ps", unicodePs),
UnicodeProperty("Quotation_Mark", unicodeQuotation_Mark),
UnicodeProperty("Radical", unicodeRadical),
UnicodeProperty("Rejang", unicodeRejang),
UnicodeProperty("Runic", unicodeRunic),
UnicodeProperty("Samaritan", unicodeSamaritan),
UnicodeProperty("Saurashtra", unicodeSaurashtra),
UnicodeProperty("Sc", unicodeSc),
UnicodeProperty("Shavian", unicodeShavian),
UnicodeProperty("Sinhala", unicodeSinhala),
UnicodeProperty("Sk", unicodeSk),
UnicodeProperty("Sm", unicodeSm),
UnicodeProperty("So", unicodeSo),
UnicodeProperty("Soft_Dotted", unicodeSoft_Dotted),
UnicodeProperty("Space_Separator", unicodeZs),
UnicodeProperty("Spacing_Mark", unicodeMc),
UnicodeProperty("STerm", unicodeSTerm),
UnicodeProperty("Sundanese", unicodeSundanese),
UnicodeProperty("Surrogate", unicodeCs),
UnicodeProperty("Syloti_Nagri", unicodeSyloti_Nagri),
UnicodeProperty("Syriac", unicodeSyriac),
UnicodeProperty("Tagalog", unicodeTagalog),
UnicodeProperty("Tagbanwa", unicodeTagbanwa),
UnicodeProperty("Tai_Le", unicodeTai_Le),
UnicodeProperty("Tai_Tham", unicodeTai_Tham),
UnicodeProperty("Tai_Viet", unicodeTai_Viet),
UnicodeProperty("Tamil", unicodeTamil),
UnicodeProperty("Telugu", unicodeTelugu),
UnicodeProperty("Terminal_Punctuation", unicodeTerminal_Punctuation),
UnicodeProperty("Thaana", unicodeThaana),
UnicodeProperty("Thai", unicodeThai),
UnicodeProperty("Tibetan", unicodeTibetan),
UnicodeProperty("Tifinagh", unicodeTifinagh),
UnicodeProperty("Titlecase_Letter", unicodeLt),
UnicodeProperty("Ugaritic", unicodeUgaritic),
UnicodeProperty("Unassigned", unicodeCn),
UnicodeProperty("Unified_Ideograph", unicodeUnified_Ideograph),
UnicodeProperty("Vai", unicodeVai),
UnicodeProperty("Variation_Selector", unicodeVariation_Selector),
UnicodeProperty("White_Space", unicodeWhite_Space),
UnicodeProperty("Yi", unicodeYi),
UnicodeProperty("Zl", unicodeZl),
UnicodeProperty("Zp", unicodeZp),
UnicodeProperty("Zs", unicodeZs),
];
immutable NFC_QCN = Charset([
    0x00340, 0x00341 +1,
    0x00343, 0x00344 +1,
    0x00374, 0x00374 +1,
    0x0037e, 0x0037e +1,
    0x00387, 0x00387 +1,
    0x00958, 0x0095f +1,
    0x009dc, 0x009dd +1,
    0x009df, 0x009df +1,
    0x00a33, 0x00a33 +1,
    0x00a36, 0x00a36 +1,
    0x00a59, 0x00a5b +1,
    0x00a5e, 0x00a5e +1,
    0x00b5c, 0x00b5d +1,
    0x00f43, 0x00f43 +1,
    0x00f4d, 0x00f4d +1,
    0x00f52, 0x00f52 +1,
    0x00f57, 0x00f57 +1,
    0x00f5c, 0x00f5c +1,
    0x00f69, 0x00f69 +1,
    0x00f73, 0x00f73 +1,
    0x00f75, 0x00f76 +1,
    0x00f78, 0x00f78 +1,
    0x00f81, 0x00f81 +1,
    0x00f93, 0x00f93 +1,
    0x00f9d, 0x00f9d +1,
    0x00fa2, 0x00fa2 +1,
    0x00fa7, 0x00fa7 +1,
    0x00fac, 0x00fac +1,
    0x00fb9, 0x00fb9 +1,
    0x01f71, 0x01f71 +1,
    0x01f73, 0x01f73 +1,
    0x01f75, 0x01f75 +1,
    0x01f77, 0x01f77 +1,
    0x01f79, 0x01f79 +1,
    0x01f7b, 0x01f7b +1,
    0x01f7d, 0x01f7d +1,
    0x01fbb, 0x01fbb +1,
    0x01fbe, 0x01fbe +1,
    0x01fc9, 0x01fc9 +1,
    0x01fcb, 0x01fcb +1,
    0x01fd3, 0x01fd3 +1,
    0x01fdb, 0x01fdb +1,
    0x01fe3, 0x01fe3 +1,
    0x01feb, 0x01feb +1,
    0x01fee, 0x01fef +1,
    0x01ff9, 0x01ff9 +1,
    0x01ffb, 0x01ffb +1,
    0x01ffd, 0x01ffd +1,
    0x02000, 0x02001 +1,
    0x02126, 0x02126 +1,
    0x0212a, 0x0212b +1,
    0x02329, 0x0232a +1,
    0x02adc, 0x02adc +1,
    0x0f900, 0x0fa0d +1,
    0x0fa10, 0x0fa10 +1,
    0x0fa12, 0x0fa12 +1,
    0x0fa15, 0x0fa1e +1,
    0x0fa20, 0x0fa20 +1,
    0x0fa22, 0x0fa22 +1,
    0x0fa25, 0x0fa26 +1,
    0x0fa2a, 0x0fa2d +1,
    0x0fa30, 0x0fa6d +1,
    0x0fa70, 0x0fad9 +1,
    0x0fb1d, 0x0fb1d +1,
    0x0fb1f, 0x0fb1f +1,
    0x0fb2a, 0x0fb36 +1,
    0x0fb38, 0x0fb3c +1,
    0x0fb3e, 0x0fb3e +1,
    0x0fb40, 0x0fb41 +1,
    0x0fb43, 0x0fb44 +1,
    0x0fb46, 0x0fb4e +1,
    0x1d15e, 0x1d164 +1,
    0x1d1bb, 0x1d1c0 +1,
    0x2f800, 0x2fa1d +1,
]);


immutable NFC_QCM = Charset([
    0x00300, 0x00304 +1,
    0x00306, 0x0030c +1,
    0x0030f, 0x0030f +1,
    0x00311, 0x00311 +1,
    0x00313, 0x00314 +1,
    0x0031b, 0x0031b +1,
    0x00323, 0x00328 +1,
    0x0032d, 0x0032e +1,
    0x00330, 0x00331 +1,
    0x00338, 0x00338 +1,
    0x00342, 0x00342 +1,
    0x00345, 0x00345 +1,
    0x00653, 0x00655 +1,
    0x0093c, 0x0093c +1,
    0x009be, 0x009be +1,
    0x009d7, 0x009d7 +1,
    0x00b3e, 0x00b3e +1,
    0x00b56, 0x00b57 +1,
    0x00bbe, 0x00bbe +1,
    0x00bd7, 0x00bd7 +1,
    0x00c56, 0x00c56 +1,
    0x00cc2, 0x00cc2 +1,
    0x00cd5, 0x00cd6 +1,
    0x00d3e, 0x00d3e +1,
    0x00d57, 0x00d57 +1,
    0x00dca, 0x00dca +1,
    0x00dcf, 0x00dcf +1,
    0x00ddf, 0x00ddf +1,
    0x0102e, 0x0102e +1,
    0x01161, 0x01175 +1,
    0x011a8, 0x011c2 +1,
    0x01b35, 0x01b35 +1,
    0x03099, 0x0309a +1,
    0x110ba, 0x110ba +1,
]);


